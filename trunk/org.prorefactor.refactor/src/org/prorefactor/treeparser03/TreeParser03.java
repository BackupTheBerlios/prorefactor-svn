// $ANTLR 2.7.5 (20050128): "treeparser03.g" -> "TreeParser03.java"$

	package org.prorefactor.treeparser03;

	import org.prorefactor.core.IJPNode;
	import org.prorefactor.treeparser.IJPTreeParser;

import antlr.TreeParser;
import antlr.Token;
import antlr.collections.AST;
import antlr.RecognitionException;
import antlr.ANTLRException;
import antlr.NoViableAltException;
import antlr.MismatchedTokenException;
import antlr.SemanticException;
import antlr.collections.impl.BitSet;
import antlr.ASTPair;
import antlr.collections.impl.ASTArray;



public class TreeParser03 extends antlr.TreeParser       implements TreeParser03TokenTypes
, IJPTreeParser {


	// --- The following are required in all tree parsers ---

	// Where did the tree parser leave off parsing -- might give us at least a bit
	// of an idea where things left off if an exception was thrown.
	// See antlr/TreeParser and the generated code.
	public AST get_retTree() {
		return _retTree;
	}

	// Func for grabbing the "state2" attribute from the node at LT(1) 
	private boolean state2(AST node, int match) {
		return ((IJPNode)node).getState2() == match;
	}


	// --- The above are for all tree parsers, below are for TreeParser03 ---


	TP03Support tpSupport = null;
	/**
	 * Set the support object for this tree parser.
	 * This tree parser does not instantiate its own support object.
	 */
	public void setSupport(TP03Support inSupport) {
		tpSupport = inSupport;
	}


public TreeParser03() {
	tokenNames = _tokenNames;
}

	public final void program(AST _t) throws RecognitionException {
		
		AST program_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2 = _t;
		AST tmp1_AST_in = (AST)_t;
		match(_t,Program_root);
		_t = _t.getFirstChild();
		if ( inputState.guessing==0 ) {
			tpSupport.blockBegin();
		}
		{
		_loop4:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_0.member(_t.getType()))) {
				blockorstate(_t);
				_t = _retTree;
			}
			else {
				break _loop4;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			tpSupport.blockEnd();
		}
		AST tmp2_AST_in = (AST)_t;
		match(_t,Program_tail);
		_t = _t.getNextSibling();
		_t = __t2;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void blockorstate(AST _t) throws RecognitionException {
		
		AST blockorstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST pd = null;
		
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case BLOCK_LABEL:
		{
			labeled_block(_t);
			_t = _retTree;
			break;
		}
		case AATRACE:
		case ACCUMULATE:
		case ALTER:
		case ANALYZE:
		case APPLY:
		case ASSIGN:
		case BELL:
		case BTOS:
		case BUFFERCOMPARE:
		case BUFFERCOPY:
		case CALL:
		case CASE:
		case CHOOSE:
		case CLEAR:
		case CLOSE:
		case COLOR:
		case COMPILE:
		case CONNECT:
		case CREATE:
		case DDE:
		case DECLARE:
		case DEFINE:
		case DELETE_KW:
		case DICTIONARY:
		case DISABLE:
		case DISCONNECT:
		case DISPLAY:
		case DO:
		case DOS:
		case DOWN:
		case DROP:
		case EMPTY:
		case ENABLE:
		case EXPORT:
		case FETCH:
		case FIND:
		case FOR:
		case FORMAT:
		case FUNCTION:
		case GET:
		case GETKEYVALUE:
		case GRANT:
		case HIDE:
		case IF:
		case IMPORT:
		case INPUT:
		case INPUTOUTPUT:
		case INSERT:
		case LEAVE:
		case LOAD:
		case MESSAGE:
		case MPE:
		case NEXT:
		case NEXTPROMPT:
		case ON:
		case OPEN:
		case OS2:
		case OS400:
		case OSAPPEND:
		case OSCOMMAND:
		case OSCOPY:
		case OSCREATEDIR:
		case OSDELETE:
		case OSRENAME:
		case OUTPUT:
		case PAGE:
		case PAUSE:
		case PROCEDURE:
		case PROCESS:
		case PROMPTFOR:
		case PUBLISH:
		case PUT:
		case PUTKEYVALUE:
		case QUIT:
		case RAWTRANSFER:
		case READKEY:
		case RELEASE:
		case REPEAT:
		case REPOSITION:
		case RETURN:
		case REVOKE:
		case RUN:
		case SAVE:
		case SCROLL:
		case SEEK:
		case SELECT:
		case SET:
		case SHOWSTATS:
		case STATUS:
		case STOP:
		case SUBSCRIBE:
		case SYSTEMDIALOG:
		case SYSTEMHELP:
		case TRANSACTIONMODE:
		case TRIGGER:
		case UNDERLINE:
		case UNDO:
		case UNIX:
		case UNLOAD:
		case UNSUBSCRIBE:
		case UP:
		case UPDATE:
		case USE:
		case VALIDATE:
		case VIEW:
		case VMS:
		case WAITFOR:
		case COPYLOB:
		{
			statement(_t);
			_t = _retTree;
			if ( inputState.guessing==0 ) {
				tpSupport.statementEnd();
			}
			break;
		}
		case Expr_statement:
		{
			AST __t11 = _t;
			AST tmp3_AST_in = (AST)_t;
			match(_t,Expr_statement);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case NOERROR_KW:
			{
				AST tmp4_AST_in = (AST)_t;
				match(_t,NOERROR_KW);
				_t = _t.getNextSibling();
				break;
			}
			case EOF:
			case PERIOD:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			state_end(_t);
			_t = _retTree;
			_t = __t11;
			_t = _t.getNextSibling();
			break;
		}
		case PROPARSEDIRECTIVE:
		{
			pd = (AST)_t;
			match(_t,PROPARSEDIRECTIVE);
			_t = _t.getNextSibling();
			if ( inputState.guessing==0 ) {
				tpSupport.proparsedirective(pd);
			}
			break;
		}
		case PERIOD:
		{
			AST tmp5_AST_in = (AST)_t;
			match(_t,PERIOD);
			_t = _t.getNextSibling();
			if ( inputState.guessing==0 ) {
				tpSupport.statementEnd();
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_retTree = _t;
	}
	
	public final void code_block(AST _t) throws RecognitionException {
		
		AST code_block_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t6 = _t;
		AST tmp6_AST_in = (AST)_t;
		match(_t,Code_block);
		_t = _t.getFirstChild();
		if ( inputState.guessing==0 ) {
			tpSupport.blockBegin();
		}
		{
		_loop8:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_0.member(_t.getType()))) {
				blockorstate(_t);
				_t = _retTree;
			}
			else {
				break _loop8;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			tpSupport.blockEnd();
		}
		_t = __t6;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void labeled_block(AST _t) throws RecognitionException {
		
		AST labeled_block_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST bl = null;
		
		AST __t14 = _t;
		bl = _t==ASTNULL ? null :(AST)_t;
		match(_t,BLOCK_LABEL);
		_t = _t.getFirstChild();
		if ( inputState.guessing==0 ) {
			tpSupport.blockWithLabel(bl);
		}
		AST tmp7_AST_in = (AST)_t;
		match(_t,LEXCOLON);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case DO:
		{
			dostate(_t);
			_t = _retTree;
			break;
		}
		case FOR:
		{
			forstate(_t);
			_t = _retTree;
			break;
		}
		case REPEAT:
		{
			repeatstate(_t);
			_t = _retTree;
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t14;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void statement(AST _t) throws RecognitionException {
		
		AST statement_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case AATRACE:
		{
			aatracestatement(_t);
			_t = _retTree;
			break;
		}
		case ACCUMULATE:
		{
			accumulatestate(_t);
			_t = _retTree;
			break;
		}
		case ALTER:
		{
			altertablestate(_t);
			_t = _retTree;
			break;
		}
		case ANALYZE:
		{
			analyzestate(_t);
			_t = _retTree;
			break;
		}
		case APPLY:
		{
			applystate(_t);
			_t = _retTree;
			break;
		}
		case ASSIGN:
		{
			assignstate(_t);
			_t = _retTree;
			break;
		}
		case BELL:
		{
			bellstate(_t);
			_t = _retTree;
			break;
		}
		case BUFFERCOMPARE:
		{
			buffercomparestate(_t);
			_t = _retTree;
			break;
		}
		case BUFFERCOPY:
		{
			buffercopystate(_t);
			_t = _retTree;
			break;
		}
		case CALL:
		{
			callstate(_t);
			_t = _retTree;
			break;
		}
		case CASE:
		{
			casestate(_t);
			_t = _retTree;
			break;
		}
		case CHOOSE:
		{
			choosestate(_t);
			_t = _retTree;
			break;
		}
		case CLEAR:
		{
			clearstate(_t);
			_t = _retTree;
			break;
		}
		case COLOR:
		{
			colorstate(_t);
			_t = _retTree;
			break;
		}
		case COMPILE:
		{
			compilestate(_t);
			_t = _retTree;
			break;
		}
		case CONNECT:
		{
			connectstate(_t);
			_t = _retTree;
			break;
		}
		case COPYLOB:
		{
			copylobstate(_t);
			_t = _retTree;
			break;
		}
		case DECLARE:
		{
			declarecursorstate(_t);
			_t = _retTree;
			break;
		}
		case DICTIONARY:
		{
			dictionarystate(_t);
			_t = _retTree;
			break;
		}
		case DISCONNECT:
		{
			disconnectstate(_t);
			_t = _retTree;
			break;
		}
		case DISPLAY:
		{
			displaystate(_t);
			_t = _retTree;
			break;
		}
		case DO:
		{
			dostate(_t);
			_t = _retTree;
			break;
		}
		case DOWN:
		{
			downstate(_t);
			_t = _retTree;
			break;
		}
		case EMPTY:
		{
			emptytemptablestate(_t);
			_t = _retTree;
			break;
		}
		case ENABLE:
		{
			enablestate(_t);
			_t = _retTree;
			break;
		}
		case EXPORT:
		{
			exportstate(_t);
			_t = _retTree;
			break;
		}
		case FETCH:
		{
			fetchstate(_t);
			_t = _retTree;
			break;
		}
		case FIND:
		{
			findstate(_t);
			_t = _retTree;
			break;
		}
		case FOR:
		{
			forstate(_t);
			_t = _retTree;
			break;
		}
		case FORMAT:
		{
			formstate(_t);
			_t = _retTree;
			break;
		}
		case FUNCTION:
		{
			functionstate(_t);
			_t = _retTree;
			break;
		}
		case GET:
		{
			getstate(_t);
			_t = _retTree;
			break;
		}
		case GETKEYVALUE:
		{
			getkeyvaluestate(_t);
			_t = _retTree;
			break;
		}
		case GRANT:
		{
			grantstate(_t);
			_t = _retTree;
			break;
		}
		case HIDE:
		{
			hidestate(_t);
			_t = _retTree;
			break;
		}
		case IF:
		{
			ifstate(_t);
			_t = _retTree;
			break;
		}
		case IMPORT:
		{
			importstate(_t);
			_t = _retTree;
			break;
		}
		case LEAVE:
		{
			leavestate(_t);
			_t = _retTree;
			break;
		}
		case LOAD:
		{
			loadstate(_t);
			_t = _retTree;
			break;
		}
		case MESSAGE:
		{
			messagestate(_t);
			_t = _retTree;
			break;
		}
		case NEXT:
		{
			nextstate(_t);
			_t = _retTree;
			break;
		}
		case NEXTPROMPT:
		{
			nextpromptstate(_t);
			_t = _retTree;
			break;
		}
		case ON:
		{
			onstate(_t);
			_t = _retTree;
			break;
		}
		case OSAPPEND:
		{
			osappendstate(_t);
			_t = _retTree;
			break;
		}
		case BTOS:
		case DOS:
		case MPE:
		case OS2:
		case OS400:
		case OSCOMMAND:
		case UNIX:
		case VMS:
		{
			oscommandstate(_t);
			_t = _retTree;
			break;
		}
		case OSCOPY:
		{
			oscopystate(_t);
			_t = _retTree;
			break;
		}
		case OSCREATEDIR:
		{
			oscreatedirstate(_t);
			_t = _retTree;
			break;
		}
		case OSDELETE:
		{
			osdeletestate(_t);
			_t = _retTree;
			break;
		}
		case OSRENAME:
		{
			osrenamestate(_t);
			_t = _retTree;
			break;
		}
		case PAGE:
		{
			pagestate(_t);
			_t = _retTree;
			break;
		}
		case PAUSE:
		{
			pausestate(_t);
			_t = _retTree;
			break;
		}
		case PROCEDURE:
		{
			procedurestate(_t);
			_t = _retTree;
			break;
		}
		case PROCESS:
		{
			processeventsstate(_t);
			_t = _retTree;
			break;
		}
		case PROMPTFOR:
		{
			promptforstate(_t);
			_t = _retTree;
			break;
		}
		case PUBLISH:
		{
			publishstate(_t);
			_t = _retTree;
			break;
		}
		case PUTKEYVALUE:
		{
			putkeyvaluestate(_t);
			_t = _retTree;
			break;
		}
		case QUIT:
		{
			quitstate(_t);
			_t = _retTree;
			break;
		}
		case RAWTRANSFER:
		{
			rawtransferstate(_t);
			_t = _retTree;
			break;
		}
		case READKEY:
		{
			readkeystate(_t);
			_t = _retTree;
			break;
		}
		case REPEAT:
		{
			repeatstate(_t);
			_t = _retTree;
			break;
		}
		case REPOSITION:
		{
			repositionstate(_t);
			_t = _retTree;
			break;
		}
		case RETURN:
		{
			returnstate(_t);
			_t = _retTree;
			break;
		}
		case REVOKE:
		{
			revokestate(_t);
			_t = _retTree;
			break;
		}
		case SAVE:
		{
			savecachestate(_t);
			_t = _retTree;
			break;
		}
		case SCROLL:
		{
			scrollstate(_t);
			_t = _retTree;
			break;
		}
		case SEEK:
		{
			seekstate(_t);
			_t = _retTree;
			break;
		}
		case SELECT:
		{
			selectstate(_t);
			_t = _retTree;
			break;
		}
		case SET:
		{
			setstate(_t);
			_t = _retTree;
			break;
		}
		case SHOWSTATS:
		{
			showstatsstate(_t);
			_t = _retTree;
			break;
		}
		case STATUS:
		{
			statusstate(_t);
			_t = _retTree;
			break;
		}
		case STOP:
		{
			stopstate(_t);
			_t = _retTree;
			break;
		}
		case SUBSCRIBE:
		{
			subscribestate(_t);
			_t = _retTree;
			break;
		}
		case SYSTEMHELP:
		{
			systemhelpstate(_t);
			_t = _retTree;
			break;
		}
		case TRANSACTIONMODE:
		{
			transactionmodeautomaticstate(_t);
			_t = _retTree;
			break;
		}
		case TRIGGER:
		{
			triggerprocedurestate(_t);
			_t = _retTree;
			break;
		}
		case UNDERLINE:
		{
			underlinestate(_t);
			_t = _retTree;
			break;
		}
		case UNDO:
		{
			undostate(_t);
			_t = _retTree;
			break;
		}
		case UNLOAD:
		{
			unloadstate(_t);
			_t = _retTree;
			break;
		}
		case UNSUBSCRIBE:
		{
			unsubscribestate(_t);
			_t = _retTree;
			break;
		}
		case UP:
		{
			upstate(_t);
			_t = _retTree;
			break;
		}
		case UPDATE:
		{
			updatestatement(_t);
			_t = _retTree;
			break;
		}
		case USE:
		{
			usestate(_t);
			_t = _retTree;
			break;
		}
		case VALIDATE:
		{
			validatestate(_t);
			_t = _retTree;
			break;
		}
		case VIEW:
		{
			viewstate(_t);
			_t = _retTree;
			break;
		}
		case WAITFOR:
		{
			waitforstate(_t);
			_t = _retTree;
			break;
		}
		default:
			if (_t==null) _t=ASTNULL;
			if (((_t.getType()==CLOSE))&&(state2(_t, 0))) {
				closestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==CLOSE))&&(state2(_t, QUERY))) {
				closequerystate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==CLOSE))&&(state2(_t, STOREDPROCEDURE))) {
				closestoredprocedurestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==CREATE))&&(state2(_t, 0))) {
				createstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==CREATE))&&(state2(_t, ALIAS))) {
				createaliasstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==CREATE))&&(state2(_t, Automationobject))) {
				createautomationobjectstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==CREATE))&&(state2(_t, BROWSE))) {
				createbrowsestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==CREATE))&&(state2(_t, BUFFER))) {
				createbufferstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==CREATE))&&(state2(_t, CALL))) {
				createcallstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==CREATE))&&(state2(_t, DATABASE))) {
				createdatabasestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==CREATE))&&(state2(_t, DATASET))) {
				createdatasetstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==CREATE))&&(state2(_t, DATASOURCE))) {
				createdatasourcestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==CREATE))&&(state2(_t, INDEX))) {
				createindexstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==CREATE))&&(state2(_t, QUERY))) {
				createquerystate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==CREATE))&&(state2(_t, SAXREADER))) {
				createsaxreaderstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==CREATE))&&(state2(_t, SERVER))) {
				createserverstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==CREATE))&&(state2(_t, SERVERSOCKET))) {
				createserversocketstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==CREATE))&&(state2(_t, SOAPHEADER))) {
				createsoapheaderstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==CREATE))&&(state2(_t, SOAPHEADERENTRYREF))) {
				createsoapheaderentryrefstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==CREATE))&&(state2(_t, SOCKET))) {
				createsocketstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==CREATE))&&(state2(_t, TABLE))) {
				createtablestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==CREATE))&&(state2(_t, TEMPTABLE))) {
				createtemptablestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==CREATE))&&(state2(_t, VIEW))) {
				createviewstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==CREATE))&&(state2(_t, WIDGET))) {
				createwidgetstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==CREATE))&&(state2(_t, WIDGETPOOL))) {
				createwidgetpoolstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==CREATE))&&(state2(_t, XDOCUMENT))) {
				createxdocumentstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==CREATE))&&(state2(_t, XNODEREF))) {
				createxnoderefstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DDE))&&(state2(_t, ADVISE))) {
				ddeadvisestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DDE))&&(state2(_t, EXECUTE))) {
				ddeexecutestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DDE))&&(state2(_t, GET))) {
				ddegetstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DDE))&&(state2(_t, INITIATE))) {
				ddeinitiatestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DDE))&&(state2(_t, REQUEST))) {
				dderequeststate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DDE))&&(state2(_t, SEND))) {
				ddesendstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DDE))&&(state2(_t, TERMINATE))) {
				ddeterminatestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DEFINE))&&(state2(_t, BROWSE))) {
				definebrowsestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DEFINE))&&(state2(_t, BUFFER))) {
				definebufferstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DEFINE))&&(state2(_t, BUTTON))) {
				definebuttonstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DEFINE))&&(state2(_t, DATASET))) {
				definedatasetstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DEFINE))&&(state2(_t, DATASOURCE))) {
				definedatasourcestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DEFINE))&&(state2(_t, FRAME))) {
				defineframestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DEFINE))&&(state2(_t, IMAGE))) {
				defineimagestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DEFINE))&&(state2(_t, MENU))) {
				definemenustate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DEFINE))&&(state2(_t, PARAMETER))) {
				defineparameterstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DEFINE))&&(state2(_t, QUERY))) {
				definequerystate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DEFINE))&&(state2(_t, RECTANGLE))) {
				definerectanglestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DEFINE))&&(state2(_t, STREAM))) {
				definestreamstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DEFINE))&&(state2(_t, SUBMENU))) {
				definesubmenustate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DEFINE))&&(state2(_t, TEMPTABLE))) {
				definetemptablestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DEFINE))&&(state2(_t, WORKTABLE))) {
				defineworktablestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DEFINE))&&(state2(_t, VARIABLE))) {
				definevariablestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DELETE_KW))&&(state2(_t, 0))) {
				deletestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DELETE_KW))&&(state2(_t, ALIAS))) {
				deletealiasstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DELETE_KW))&&(state2(_t, FROM))) {
				deletefromstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DELETE_KW))&&(state2(_t, OBJECT))) {
				deleteobjectstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DELETE_KW))&&(state2(_t, PROCEDURE))) {
				deleteprocedurestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DELETE_KW))&&(state2(_t, WIDGET))) {
				deletewidgetstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DELETE_KW))&&(state2(_t, WIDGETPOOL))) {
				deletewidgetpoolstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DISABLE))&&(state2(_t, 0))) {
				disablestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DISABLE))&&(state2(_t, TRIGGERS))) {
				disabletriggersstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DROP))&&(state2(_t, INDEX))) {
				dropindexstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DROP))&&(state2(_t, TABLE))) {
				droptablestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==DROP))&&(state2(_t, VIEW))) {
				dropviewstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==INPUT))&&(state2(_t, CLEAR))) {
				inputclearstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==INPUT))&&(state2(_t, CLOSE))) {
				inputclosestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==INPUT))&&(state2(_t, FROM))) {
				inputfromstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==INPUT))&&(state2(_t, THROUGH))) {
				inputthroughstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==INPUTOUTPUT))&&(state2(_t, CLOSE))) {
				inputoutputclosestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==INPUTOUTPUT))&&(state2(_t, THROUGH))) {
				inputoutputthroughstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==INSERT))&&(state2(_t, INTO))) {
				insertintostate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==INSERT))&&(state2(_t, 0))) {
				insertstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==OPEN))&&(state2(_t, 0))) {
				openstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==OPEN))&&(state2(_t, QUERY))) {
				openquerystate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==OUTPUT))&&(state2(_t, CLOSE))) {
				outputclosestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==OUTPUT))&&(state2(_t, THROUGH))) {
				outputthroughstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==OUTPUT))&&(state2(_t, TO))) {
				outputtostate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==PUT))&&(state2(_t, 0))) {
				putstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==PUT))&&(state2(_t, CURSOR))) {
				putcursorstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==PUT))&&(state2(_t, SCREEN))) {
				putscreenstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==RELEASE))&&(state2(_t, 0))) {
				releasestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==RELEASE))&&(state2(_t, EXTERNAL))) {
				releaseexternalstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==RELEASE))&&(state2(_t, OBJECT))) {
				releaseobjectstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==RUN))&&(state2(_t, 0))) {
				runstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==RUN))&&(state2(_t, STOREDPROCEDURE))) {
				runstoredprocedurestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==RUN))&&(state2(_t, SUPER))) {
				runsuperstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==SYSTEMDIALOG))&&(state2(_t, COLOR))) {
				systemdialogcolorstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==SYSTEMDIALOG))&&(state2(_t, FONT))) {
				systemdialogfontstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==SYSTEMDIALOG))&&(state2(_t, GETDIR))) {
				systemdialoggetdirstate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==SYSTEMDIALOG))&&(state2(_t, GETFILE))) {
				systemdialoggetfilestate(_t);
				_t = _retTree;
			}
			else if (((_t.getType()==SYSTEMDIALOG))&&(state2(_t, PRINTERSETUP))) {
				systemdialogprintersetupstate(_t);
				_t = _retTree;
			}
		else {
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void expression(AST _t) throws RecognitionException {
		
		AST expression_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case OR:
		{
			AST __t78 = _t;
			AST tmp8_AST_in = (AST)_t;
			match(_t,OR);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			expression(_t);
			_t = _retTree;
			_t = __t78;
			_t = _t.getNextSibling();
			break;
		}
		case AND:
		{
			AST __t79 = _t;
			AST tmp9_AST_in = (AST)_t;
			match(_t,AND);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			expression(_t);
			_t = _retTree;
			_t = __t79;
			_t = _t.getNextSibling();
			break;
		}
		case NOT:
		{
			AST __t80 = _t;
			AST tmp10_AST_in = (AST)_t;
			match(_t,NOT);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t80;
			_t = _t.getNextSibling();
			break;
		}
		case MATCHES:
		{
			AST __t81 = _t;
			AST tmp11_AST_in = (AST)_t;
			match(_t,MATCHES);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			expression(_t);
			_t = _retTree;
			_t = __t81;
			_t = _t.getNextSibling();
			break;
		}
		case BEGINS:
		{
			AST __t82 = _t;
			AST tmp12_AST_in = (AST)_t;
			match(_t,BEGINS);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			expression(_t);
			_t = _retTree;
			_t = __t82;
			_t = _t.getNextSibling();
			break;
		}
		case CONTAINS:
		{
			AST __t83 = _t;
			AST tmp13_AST_in = (AST)_t;
			match(_t,CONTAINS);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			expression(_t);
			_t = _retTree;
			_t = __t83;
			_t = _t.getNextSibling();
			break;
		}
		case EQ:
		{
			AST __t84 = _t;
			AST tmp14_AST_in = (AST)_t;
			match(_t,EQ);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			expression(_t);
			_t = _retTree;
			_t = __t84;
			_t = _t.getNextSibling();
			break;
		}
		case NE:
		{
			AST __t85 = _t;
			AST tmp15_AST_in = (AST)_t;
			match(_t,NE);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			expression(_t);
			_t = _retTree;
			_t = __t85;
			_t = _t.getNextSibling();
			break;
		}
		case GTHAN:
		{
			AST __t86 = _t;
			AST tmp16_AST_in = (AST)_t;
			match(_t,GTHAN);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			expression(_t);
			_t = _retTree;
			_t = __t86;
			_t = _t.getNextSibling();
			break;
		}
		case GE:
		{
			AST __t87 = _t;
			AST tmp17_AST_in = (AST)_t;
			match(_t,GE);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			expression(_t);
			_t = _retTree;
			_t = __t87;
			_t = _t.getNextSibling();
			break;
		}
		case LTHAN:
		{
			AST __t88 = _t;
			AST tmp18_AST_in = (AST)_t;
			match(_t,LTHAN);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			expression(_t);
			_t = _retTree;
			_t = __t88;
			_t = _t.getNextSibling();
			break;
		}
		case LE:
		{
			AST __t89 = _t;
			AST tmp19_AST_in = (AST)_t;
			match(_t,LE);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			expression(_t);
			_t = _retTree;
			_t = __t89;
			_t = _t.getNextSibling();
			break;
		}
		case PLUS:
		{
			AST __t90 = _t;
			AST tmp20_AST_in = (AST)_t;
			match(_t,PLUS);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			expression(_t);
			_t = _retTree;
			_t = __t90;
			_t = _t.getNextSibling();
			break;
		}
		case MINUS:
		{
			AST __t91 = _t;
			AST tmp21_AST_in = (AST)_t;
			match(_t,MINUS);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			expression(_t);
			_t = _retTree;
			_t = __t91;
			_t = _t.getNextSibling();
			break;
		}
		case MULTIPLY:
		{
			AST __t92 = _t;
			AST tmp22_AST_in = (AST)_t;
			match(_t,MULTIPLY);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			expression(_t);
			_t = _retTree;
			_t = __t92;
			_t = _t.getNextSibling();
			break;
		}
		case DIVIDE:
		{
			AST __t93 = _t;
			AST tmp23_AST_in = (AST)_t;
			match(_t,DIVIDE);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			expression(_t);
			_t = _retTree;
			_t = __t93;
			_t = _t.getNextSibling();
			break;
		}
		case MODULO:
		{
			AST __t94 = _t;
			AST tmp24_AST_in = (AST)_t;
			match(_t,MODULO);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			expression(_t);
			_t = _retTree;
			_t = __t94;
			_t = _t.getNextSibling();
			break;
		}
		case UNARY_MINUS:
		{
			AST __t95 = _t;
			AST tmp25_AST_in = (AST)_t;
			match(_t,UNARY_MINUS);
			_t = _t.getFirstChild();
			exprt(_t);
			_t = _retTree;
			_t = __t95;
			_t = _t.getNextSibling();
			break;
		}
		case UNARY_PLUS:
		{
			AST __t96 = _t;
			AST tmp26_AST_in = (AST)_t;
			match(_t,UNARY_PLUS);
			_t = _t.getFirstChild();
			exprt(_t);
			_t = _retTree;
			_t = __t96;
			_t = _t.getNextSibling();
			break;
		}
		default:
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_1.member(_t.getType()))) {
				exprt(_t);
				_t = _retTree;
			}
		else {
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void state_end(AST _t) throws RecognitionException {
		
		AST state_end_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case PERIOD:
		{
			AST tmp27_AST_in = (AST)_t;
			match(_t,PERIOD);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		{
			AST tmp28_AST_in = (AST)_t;
			match(_t,Token.EOF_TYPE);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void dostate(AST _t) throws RecognitionException {
		
		AST dostate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1100 = _t;
		AST tmp29_AST_in = (AST)_t;
		match(_t,DO);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case FOR:
		{
			block_for(_t);
			_t = _retTree;
			break;
		}
		case PERIOD:
		case BREAK:
		case BY:
		case COLLATE:
		case GROUP:
		case ON:
		case PRESELECT:
		case QUERYTUNING:
		case TRANSACTION:
		case WHILE:
		case WITH:
		case LEXCOLON:
		case Block_iterator:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case PRESELECT:
		{
			block_preselect(_t);
			_t = _retTree;
			break;
		}
		case PERIOD:
		case BREAK:
		case BY:
		case COLLATE:
		case GROUP:
		case ON:
		case QUERYTUNING:
		case TRANSACTION:
		case WHILE:
		case WITH:
		case LEXCOLON:
		case Block_iterator:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop1104:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_2.member(_t.getType()))) {
				block_opt(_t);
				_t = _retTree;
			}
			else {
				break _loop1104;
			}
			
		} while (true);
		}
		block_colon(_t);
		_t = _retTree;
		if ( inputState.guessing==0 ) {
			tpSupport.statementEnd();
		}
		code_block(_t);
		_t = _retTree;
		block_end(_t);
		_t = _retTree;
		_t = __t1100;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void forstate(AST _t) throws RecognitionException {
		
		AST forstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1214 = _t;
		AST tmp30_AST_in = (AST)_t;
		match(_t,FOR);
		_t = _t.getFirstChild();
		for_record_spec(_t);
		_t = _retTree;
		{
		_loop1216:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_2.member(_t.getType()))) {
				block_opt(_t);
				_t = _retTree;
			}
			else {
				break _loop1216;
			}
			
		} while (true);
		}
		block_colon(_t);
		_t = _retTree;
		if ( inputState.guessing==0 ) {
			tpSupport.statementEnd();
		}
		code_block(_t);
		_t = _retTree;
		block_end(_t);
		_t = _retTree;
		_t = __t1214;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void repeatstate(AST _t) throws RecognitionException {
		
		AST repeatstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1938 = _t;
		AST tmp31_AST_in = (AST)_t;
		match(_t,REPEAT);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case FOR:
		{
			block_for(_t);
			_t = _retTree;
			break;
		}
		case PERIOD:
		case BREAK:
		case BY:
		case COLLATE:
		case GROUP:
		case ON:
		case PRESELECT:
		case QUERYTUNING:
		case TRANSACTION:
		case WHILE:
		case WITH:
		case LEXCOLON:
		case Block_iterator:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case PRESELECT:
		{
			block_preselect(_t);
			_t = _retTree;
			break;
		}
		case PERIOD:
		case BREAK:
		case BY:
		case COLLATE:
		case GROUP:
		case ON:
		case QUERYTUNING:
		case TRANSACTION:
		case WHILE:
		case WITH:
		case LEXCOLON:
		case Block_iterator:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop1942:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_2.member(_t.getType()))) {
				block_opt(_t);
				_t = _retTree;
			}
			else {
				break _loop1942;
			}
			
		} while (true);
		}
		block_colon(_t);
		_t = _retTree;
		if ( inputState.guessing==0 ) {
			tpSupport.statementEnd();
		}
		code_block(_t);
		_t = _retTree;
		block_end(_t);
		_t = _retTree;
		_t = __t1938;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void block_colon(AST _t) throws RecognitionException {
		
		AST block_colon_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case LEXCOLON:
		{
			AST tmp32_AST_in = (AST)_t;
			match(_t,LEXCOLON);
			_t = _t.getNextSibling();
			break;
		}
		case PERIOD:
		{
			AST tmp33_AST_in = (AST)_t;
			match(_t,PERIOD);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void block_end(AST _t) throws RecognitionException {
		
		AST block_end_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case EOF:
		{
			AST tmp34_AST_in = (AST)_t;
			match(_t,Token.EOF_TYPE);
			_t = _t.getNextSibling();
			break;
		}
		case END:
		{
			AST tmp35_AST_in = (AST)_t;
			match(_t,END);
			_t = _t.getNextSibling();
			state_end(_t);
			_t = _retTree;
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void block_for(AST _t) throws RecognitionException {
		
		AST block_for_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t19 = _t;
		AST tmp36_AST_in = (AST)_t;
		match(_t,FOR);
		_t = _t.getFirstChild();
		record_name(_t);
		_t = _retTree;
		{
		_loop21:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==COMMA)) {
				AST tmp37_AST_in = (AST)_t;
				match(_t,COMMA);
				_t = _t.getNextSibling();
				record_name(_t);
				_t = _retTree;
			}
			else {
				break _loop21;
			}
			
		} while (true);
		}
		_t = __t19;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void record_name(AST _t) throws RecognitionException {
		
		AST record_name_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST id = null;
		
		id = (AST)_t;
		match(_t,RECORD_NAME);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void block_opt(AST _t) throws RecognitionException {
		
		AST block_opt_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case Block_iterator:
		{
			AST __t23 = _t;
			AST tmp38_AST_in = (AST)_t;
			match(_t,Block_iterator);
			_t = _t.getFirstChild();
			field(_t);
			_t = _retTree;
			AST tmp39_AST_in = (AST)_t;
			match(_t,EQUAL);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			AST tmp40_AST_in = (AST)_t;
			match(_t,TO);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case BY:
			{
				AST tmp41_AST_in = (AST)_t;
				match(_t,BY);
				_t = _t.getNextSibling();
				constant(_t);
				_t = _retTree;
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t23;
			_t = _t.getNextSibling();
			break;
		}
		case QUERYTUNING:
		{
			querytuningphrase(_t);
			_t = _retTree;
			break;
		}
		case WHILE:
		{
			AST __t25 = _t;
			AST tmp42_AST_in = (AST)_t;
			match(_t,WHILE);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t25;
			_t = _t.getNextSibling();
			break;
		}
		case TRANSACTION:
		{
			AST tmp43_AST_in = (AST)_t;
			match(_t,TRANSACTION);
			_t = _t.getNextSibling();
			break;
		}
		case ON:
		{
			on___phrase(_t);
			_t = _retTree;
			break;
		}
		case WITH:
		{
			framephrase(_t);
			_t = _retTree;
			break;
		}
		case BREAK:
		{
			AST tmp44_AST_in = (AST)_t;
			match(_t,BREAK);
			_t = _t.getNextSibling();
			break;
		}
		case BY:
		{
			AST __t26 = _t;
			AST tmp45_AST_in = (AST)_t;
			match(_t,BY);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case DESCENDING:
			{
				AST tmp46_AST_in = (AST)_t;
				match(_t,DESCENDING);
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t26;
			_t = _t.getNextSibling();
			break;
		}
		case COLLATE:
		{
			collatephrase(_t);
			_t = _retTree;
			break;
		}
		case GROUP:
		{
			AST __t28 = _t;
			AST tmp47_AST_in = (AST)_t;
			match(_t,GROUP);
			_t = _t.getFirstChild();
			{
			int _cnt32=0;
			_loop32:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==BY)) {
					AST __t30 = _t;
					AST tmp48_AST_in = (AST)_t;
					match(_t,BY);
					_t = _t.getFirstChild();
					expression(_t);
					_t = _retTree;
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case DESCENDING:
					{
						AST tmp49_AST_in = (AST)_t;
						match(_t,DESCENDING);
						_t = _t.getNextSibling();
						break;
					}
					case 3:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
					_t = __t30;
					_t = _t.getNextSibling();
				}
				else {
					if ( _cnt32>=1 ) { break _loop32; } else {throw new NoViableAltException(_t);}
				}
				
				_cnt32++;
			} while (true);
			}
			_t = __t28;
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void field(AST _t) throws RecognitionException {
		
		AST field_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST ref = null;
		AST id = null;
		
		AST __t126 = _t;
		ref = _t==ASTNULL ? null :(AST)_t;
		match(_t,Field_ref);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case INPUT:
		{
			AST tmp50_AST_in = (AST)_t;
			match(_t,INPUT);
			_t = _t.getNextSibling();
			break;
		}
		case BROWSE:
		case FRAME:
		case ID:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case FRAME:
		{
			AST __t129 = _t;
			AST tmp51_AST_in = (AST)_t;
			match(_t,FRAME);
			_t = _t.getFirstChild();
			AST tmp52_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			_t = __t129;
			_t = _t.getNextSibling();
			break;
		}
		case BROWSE:
		{
			AST __t130 = _t;
			AST tmp53_AST_in = (AST)_t;
			match(_t,BROWSE);
			_t = _t.getFirstChild();
			AST tmp54_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			_t = __t130;
			_t = _t.getNextSibling();
			break;
		}
		case ID:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		id = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case Array_subscript:
		{
			array_subscript(_t);
			_t = _retTree;
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t126;
		_t = _t.getNextSibling();
		if ( inputState.guessing==0 ) {
			tpSupport.fieldRef(ref, id);
		}
		_retTree = _t;
	}
	
	public final void constant(AST _t) throws RecognitionException {
		
		AST constant_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case TRUE_KW:
		{
			AST tmp55_AST_in = (AST)_t;
			match(_t,TRUE_KW);
			_t = _t.getNextSibling();
			break;
		}
		case FALSE_KW:
		{
			AST tmp56_AST_in = (AST)_t;
			match(_t,FALSE_KW);
			_t = _t.getNextSibling();
			break;
		}
		case YES:
		{
			AST tmp57_AST_in = (AST)_t;
			match(_t,YES);
			_t = _t.getNextSibling();
			break;
		}
		case NO:
		{
			AST tmp58_AST_in = (AST)_t;
			match(_t,NO);
			_t = _t.getNextSibling();
			break;
		}
		case UNKNOWNVALUE:
		{
			AST tmp59_AST_in = (AST)_t;
			match(_t,UNKNOWNVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case QSTRING:
		{
			AST tmp60_AST_in = (AST)_t;
			match(_t,QSTRING);
			_t = _t.getNextSibling();
			break;
		}
		case LEXDATE:
		{
			AST tmp61_AST_in = (AST)_t;
			match(_t,LEXDATE);
			_t = _t.getNextSibling();
			break;
		}
		case NUMBER:
		{
			AST tmp62_AST_in = (AST)_t;
			match(_t,NUMBER);
			_t = _t.getNextSibling();
			break;
		}
		case NULL_KW:
		{
			AST tmp63_AST_in = (AST)_t;
			match(_t,NULL_KW);
			_t = _t.getNextSibling();
			break;
		}
		case NOWAIT:
		{
			AST tmp64_AST_in = (AST)_t;
			match(_t,NOWAIT);
			_t = _t.getNextSibling();
			break;
		}
		case SHARELOCK:
		{
			AST tmp65_AST_in = (AST)_t;
			match(_t,SHARELOCK);
			_t = _t.getNextSibling();
			break;
		}
		case EXCLUSIVELOCK:
		{
			AST tmp66_AST_in = (AST)_t;
			match(_t,EXCLUSIVELOCK);
			_t = _t.getNextSibling();
			break;
		}
		case NOLOCK:
		{
			AST tmp67_AST_in = (AST)_t;
			match(_t,NOLOCK);
			_t = _t.getNextSibling();
			break;
		}
		case BIGENDIAN:
		{
			AST tmp68_AST_in = (AST)_t;
			match(_t,BIGENDIAN);
			_t = _t.getNextSibling();
			break;
		}
		case FINDCASESENSITIVE:
		{
			AST tmp69_AST_in = (AST)_t;
			match(_t,FINDCASESENSITIVE);
			_t = _t.getNextSibling();
			break;
		}
		case FINDGLOBAL:
		{
			AST tmp70_AST_in = (AST)_t;
			match(_t,FINDGLOBAL);
			_t = _t.getNextSibling();
			break;
		}
		case FINDNEXTOCCURRENCE:
		{
			AST tmp71_AST_in = (AST)_t;
			match(_t,FINDNEXTOCCURRENCE);
			_t = _t.getNextSibling();
			break;
		}
		case FINDPREVOCCURRENCE:
		{
			AST tmp72_AST_in = (AST)_t;
			match(_t,FINDPREVOCCURRENCE);
			_t = _t.getNextSibling();
			break;
		}
		case FINDSELECT:
		{
			AST tmp73_AST_in = (AST)_t;
			match(_t,FINDSELECT);
			_t = _t.getNextSibling();
			break;
		}
		case FINDWRAPAROUND:
		{
			AST tmp74_AST_in = (AST)_t;
			match(_t,FINDWRAPAROUND);
			_t = _t.getNextSibling();
			break;
		}
		case FUNCTIONCALLTYPE:
		{
			AST tmp75_AST_in = (AST)_t;
			match(_t,FUNCTIONCALLTYPE);
			_t = _t.getNextSibling();
			break;
		}
		case GETATTRCALLTYPE:
		{
			AST tmp76_AST_in = (AST)_t;
			match(_t,GETATTRCALLTYPE);
			_t = _t.getNextSibling();
			break;
		}
		case PROCEDURECALLTYPE:
		{
			AST tmp77_AST_in = (AST)_t;
			match(_t,PROCEDURECALLTYPE);
			_t = _t.getNextSibling();
			break;
		}
		case SETATTRCALLTYPE:
		{
			AST tmp78_AST_in = (AST)_t;
			match(_t,SETATTRCALLTYPE);
			_t = _t.getNextSibling();
			break;
		}
		case HOSTBYTEORDER:
		{
			AST tmp79_AST_in = (AST)_t;
			match(_t,HOSTBYTEORDER);
			_t = _t.getNextSibling();
			break;
		}
		case LITTLEENDIAN:
		{
			AST tmp80_AST_in = (AST)_t;
			match(_t,LITTLEENDIAN);
			_t = _t.getNextSibling();
			break;
		}
		case READAVAILABLE:
		{
			AST tmp81_AST_in = (AST)_t;
			match(_t,READAVAILABLE);
			_t = _t.getNextSibling();
			break;
		}
		case READEXACTNUM:
		{
			AST tmp82_AST_in = (AST)_t;
			match(_t,READEXACTNUM);
			_t = _t.getNextSibling();
			break;
		}
		case ROWUNMODIFIED:
		{
			AST tmp83_AST_in = (AST)_t;
			match(_t,ROWUNMODIFIED);
			_t = _t.getNextSibling();
			break;
		}
		case ROWDELETED:
		{
			AST tmp84_AST_in = (AST)_t;
			match(_t,ROWDELETED);
			_t = _t.getNextSibling();
			break;
		}
		case ROWMODIFIED:
		{
			AST tmp85_AST_in = (AST)_t;
			match(_t,ROWMODIFIED);
			_t = _t.getNextSibling();
			break;
		}
		case ROWCREATED:
		{
			AST tmp86_AST_in = (AST)_t;
			match(_t,ROWCREATED);
			_t = _t.getNextSibling();
			break;
		}
		case SAXCOMPLETE:
		{
			AST tmp87_AST_in = (AST)_t;
			match(_t,SAXCOMPLETE);
			_t = _t.getNextSibling();
			break;
		}
		case SAXPARSERERROR:
		{
			AST tmp88_AST_in = (AST)_t;
			match(_t,SAXPARSERERROR);
			_t = _t.getNextSibling();
			break;
		}
		case SAXRUNNING:
		{
			AST tmp89_AST_in = (AST)_t;
			match(_t,SAXRUNNING);
			_t = _t.getNextSibling();
			break;
		}
		case SAXUNINITIALIZED:
		{
			AST tmp90_AST_in = (AST)_t;
			match(_t,SAXUNINITIALIZED);
			_t = _t.getNextSibling();
			break;
		}
		case SEARCHSELF:
		{
			AST tmp91_AST_in = (AST)_t;
			match(_t,SEARCHSELF);
			_t = _t.getNextSibling();
			break;
		}
		case SEARCHTARGET:
		{
			AST tmp92_AST_in = (AST)_t;
			match(_t,SEARCHTARGET);
			_t = _t.getNextSibling();
			break;
		}
		case WINDOWDELAYEDMINIMIZE:
		{
			AST tmp93_AST_in = (AST)_t;
			match(_t,WINDOWDELAYEDMINIMIZE);
			_t = _t.getNextSibling();
			break;
		}
		case WINDOWMINIMIZED:
		{
			AST tmp94_AST_in = (AST)_t;
			match(_t,WINDOWMINIMIZED);
			_t = _t.getNextSibling();
			break;
		}
		case WINDOWNORMAL:
		{
			AST tmp95_AST_in = (AST)_t;
			match(_t,WINDOWNORMAL);
			_t = _t.getNextSibling();
			break;
		}
		case WINDOWMAXIMIZED:
		{
			AST tmp96_AST_in = (AST)_t;
			match(_t,WINDOWMAXIMIZED);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void querytuningphrase(AST _t) throws RecognitionException {
		
		AST querytuningphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1891 = _t;
		AST tmp97_AST_in = (AST)_t;
		match(_t,QUERYTUNING);
		_t = _t.getFirstChild();
		AST tmp98_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		{
		_loop1898:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case ARRAYMESSAGE:
			{
				AST tmp99_AST_in = (AST)_t;
				match(_t,ARRAYMESSAGE);
				_t = _t.getNextSibling();
				break;
			}
			case NOARRAYMESSAGE:
			{
				AST tmp100_AST_in = (AST)_t;
				match(_t,NOARRAYMESSAGE);
				_t = _t.getNextSibling();
				break;
			}
			case BINDWHERE:
			{
				AST tmp101_AST_in = (AST)_t;
				match(_t,BINDWHERE);
				_t = _t.getNextSibling();
				break;
			}
			case NOBINDWHERE:
			{
				AST tmp102_AST_in = (AST)_t;
				match(_t,NOBINDWHERE);
				_t = _t.getNextSibling();
				break;
			}
			case CACHESIZE:
			{
				AST __t1893 = _t;
				AST tmp103_AST_in = (AST)_t;
				match(_t,CACHESIZE);
				_t = _t.getFirstChild();
				AST tmp104_AST_in = (AST)_t;
				match(_t,NUMBER);
				_t = _t.getNextSibling();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case ROW:
				{
					AST tmp105_AST_in = (AST)_t;
					match(_t,ROW);
					_t = _t.getNextSibling();
					break;
				}
				case BYTE:
				{
					AST tmp106_AST_in = (AST)_t;
					match(_t,BYTE);
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t1893;
				_t = _t.getNextSibling();
				break;
			}
			case DEBUG:
			{
				AST __t1895 = _t;
				AST tmp107_AST_in = (AST)_t;
				match(_t,DEBUG);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case SQL:
				{
					AST tmp108_AST_in = (AST)_t;
					match(_t,SQL);
					_t = _t.getNextSibling();
					break;
				}
				case EXTENDED:
				{
					AST tmp109_AST_in = (AST)_t;
					match(_t,EXTENDED);
					_t = _t.getNextSibling();
					break;
				}
				case CURSOR:
				{
					AST tmp110_AST_in = (AST)_t;
					match(_t,CURSOR);
					_t = _t.getNextSibling();
					break;
				}
				case DATABIND:
				{
					AST tmp111_AST_in = (AST)_t;
					match(_t,DATABIND);
					_t = _t.getNextSibling();
					break;
				}
				case PERFORMANCE:
				{
					AST tmp112_AST_in = (AST)_t;
					match(_t,PERFORMANCE);
					_t = _t.getNextSibling();
					break;
				}
				case VERBOSE:
				{
					AST tmp113_AST_in = (AST)_t;
					match(_t,VERBOSE);
					_t = _t.getNextSibling();
					break;
				}
				case SUMMARY:
				{
					AST tmp114_AST_in = (AST)_t;
					match(_t,SUMMARY);
					_t = _t.getNextSibling();
					break;
				}
				case NUMBER:
				{
					AST tmp115_AST_in = (AST)_t;
					match(_t,NUMBER);
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t1895;
				_t = _t.getNextSibling();
				break;
			}
			case NODEBUG:
			{
				AST tmp116_AST_in = (AST)_t;
				match(_t,NODEBUG);
				_t = _t.getNextSibling();
				break;
			}
			case DEFERLOBFETCH:
			{
				AST tmp117_AST_in = (AST)_t;
				match(_t,DEFERLOBFETCH);
				_t = _t.getNextSibling();
				break;
			}
			case HINT:
			{
				AST __t1897 = _t;
				AST tmp118_AST_in = (AST)_t;
				match(_t,HINT);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1897;
				_t = _t.getNextSibling();
				break;
			}
			case INDEXHINT:
			{
				AST tmp119_AST_in = (AST)_t;
				match(_t,INDEXHINT);
				_t = _t.getNextSibling();
				break;
			}
			case NOINDEXHINT:
			{
				AST tmp120_AST_in = (AST)_t;
				match(_t,NOINDEXHINT);
				_t = _t.getNextSibling();
				break;
			}
			case JOINBYSQLDB:
			{
				AST tmp121_AST_in = (AST)_t;
				match(_t,JOINBYSQLDB);
				_t = _t.getNextSibling();
				break;
			}
			case NOJOINBYSQLDB:
			{
				AST tmp122_AST_in = (AST)_t;
				match(_t,NOJOINBYSQLDB);
				_t = _t.getNextSibling();
				break;
			}
			case LOOKAHEAD:
			{
				AST tmp123_AST_in = (AST)_t;
				match(_t,LOOKAHEAD);
				_t = _t.getNextSibling();
				break;
			}
			case NOLOOKAHEAD:
			{
				AST tmp124_AST_in = (AST)_t;
				match(_t,NOLOOKAHEAD);
				_t = _t.getNextSibling();
				break;
			}
			case ORDEREDJOIN:
			{
				AST tmp125_AST_in = (AST)_t;
				match(_t,ORDEREDJOIN);
				_t = _t.getNextSibling();
				break;
			}
			case REVERSEFROM:
			{
				AST tmp126_AST_in = (AST)_t;
				match(_t,REVERSEFROM);
				_t = _t.getNextSibling();
				break;
			}
			case SEPARATECONNECTION:
			{
				AST tmp127_AST_in = (AST)_t;
				match(_t,SEPARATECONNECTION);
				_t = _t.getNextSibling();
				break;
			}
			case NOSEPARATECONNECTION:
			{
				AST tmp128_AST_in = (AST)_t;
				match(_t,NOSEPARATECONNECTION);
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				break _loop1898;
			}
			}
		} while (true);
		}
		AST tmp129_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_t = __t1891;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void on___phrase(AST _t) throws RecognitionException {
		
		AST on___phrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1688 = _t;
		AST tmp130_AST_in = (AST)_t;
		match(_t,ON);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case ENDKEY:
		{
			AST tmp131_AST_in = (AST)_t;
			match(_t,ENDKEY);
			_t = _t.getNextSibling();
			break;
		}
		case ERROR:
		{
			AST tmp132_AST_in = (AST)_t;
			match(_t,ERROR);
			_t = _t.getNextSibling();
			break;
		}
		case STOP:
		{
			AST tmp133_AST_in = (AST)_t;
			match(_t,STOP);
			_t = _t.getNextSibling();
			break;
		}
		case QUIT:
		{
			AST tmp134_AST_in = (AST)_t;
			match(_t,QUIT);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case UNDO:
		{
			AST __t1691 = _t;
			AST tmp135_AST_in = (AST)_t;
			match(_t,UNDO);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case BLOCK_LABEL:
			{
				AST tmp136_AST_in = (AST)_t;
				match(_t,BLOCK_LABEL);
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t1691;
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		case COMMA:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case COMMA:
		{
			AST tmp137_AST_in = (AST)_t;
			match(_t,COMMA);
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case LEAVE:
			{
				AST __t1695 = _t;
				AST tmp138_AST_in = (AST)_t;
				match(_t,LEAVE);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case BLOCK_LABEL:
				{
					AST tmp139_AST_in = (AST)_t;
					match(_t,BLOCK_LABEL);
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t1695;
				_t = _t.getNextSibling();
				break;
			}
			case NEXT:
			{
				AST __t1697 = _t;
				AST tmp140_AST_in = (AST)_t;
				match(_t,NEXT);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case BLOCK_LABEL:
				{
					AST tmp141_AST_in = (AST)_t;
					match(_t,BLOCK_LABEL);
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t1697;
				_t = _t.getNextSibling();
				break;
			}
			case RETRY:
			{
				AST __t1699 = _t;
				AST tmp142_AST_in = (AST)_t;
				match(_t,RETRY);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case BLOCK_LABEL:
				{
					AST tmp143_AST_in = (AST)_t;
					match(_t,BLOCK_LABEL);
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t1699;
				_t = _t.getNextSibling();
				break;
			}
			case RETURN:
			{
				AST __t1701 = _t;
				AST tmp144_AST_in = (AST)_t;
				match(_t,RETURN);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				if ((_tokenSet_3.member(_t.getType()))) {
					return_options(_t);
					_t = _retTree;
				}
				else if ((_t.getType()==3)) {
				}
				else {
					throw new NoViableAltException(_t);
				}
				
				}
				_t = __t1701;
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t1688;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void framephrase(AST _t) throws RecognitionException {
		
		AST framephrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1264 = _t;
		AST tmp145_AST_in = (AST)_t;
		match(_t,WITH);
		_t = _t.getFirstChild();
		{
		_loop1294:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case ACCUM:
			{
				AST __t1266 = _t;
				AST tmp146_AST_in = (AST)_t;
				match(_t,ACCUM);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				if ((_tokenSet_4.member(_t.getType()))) {
					expression(_t);
					_t = _retTree;
				}
				else if ((_t.getType()==3)) {
				}
				else {
					throw new NoViableAltException(_t);
				}
				
				}
				_t = __t1266;
				_t = _t.getNextSibling();
				break;
			}
			case ATTRSPACE:
			{
				AST tmp147_AST_in = (AST)_t;
				match(_t,ATTRSPACE);
				_t = _t.getNextSibling();
				break;
			}
			case NOATTRSPACE:
			{
				AST tmp148_AST_in = (AST)_t;
				match(_t,NOATTRSPACE);
				_t = _t.getNextSibling();
				break;
			}
			case CANCELBUTTON:
			{
				AST __t1268 = _t;
				AST tmp149_AST_in = (AST)_t;
				match(_t,CANCELBUTTON);
				_t = _t.getFirstChild();
				field(_t);
				_t = _retTree;
				_t = __t1268;
				_t = _t.getNextSibling();
				break;
			}
			case CENTERED:
			{
				AST tmp150_AST_in = (AST)_t;
				match(_t,CENTERED);
				_t = _t.getNextSibling();
				break;
			}
			case COLUMN:
			{
				AST __t1269 = _t;
				AST tmp151_AST_in = (AST)_t;
				match(_t,COLUMN);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1269;
				_t = _t.getNextSibling();
				break;
			}
			case CONTEXTHELP:
			{
				AST tmp152_AST_in = (AST)_t;
				match(_t,CONTEXTHELP);
				_t = _t.getNextSibling();
				break;
			}
			case CONTEXTHELPFILE:
			{
				AST tmp153_AST_in = (AST)_t;
				match(_t,CONTEXTHELPFILE);
				_t = _t.getNextSibling();
				expression(_t);
				_t = _retTree;
				break;
			}
			case DEFAULTBUTTON:
			{
				AST __t1270 = _t;
				AST tmp154_AST_in = (AST)_t;
				match(_t,DEFAULTBUTTON);
				_t = _t.getFirstChild();
				field(_t);
				_t = _retTree;
				_t = __t1270;
				_t = _t.getNextSibling();
				break;
			}
			case EXPORT:
			{
				AST tmp155_AST_in = (AST)_t;
				match(_t,EXPORT);
				_t = _t.getNextSibling();
				break;
			}
			case FITLASTCOLUMN:
			{
				AST tmp156_AST_in = (AST)_t;
				match(_t,FITLASTCOLUMN);
				_t = _t.getNextSibling();
				break;
			}
			case FONT:
			{
				AST __t1271 = _t;
				AST tmp157_AST_in = (AST)_t;
				match(_t,FONT);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1271;
				_t = _t.getNextSibling();
				break;
			}
			case FONTBASEDLAYOUT:
			{
				AST tmp158_AST_in = (AST)_t;
				match(_t,FONTBASEDLAYOUT);
				_t = _t.getNextSibling();
				break;
			}
			case FRAME:
			{
				AST __t1272 = _t;
				AST tmp159_AST_in = (AST)_t;
				match(_t,FRAME);
				_t = _t.getFirstChild();
				AST tmp160_AST_in = (AST)_t;
				match(_t,ID);
				_t = _t.getNextSibling();
				_t = __t1272;
				_t = _t.getNextSibling();
				break;
			}
			case LABELFONT:
			{
				AST __t1273 = _t;
				AST tmp161_AST_in = (AST)_t;
				match(_t,LABELFONT);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1273;
				_t = _t.getNextSibling();
				break;
			}
			case LABELDCOLOR:
			{
				AST __t1274 = _t;
				AST tmp162_AST_in = (AST)_t;
				match(_t,LABELDCOLOR);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1274;
				_t = _t.getNextSibling();
				break;
			}
			case LABELFGCOLOR:
			{
				AST __t1275 = _t;
				AST tmp163_AST_in = (AST)_t;
				match(_t,LABELFGCOLOR);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1275;
				_t = _t.getNextSibling();
				break;
			}
			case LABELBGCOLOR:
			{
				AST __t1276 = _t;
				AST tmp164_AST_in = (AST)_t;
				match(_t,LABELBGCOLOR);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1276;
				_t = _t.getNextSibling();
				break;
			}
			case MULTIPLE:
			{
				AST tmp165_AST_in = (AST)_t;
				match(_t,MULTIPLE);
				_t = _t.getNextSibling();
				break;
			}
			case SINGLE:
			{
				AST tmp166_AST_in = (AST)_t;
				match(_t,SINGLE);
				_t = _t.getNextSibling();
				break;
			}
			case SEPARATORS:
			{
				AST tmp167_AST_in = (AST)_t;
				match(_t,SEPARATORS);
				_t = _t.getNextSibling();
				break;
			}
			case NOSEPARATORS:
			{
				AST tmp168_AST_in = (AST)_t;
				match(_t,NOSEPARATORS);
				_t = _t.getNextSibling();
				break;
			}
			case NOASSIGN:
			{
				AST tmp169_AST_in = (AST)_t;
				match(_t,NOASSIGN);
				_t = _t.getNextSibling();
				break;
			}
			case NOROWMARKERS:
			{
				AST tmp170_AST_in = (AST)_t;
				match(_t,NOROWMARKERS);
				_t = _t.getNextSibling();
				break;
			}
			case NOSCROLLBARVERTICAL:
			{
				AST tmp171_AST_in = (AST)_t;
				match(_t,NOSCROLLBARVERTICAL);
				_t = _t.getNextSibling();
				break;
			}
			case SCROLLBARVERTICAL:
			{
				AST tmp172_AST_in = (AST)_t;
				match(_t,SCROLLBARVERTICAL);
				_t = _t.getNextSibling();
				break;
			}
			case ROWHEIGHTCHARS:
			{
				AST __t1277 = _t;
				AST tmp173_AST_in = (AST)_t;
				match(_t,ROWHEIGHTCHARS);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1277;
				_t = _t.getNextSibling();
				break;
			}
			case ROWHEIGHTPIXELS:
			{
				AST __t1278 = _t;
				AST tmp174_AST_in = (AST)_t;
				match(_t,ROWHEIGHTPIXELS);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1278;
				_t = _t.getNextSibling();
				break;
			}
			case EXPANDABLE:
			{
				AST tmp175_AST_in = (AST)_t;
				match(_t,EXPANDABLE);
				_t = _t.getNextSibling();
				break;
			}
			case DROPTARGET:
			{
				AST tmp176_AST_in = (AST)_t;
				match(_t,DROPTARGET);
				_t = _t.getNextSibling();
				break;
			}
			case NOAUTOVALIDATE:
			{
				AST tmp177_AST_in = (AST)_t;
				match(_t,NOAUTOVALIDATE);
				_t = _t.getNextSibling();
				break;
			}
			case NOCOLUMNSCROLLING:
			{
				AST tmp178_AST_in = (AST)_t;
				match(_t,NOCOLUMNSCROLLING);
				_t = _t.getNextSibling();
				break;
			}
			case KEEPTABORDER:
			{
				AST tmp179_AST_in = (AST)_t;
				match(_t,KEEPTABORDER);
				_t = _t.getNextSibling();
				break;
			}
			case NOBOX:
			{
				AST tmp180_AST_in = (AST)_t;
				match(_t,NOBOX);
				_t = _t.getNextSibling();
				break;
			}
			case NOEMPTYSPACE:
			{
				AST tmp181_AST_in = (AST)_t;
				match(_t,NOEMPTYSPACE);
				_t = _t.getNextSibling();
				break;
			}
			case NOHIDE:
			{
				AST tmp182_AST_in = (AST)_t;
				match(_t,NOHIDE);
				_t = _t.getNextSibling();
				break;
			}
			case NOLABELS:
			{
				AST tmp183_AST_in = (AST)_t;
				match(_t,NOLABELS);
				_t = _t.getNextSibling();
				break;
			}
			case USEDICTEXPS:
			{
				AST tmp184_AST_in = (AST)_t;
				match(_t,USEDICTEXPS);
				_t = _t.getNextSibling();
				break;
			}
			case NOVALIDATE:
			{
				AST tmp185_AST_in = (AST)_t;
				match(_t,NOVALIDATE);
				_t = _t.getNextSibling();
				break;
			}
			case NOHELP:
			{
				AST tmp186_AST_in = (AST)_t;
				match(_t,NOHELP);
				_t = _t.getNextSibling();
				break;
			}
			case NOUNDERLINE:
			{
				AST tmp187_AST_in = (AST)_t;
				match(_t,NOUNDERLINE);
				_t = _t.getNextSibling();
				break;
			}
			case OVERLAY:
			{
				AST tmp188_AST_in = (AST)_t;
				match(_t,OVERLAY);
				_t = _t.getNextSibling();
				break;
			}
			case PAGEBOTTOM:
			{
				AST tmp189_AST_in = (AST)_t;
				match(_t,PAGEBOTTOM);
				_t = _t.getNextSibling();
				break;
			}
			case PAGETOP:
			{
				AST tmp190_AST_in = (AST)_t;
				match(_t,PAGETOP);
				_t = _t.getNextSibling();
				break;
			}
			case NOTABSTOP:
			{
				AST tmp191_AST_in = (AST)_t;
				match(_t,NOTABSTOP);
				_t = _t.getNextSibling();
				break;
			}
			case RETAIN:
			{
				AST __t1279 = _t;
				AST tmp192_AST_in = (AST)_t;
				match(_t,RETAIN);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1279;
				_t = _t.getNextSibling();
				break;
			}
			case ROW:
			{
				AST __t1280 = _t;
				AST tmp193_AST_in = (AST)_t;
				match(_t,ROW);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1280;
				_t = _t.getNextSibling();
				break;
			}
			case SCREENIO:
			{
				AST tmp194_AST_in = (AST)_t;
				match(_t,SCREENIO);
				_t = _t.getNextSibling();
				break;
			}
			case STREAMIO:
			{
				AST tmp195_AST_in = (AST)_t;
				match(_t,STREAMIO);
				_t = _t.getNextSibling();
				break;
			}
			case SCROLL:
			{
				AST __t1281 = _t;
				AST tmp196_AST_in = (AST)_t;
				match(_t,SCROLL);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1281;
				_t = _t.getNextSibling();
				break;
			}
			case SCROLLABLE:
			{
				AST tmp197_AST_in = (AST)_t;
				match(_t,SCROLLABLE);
				_t = _t.getNextSibling();
				break;
			}
			case SIDELABELS:
			{
				AST tmp198_AST_in = (AST)_t;
				match(_t,SIDELABELS);
				_t = _t.getNextSibling();
				break;
			}
			case STREAM:
			{
				stream_name(_t);
				_t = _retTree;
				break;
			}
			case THREED:
			{
				AST tmp199_AST_in = (AST)_t;
				match(_t,THREED);
				_t = _t.getNextSibling();
				break;
			}
			case TOOLTIP:
			{
				tooltip_expr(_t);
				_t = _retTree;
				break;
			}
			case TOPONLY:
			{
				AST tmp200_AST_in = (AST)_t;
				match(_t,TOPONLY);
				_t = _t.getNextSibling();
				break;
			}
			case USETEXT:
			{
				AST tmp201_AST_in = (AST)_t;
				match(_t,USETEXT);
				_t = _t.getNextSibling();
				break;
			}
			case V6FRAME:
			{
				AST tmp202_AST_in = (AST)_t;
				match(_t,V6FRAME);
				_t = _t.getNextSibling();
				break;
			}
			case USEREVVIDEO:
			{
				AST tmp203_AST_in = (AST)_t;
				match(_t,USEREVVIDEO);
				_t = _t.getNextSibling();
				break;
			}
			case USEUNDERLINE:
			{
				AST tmp204_AST_in = (AST)_t;
				match(_t,USEUNDERLINE);
				_t = _t.getNextSibling();
				break;
			}
			case VIEWAS:
			{
				AST __t1282 = _t;
				AST tmp205_AST_in = (AST)_t;
				match(_t,VIEWAS);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case DIALOGBOX:
				{
					AST __t1284 = _t;
					AST tmp206_AST_in = (AST)_t;
					match(_t,DIALOGBOX);
					_t = _t.getFirstChild();
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case DIALOGHELP:
					{
						AST tmp207_AST_in = (AST)_t;
						match(_t,DIALOGHELP);
						_t = _t.getNextSibling();
						{
						if (_t==null) _t=ASTNULL;
						if ((_tokenSet_4.member(_t.getType()))) {
							expression(_t);
							_t = _retTree;
						}
						else if ((_t.getType()==3)) {
						}
						else {
							throw new NoViableAltException(_t);
						}
						
						}
						break;
					}
					case 3:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
					_t = __t1284;
					_t = _t.getNextSibling();
					break;
				}
				case MESSAGELINE:
				{
					AST tmp208_AST_in = (AST)_t;
					match(_t,MESSAGELINE);
					_t = _t.getNextSibling();
					break;
				}
				case STATUSBAR:
				{
					AST tmp209_AST_in = (AST)_t;
					match(_t,STATUSBAR);
					_t = _t.getNextSibling();
					break;
				}
				case TOOLBAR:
				{
					AST __t1287 = _t;
					AST tmp210_AST_in = (AST)_t;
					match(_t,TOOLBAR);
					_t = _t.getFirstChild();
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case ATTACHMENT:
					{
						AST tmp211_AST_in = (AST)_t;
						match(_t,ATTACHMENT);
						_t = _t.getNextSibling();
						{
						if (_t==null) _t=ASTNULL;
						switch ( _t.getType()) {
						case TOP:
						{
							AST tmp212_AST_in = (AST)_t;
							match(_t,TOP);
							_t = _t.getNextSibling();
							break;
						}
						case BOTTOM:
						{
							AST tmp213_AST_in = (AST)_t;
							match(_t,BOTTOM);
							_t = _t.getNextSibling();
							break;
						}
						case LEFT:
						{
							AST tmp214_AST_in = (AST)_t;
							match(_t,LEFT);
							_t = _t.getNextSibling();
							break;
						}
						case RIGHT:
						{
							AST tmp215_AST_in = (AST)_t;
							match(_t,RIGHT);
							_t = _t.getNextSibling();
							break;
						}
						default:
						{
							throw new NoViableAltException(_t);
						}
						}
						}
						break;
					}
					case 3:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
					_t = __t1287;
					_t = _t.getNextSibling();
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t1282;
				_t = _t.getNextSibling();
				break;
			}
			case WIDTH:
			{
				AST __t1290 = _t;
				AST tmp216_AST_in = (AST)_t;
				match(_t,WIDTH);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1290;
				_t = _t.getNextSibling();
				break;
			}
			case IN_KW:
			{
				AST __t1291 = _t;
				AST tmp217_AST_in = (AST)_t;
				match(_t,IN_KW);
				_t = _t.getFirstChild();
				AST tmp218_AST_in = (AST)_t;
				match(_t,WINDOW);
				_t = _t.getNextSibling();
				expression(_t);
				_t = _retTree;
				_t = __t1291;
				_t = _t.getNextSibling();
				break;
			}
			case BGCOLOR:
			case COLOR:
			case DCOLOR:
			case FGCOLOR:
			case PFCOLOR:
			{
				colorspecification(_t);
				_t = _retTree;
				break;
			}
			case AT:
			{
				atphrase(_t);
				_t = _retTree;
				break;
			}
			case SIZE:
			case SIZECHARS:
			case SIZEPIXELS:
			{
				sizephrase(_t);
				_t = _retTree;
				break;
			}
			case TITLE:
			{
				titlephrase(_t);
				_t = _retTree;
				break;
			}
			case With_columns:
			{
				AST __t1292 = _t;
				AST tmp219_AST_in = (AST)_t;
				match(_t,With_columns);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				AST tmp220_AST_in = (AST)_t;
				match(_t,COLUMNS);
				_t = _t.getNextSibling();
				_t = __t1292;
				_t = _t.getNextSibling();
				break;
			}
			case With_down:
			{
				AST __t1293 = _t;
				AST tmp221_AST_in = (AST)_t;
				match(_t,With_down);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				AST tmp222_AST_in = (AST)_t;
				match(_t,DOWN);
				_t = _t.getNextSibling();
				_t = __t1293;
				_t = _t.getNextSibling();
				break;
			}
			case DOWN:
			{
				AST tmp223_AST_in = (AST)_t;
				match(_t,DOWN);
				_t = _t.getNextSibling();
				break;
			}
			case WITH:
			{
				AST tmp224_AST_in = (AST)_t;
				match(_t,WITH);
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				break _loop1294;
			}
			}
		} while (true);
		}
		_t = __t1264;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void collatephrase(AST _t) throws RecognitionException {
		
		AST collatephrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t380 = _t;
		AST tmp225_AST_in = (AST)_t;
		match(_t,COLLATE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case DESCENDING:
		{
			AST tmp226_AST_in = (AST)_t;
			match(_t,DESCENDING);
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t380;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void block_preselect(AST _t) throws RecognitionException {
		
		AST block_preselect_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t34 = _t;
		AST tmp227_AST_in = (AST)_t;
		match(_t,PRESELECT);
		_t = _t.getFirstChild();
		for_record_spec(_t);
		_t = _retTree;
		_t = __t34;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void for_record_spec(AST _t) throws RecognitionException {
		
		AST for_record_spec_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case CURRENT:
		case EACH:
		case FIRST:
		case LAST:
		case NEXT:
		case PREV:
		{
			findwhich(_t);
			_t = _retTree;
			break;
		}
		case RECORD_NAME:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		recordphrase(_t);
		_t = _retTree;
		{
		_loop1221:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==COMMA)) {
				AST tmp228_AST_in = (AST)_t;
				match(_t,COMMA);
				_t = _t.getNextSibling();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case CURRENT:
				case EACH:
				case FIRST:
				case LAST:
				case NEXT:
				case PREV:
				{
					findwhich(_t);
					_t = _retTree;
					break;
				}
				case RECORD_NAME:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				recordphrase(_t);
				_t = _retTree;
			}
			else {
				break _loop1221;
			}
			
		} while (true);
		}
		_retTree = _t;
	}
	
	public final void pseudfn(AST _t) throws RecognitionException {
		
		AST pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case AAMSG:
		{
			AST tmp229_AST_in = (AST)_t;
			match(_t,AAMSG);
			_t = _t.getNextSibling();
			break;
		}
		case CURRENTVALUE:
		{
			currentvaluefunc(_t);
			_t = _retTree;
			break;
		}
		case CURRENTWINDOW:
		{
			AST tmp230_AST_in = (AST)_t;
			match(_t,CURRENTWINDOW);
			_t = _t.getNextSibling();
			break;
		}
		case DYNAMICCURRENTVALUE:
		{
			dynamiccurrentvaluefunc(_t);
			_t = _retTree;
			break;
		}
		case ENTRY:
		{
			entryfunc(_t);
			_t = _retTree;
			break;
		}
		case FIXCODEPAGE:
		{
			fixcodepage_pseudfn(_t);
			_t = _retTree;
			break;
		}
		case LENGTH:
		{
			lengthfunc(_t);
			_t = _retTree;
			break;
		}
		case NEXTVALUE:
		{
			nextvaluefunc(_t);
			_t = _retTree;
			break;
		}
		case OVERLAY:
		{
			overlay_pseudfn(_t);
			_t = _retTree;
			break;
		}
		case PUTBITS:
		{
			putbits_pseudfn(_t);
			_t = _retTree;
			break;
		}
		case PUTBYTE:
		{
			putbyte_pseudfn(_t);
			_t = _retTree;
			break;
		}
		case PUTBYTES:
		{
			putbytes_pseudfn(_t);
			_t = _retTree;
			break;
		}
		case PUTDOUBLE:
		{
			putdouble_pseudfn(_t);
			_t = _retTree;
			break;
		}
		case PUTFLOAT:
		{
			putfloat_pseudfn(_t);
			_t = _retTree;
			break;
		}
		case PUTLONG:
		{
			putlong_pseudfn(_t);
			_t = _retTree;
			break;
		}
		case PUTSHORT:
		{
			putshort_pseudfn(_t);
			_t = _retTree;
			break;
		}
		case PUTSTRING:
		{
			putstring_pseudfn(_t);
			_t = _retTree;
			break;
		}
		case PUTUNSIGNEDSHORT:
		{
			putunsignedshort_pseudfn(_t);
			_t = _retTree;
			break;
		}
		case RAW:
		{
			rawfunc(_t);
			_t = _retTree;
			break;
		}
		case SETBYTEORDER:
		{
			setbyteorder_pseudfn(_t);
			_t = _retTree;
			break;
		}
		case SETPOINTERVALUE:
		{
			setpointervalue_pseudfn(_t);
			_t = _retTree;
			break;
		}
		case SETSIZE:
		{
			setsize_pseudfn(_t);
			_t = _retTree;
			break;
		}
		case SUBSTRING:
		{
			substringfunc(_t);
			_t = _retTree;
			break;
		}
		case Widget_ref:
		{
			widattr(_t);
			_t = _retTree;
			break;
		}
		case PAGESIZE_KW:
		{
			AST tmp231_AST_in = (AST)_t;
			match(_t,PAGESIZE_KW);
			_t = _t.getNextSibling();
			break;
		}
		case LINECOUNTER:
		{
			AST tmp232_AST_in = (AST)_t;
			match(_t,LINECOUNTER);
			_t = _t.getNextSibling();
			break;
		}
		case PAGENUMBER:
		{
			AST tmp233_AST_in = (AST)_t;
			match(_t,PAGENUMBER);
			_t = _t.getNextSibling();
			break;
		}
		case FRAMECOL:
		{
			AST tmp234_AST_in = (AST)_t;
			match(_t,FRAMECOL);
			_t = _t.getNextSibling();
			break;
		}
		case FRAMEDOWN:
		{
			AST tmp235_AST_in = (AST)_t;
			match(_t,FRAMEDOWN);
			_t = _t.getNextSibling();
			break;
		}
		case FRAMELINE:
		{
			AST tmp236_AST_in = (AST)_t;
			match(_t,FRAMELINE);
			_t = _t.getNextSibling();
			break;
		}
		case FRAMEROW:
		{
			AST tmp237_AST_in = (AST)_t;
			match(_t,FRAMEROW);
			_t = _t.getNextSibling();
			break;
		}
		case USERID:
		{
			AST tmp238_AST_in = (AST)_t;
			match(_t,USERID);
			_t = _t.getNextSibling();
			break;
		}
		case ETIME_KW:
		{
			AST tmp239_AST_in = (AST)_t;
			match(_t,ETIME_KW);
			_t = _t.getNextSibling();
			break;
		}
		case DBNAME:
		{
			AST tmp240_AST_in = (AST)_t;
			match(_t,DBNAME);
			_t = _t.getNextSibling();
			break;
		}
		case TIME:
		{
			AST tmp241_AST_in = (AST)_t;
			match(_t,TIME);
			_t = _t.getNextSibling();
			break;
		}
		case OPSYS:
		{
			AST tmp242_AST_in = (AST)_t;
			match(_t,OPSYS);
			_t = _t.getNextSibling();
			break;
		}
		case RETRY:
		{
			AST tmp243_AST_in = (AST)_t;
			match(_t,RETRY);
			_t = _t.getNextSibling();
			break;
		}
		case AASERIAL:
		{
			AST tmp244_AST_in = (AST)_t;
			match(_t,AASERIAL);
			_t = _t.getNextSibling();
			break;
		}
		case AACONTROL:
		{
			AST tmp245_AST_in = (AST)_t;
			match(_t,AACONTROL);
			_t = _t.getNextSibling();
			break;
		}
		case MESSAGELINES:
		{
			AST tmp246_AST_in = (AST)_t;
			match(_t,MESSAGELINES);
			_t = _t.getNextSibling();
			break;
		}
		case TERMINAL:
		{
			AST tmp247_AST_in = (AST)_t;
			match(_t,TERMINAL);
			_t = _t.getNextSibling();
			break;
		}
		case PROPATH:
		{
			AST tmp248_AST_in = (AST)_t;
			match(_t,PROPATH);
			_t = _t.getNextSibling();
			break;
		}
		case CURRENTLANGUAGE:
		{
			AST tmp249_AST_in = (AST)_t;
			match(_t,CURRENTLANGUAGE);
			_t = _t.getNextSibling();
			break;
		}
		case PROMSGS:
		{
			AST tmp250_AST_in = (AST)_t;
			match(_t,PROMSGS);
			_t = _t.getNextSibling();
			break;
		}
		case SCREENLINES:
		{
			AST tmp251_AST_in = (AST)_t;
			match(_t,SCREENLINES);
			_t = _t.getNextSibling();
			break;
		}
		case LASTKEY:
		{
			AST tmp252_AST_in = (AST)_t;
			match(_t,LASTKEY);
			_t = _t.getNextSibling();
			break;
		}
		case FRAMEFIELD:
		{
			AST tmp253_AST_in = (AST)_t;
			match(_t,FRAMEFIELD);
			_t = _t.getNextSibling();
			break;
		}
		case FRAMEFILE:
		{
			AST tmp254_AST_in = (AST)_t;
			match(_t,FRAMEFILE);
			_t = _t.getNextSibling();
			break;
		}
		case FRAMEVALUE:
		{
			AST tmp255_AST_in = (AST)_t;
			match(_t,FRAMEVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case GOPENDING:
		{
			AST tmp256_AST_in = (AST)_t;
			match(_t,GOPENDING);
			_t = _t.getNextSibling();
			break;
		}
		case PROGRESS:
		{
			AST tmp257_AST_in = (AST)_t;
			match(_t,PROGRESS);
			_t = _t.getNextSibling();
			break;
		}
		case FRAMEINDEX:
		{
			AST tmp258_AST_in = (AST)_t;
			match(_t,FRAMEINDEX);
			_t = _t.getNextSibling();
			break;
		}
		case FRAMEDB:
		{
			AST tmp259_AST_in = (AST)_t;
			match(_t,FRAMEDB);
			_t = _t.getNextSibling();
			break;
		}
		case FRAMENAME:
		{
			AST tmp260_AST_in = (AST)_t;
			match(_t,FRAMENAME);
			_t = _t.getNextSibling();
			break;
		}
		case DATASERVERS:
		{
			AST tmp261_AST_in = (AST)_t;
			match(_t,DATASERVERS);
			_t = _t.getNextSibling();
			break;
		}
		case NUMDBS:
		{
			AST tmp262_AST_in = (AST)_t;
			match(_t,NUMDBS);
			_t = _t.getNextSibling();
			break;
		}
		case NUMALIASES:
		{
			AST tmp263_AST_in = (AST)_t;
			match(_t,NUMALIASES);
			_t = _t.getNextSibling();
			break;
		}
		case ISATTRSPACE:
		{
			AST tmp264_AST_in = (AST)_t;
			match(_t,ISATTRSPACE);
			_t = _t.getNextSibling();
			break;
		}
		case PROCSTATUS:
		{
			AST tmp265_AST_in = (AST)_t;
			match(_t,PROCSTATUS);
			_t = _t.getNextSibling();
			break;
		}
		case PROCHANDLE:
		{
			AST tmp266_AST_in = (AST)_t;
			match(_t,PROCHANDLE);
			_t = _t.getNextSibling();
			break;
		}
		case CURSOR:
		{
			AST tmp267_AST_in = (AST)_t;
			match(_t,CURSOR);
			_t = _t.getNextSibling();
			break;
		}
		case OSERROR:
		{
			AST tmp268_AST_in = (AST)_t;
			match(_t,OSERROR);
			_t = _t.getNextSibling();
			break;
		}
		case RETURNVALUE:
		{
			AST tmp269_AST_in = (AST)_t;
			match(_t,RETURNVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case OSDRIVES:
		{
			AST tmp270_AST_in = (AST)_t;
			match(_t,OSDRIVES);
			_t = _t.getNextSibling();
			break;
		}
		case PROVERSION:
		{
			AST tmp271_AST_in = (AST)_t;
			match(_t,PROVERSION);
			_t = _t.getNextSibling();
			break;
		}
		case TRANSACTION:
		{
			AST tmp272_AST_in = (AST)_t;
			match(_t,TRANSACTION);
			_t = _t.getNextSibling();
			break;
		}
		case MACHINECLASS:
		{
			AST tmp273_AST_in = (AST)_t;
			match(_t,MACHINECLASS);
			_t = _t.getNextSibling();
			break;
		}
		case AAPCONTROL:
		{
			AST tmp274_AST_in = (AST)_t;
			match(_t,AAPCONTROL);
			_t = _t.getNextSibling();
			break;
		}
		case GETCODEPAGES:
		{
			AST tmp275_AST_in = (AST)_t;
			match(_t,GETCODEPAGES);
			_t = _t.getNextSibling();
			break;
		}
		case COMSELF:
		{
			AST tmp276_AST_in = (AST)_t;
			match(_t,COMSELF);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void currentvaluefunc(AST _t) throws RecognitionException {
		
		AST currentvaluefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t650 = _t;
		AST tmp277_AST_in = (AST)_t;
		match(_t,CURRENTVALUE);
		_t = _t.getFirstChild();
		AST tmp278_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		AST tmp279_AST_in = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case COMMA:
		{
			AST tmp280_AST_in = (AST)_t;
			match(_t,COMMA);
			_t = _t.getNextSibling();
			AST tmp281_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			break;
		}
		case RIGHTPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp282_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_t = __t650;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void dynamiccurrentvaluefunc(AST _t) throws RecognitionException {
		
		AST dynamiccurrentvaluefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1114 = _t;
		AST tmp283_AST_in = (AST)_t;
		match(_t,DYNAMICCURRENTVALUE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1114;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void entryfunc(AST _t) throws RecognitionException {
		
		AST entryfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1160 = _t;
		AST tmp284_AST_in = (AST)_t;
		match(_t,ENTRY);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1160;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void fixcodepage_pseudfn(AST _t) throws RecognitionException {
		
		AST fixcodepage_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1212 = _t;
		AST tmp285_AST_in = (AST)_t;
		match(_t,FIXCODEPAGE);
		_t = _t.getFirstChild();
		AST tmp286_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		AST tmp287_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_t = __t1212;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void lengthfunc(AST _t) throws RecognitionException {
		
		AST lengthfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1545 = _t;
		AST tmp288_AST_in = (AST)_t;
		match(_t,LENGTH);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1545;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void nextvaluefunc(AST _t) throws RecognitionException {
		
		AST nextvaluefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1632 = _t;
		AST tmp289_AST_in = (AST)_t;
		match(_t,NEXTVALUE);
		_t = _t.getFirstChild();
		AST tmp290_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		AST tmp291_AST_in = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		{
		_loop1634:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==COMMA)) {
				AST tmp292_AST_in = (AST)_t;
				match(_t,COMMA);
				_t = _t.getNextSibling();
				AST tmp293_AST_in = (AST)_t;
				match(_t,ID);
				_t = _t.getNextSibling();
			}
			else {
				break _loop1634;
			}
			
		} while (true);
		}
		AST tmp294_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_t = __t1632;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void overlay_pseudfn(AST _t) throws RecognitionException {
		
		AST overlay_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1775 = _t;
		AST tmp295_AST_in = (AST)_t;
		match(_t,OVERLAY);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1775;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void putbits_pseudfn(AST _t) throws RecognitionException {
		
		AST putbits_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1866 = _t;
		AST tmp296_AST_in = (AST)_t;
		match(_t,PUTBITS);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1866;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void putbyte_pseudfn(AST _t) throws RecognitionException {
		
		AST putbyte_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1868 = _t;
		AST tmp297_AST_in = (AST)_t;
		match(_t,PUTBYTE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1868;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void putbytes_pseudfn(AST _t) throws RecognitionException {
		
		AST putbytes_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1870 = _t;
		AST tmp298_AST_in = (AST)_t;
		match(_t,PUTBYTES);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1870;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void putdouble_pseudfn(AST _t) throws RecognitionException {
		
		AST putdouble_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1872 = _t;
		AST tmp299_AST_in = (AST)_t;
		match(_t,PUTDOUBLE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1872;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void putfloat_pseudfn(AST _t) throws RecognitionException {
		
		AST putfloat_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1874 = _t;
		AST tmp300_AST_in = (AST)_t;
		match(_t,PUTFLOAT);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1874;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void putlong_pseudfn(AST _t) throws RecognitionException {
		
		AST putlong_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1883 = _t;
		AST tmp301_AST_in = (AST)_t;
		match(_t,PUTLONG);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1883;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void putshort_pseudfn(AST _t) throws RecognitionException {
		
		AST putshort_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1885 = _t;
		AST tmp302_AST_in = (AST)_t;
		match(_t,PUTSHORT);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1885;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void putstring_pseudfn(AST _t) throws RecognitionException {
		
		AST putstring_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1887 = _t;
		AST tmp303_AST_in = (AST)_t;
		match(_t,PUTSTRING);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1887;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void putunsignedshort_pseudfn(AST _t) throws RecognitionException {
		
		AST putunsignedshort_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1889 = _t;
		AST tmp304_AST_in = (AST)_t;
		match(_t,PUTUNSIGNEDSHORT);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1889;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void rawfunc(AST _t) throws RecognitionException {
		
		AST rawfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1924 = _t;
		AST tmp305_AST_in = (AST)_t;
		match(_t,RAW);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1924;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void setbyteorder_pseudfn(AST _t) throws RecognitionException {
		
		AST setbyteorder_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2093 = _t;
		AST tmp306_AST_in = (AST)_t;
		match(_t,SETBYTEORDER);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t2093;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void setpointervalue_pseudfn(AST _t) throws RecognitionException {
		
		AST setpointervalue_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2111 = _t;
		AST tmp307_AST_in = (AST)_t;
		match(_t,SETPOINTERVALUE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t2111;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void setsize_pseudfn(AST _t) throws RecognitionException {
		
		AST setsize_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2113 = _t;
		AST tmp308_AST_in = (AST)_t;
		match(_t,SETSIZE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t2113;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void substringfunc(AST _t) throws RecognitionException {
		
		AST substringfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2174 = _t;
		AST tmp309_AST_in = (AST)_t;
		match(_t,SUBSTRING);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t2174;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void widattr(AST _t) throws RecognitionException {
		
		AST widattr_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t103 = _t;
		AST tmp310_AST_in = (AST)_t;
		match(_t,Widget_ref);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NORETURNVALUE:
		{
			AST tmp311_AST_in = (AST)_t;
			match(_t,NORETURNVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case AAMEMORY:
		case ACTIVEWINDOW:
		case BROWSE:
		case BUFFER:
		case CLIPBOARD:
		case CODEBASELOCATOR:
		case COLORTABLE:
		case COMPILER:
		case COMSELF:
		case CURRENTWINDOW:
		case DEBUGGER:
		case DEFAULTWINDOW:
		case ERRORSTATUS:
		case FIELD:
		case FILEINFORMATION:
		case FOCUS:
		case FONTTABLE:
		case FRAME:
		case LASTEVENT:
		case MENU:
		case MENUITEM:
		case MOUSE:
		case PROFILER:
		case QUERY:
		case RCODEINFORMATION:
		case SELF:
		case SESSION:
		case SOCKET:
		case SOURCEPROCEDURE:
		case SUBMENU:
		case TARGETPROCEDURE:
		case TEMPTABLE:
		case TEXTCURSOR:
		case THISPROCEDURE:
		case WEBCONTEXT:
		case XDOCUMENT:
		case XNODEREF:
		case Field_ref:
		case DATASOURCE:
		case DATASET:
		case LOGMANAGER:
		case SECURITYPOLICY:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		s_widget(_t);
		_t = _retTree;
		{
		int _cnt108=0;
		_loop108:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==OBJCOLON)) {
				AST tmp312_AST_in = (AST)_t;
				match(_t,OBJCOLON);
				_t = _t.getNextSibling();
				AST tmp313_AST_in = (AST)_t;
				if ( _t==null ) throw new MismatchedTokenException();
				_t = _t.getNextSibling();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case Array_subscript:
				{
					array_subscript(_t);
					_t = _retTree;
					break;
				}
				case 3:
				case OBJCOLON:
				case AS:
				case IN_KW:
				case Method_param_list:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case Method_param_list:
				{
					method_param_list(_t);
					_t = _retTree;
					break;
				}
				case 3:
				case OBJCOLON:
				case AS:
				case IN_KW:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
			}
			else {
				if ( _cnt108>=1 ) { break _loop108; } else {throw new NoViableAltException(_t);}
			}
			
			_cnt108++;
		} while (true);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t110 = _t;
			AST tmp314_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case MENU:
			{
				AST tmp315_AST_in = (AST)_t;
				match(_t,MENU);
				_t = _t.getNextSibling();
				break;
			}
			case FRAME:
			{
				AST tmp316_AST_in = (AST)_t;
				match(_t,FRAME);
				_t = _t.getNextSibling();
				break;
			}
			case BROWSE:
			{
				AST tmp317_AST_in = (AST)_t;
				match(_t,BROWSE);
				_t = _t.getNextSibling();
				break;
			}
			case SUBMENU:
			{
				AST tmp318_AST_in = (AST)_t;
				match(_t,SUBMENU);
				_t = _t.getNextSibling();
				break;
			}
			case BUFFER:
			{
				AST tmp319_AST_in = (AST)_t;
				match(_t,BUFFER);
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp320_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			_t = __t110;
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		case AS:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case AS:
		{
			AST tmp321_AST_in = (AST)_t;
			match(_t,AS);
			_t = _t.getNextSibling();
			AST tmp322_AST_in = (AST)_t;
			if ( _t==null ) throw new MismatchedTokenException();
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t103;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void aatracestatement(AST _t) throws RecognitionException {
		
		AST aatracestatement_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t157 = _t;
		AST tmp323_AST_in = (AST)_t;
		match(_t,AATRACE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case CLOSE:
		case FROM:
		case STREAM:
		case THROUGH:
		case TO:
		{
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case STREAM:
			{
				stream_name(_t);
				_t = _retTree;
				break;
			}
			case CLOSE:
			case FROM:
			case THROUGH:
			case TO:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case FROM:
			case THROUGH:
			case TO:
			{
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case TO:
				{
					AST tmp324_AST_in = (AST)_t;
					match(_t,TO);
					_t = _t.getNextSibling();
					break;
				}
				case FROM:
				{
					AST tmp325_AST_in = (AST)_t;
					match(_t,FROM);
					_t = _t.getNextSibling();
					break;
				}
				case THROUGH:
				{
					AST tmp326_AST_in = (AST)_t;
					match(_t,THROUGH);
					_t = _t.getNextSibling();
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				io_phrase(_t);
				_t = _retTree;
				break;
			}
			case CLOSE:
			{
				AST tmp327_AST_in = (AST)_t;
				match(_t,CLOSE);
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			break;
		}
		case OFF:
		{
			AST tmp328_AST_in = (AST)_t;
			match(_t,OFF);
			_t = _t.getNextSibling();
			break;
		}
		case ON:
		{
			AST __t162 = _t;
			AST tmp329_AST_in = (AST)_t;
			match(_t,ON);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case AALIST:
			{
				AST tmp330_AST_in = (AST)_t;
				match(_t,AALIST);
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t162;
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t157;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void accumulatestate(AST _t) throws RecognitionException {
		
		AST accumulatestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t173 = _t;
		AST tmp331_AST_in = (AST)_t;
		match(_t,ACCUMULATE);
		_t = _t.getFirstChild();
		{
		_loop175:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==Form_item)) {
				display_item(_t);
				_t = _retTree;
			}
			else {
				break _loop175;
			}
			
		} while (true);
		}
		state_end(_t);
		_t = _retTree;
		_t = __t173;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void altertablestate(AST _t) throws RecognitionException {
		
		AST altertablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2403 = _t;
		AST tmp332_AST_in = (AST)_t;
		match(_t,ALTER);
		_t = _t.getFirstChild();
		AST tmp333_AST_in = (AST)_t;
		match(_t,TABLE);
		_t = _t.getNextSibling();
		record_name(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case ADD:
		{
			AST tmp334_AST_in = (AST)_t;
			match(_t,ADD);
			_t = _t.getNextSibling();
			AST tmp335_AST_in = (AST)_t;
			match(_t,COLUMN);
			_t = _t.getNextSibling();
			sql_col_def(_t);
			_t = _retTree;
			break;
		}
		case DROP:
		{
			AST tmp336_AST_in = (AST)_t;
			match(_t,DROP);
			_t = _t.getNextSibling();
			AST tmp337_AST_in = (AST)_t;
			match(_t,COLUMN);
			_t = _t.getNextSibling();
			field(_t);
			_t = _retTree;
			break;
		}
		case ALTER:
		{
			AST tmp338_AST_in = (AST)_t;
			match(_t,ALTER);
			_t = _t.getNextSibling();
			AST tmp339_AST_in = (AST)_t;
			match(_t,COLUMN);
			_t = _t.getNextSibling();
			field(_t);
			_t = _retTree;
			{
			_loop2408:
			do {
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case FORMAT:
				{
					AST __t2406 = _t;
					AST tmp340_AST_in = (AST)_t;
					match(_t,FORMAT);
					_t = _t.getFirstChild();
					expression(_t);
					_t = _retTree;
					_t = __t2406;
					_t = _t.getNextSibling();
					break;
				}
				case COLUMNLABEL:
				case LABEL:
				{
					label_constant(_t);
					_t = _retTree;
					break;
				}
				case DEFAULT:
				{
					AST __t2407 = _t;
					AST tmp341_AST_in = (AST)_t;
					match(_t,DEFAULT);
					_t = _t.getFirstChild();
					expression(_t);
					_t = _retTree;
					_t = __t2407;
					_t = _t.getNextSibling();
					break;
				}
				case CASESENSITIVE:
				case Not_casesens:
				{
					casesens_or_not(_t);
					_t = _retTree;
					break;
				}
				default:
				{
					break _loop2408;
				}
				}
			} while (true);
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2403;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void analyzestate(AST _t) throws RecognitionException {
		
		AST analyzestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t213 = _t;
		AST tmp342_AST_in = (AST)_t;
		match(_t,ANALYZE);
		_t = _t.getFirstChild();
		filenameorvalue(_t);
		_t = _retTree;
		filenameorvalue(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case OUTPUT:
		{
			AST __t215 = _t;
			AST tmp343_AST_in = (AST)_t;
			match(_t,OUTPUT);
			_t = _t.getFirstChild();
			filenameorvalue(_t);
			_t = _retTree;
			_t = __t215;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case ALL:
		case APPEND:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop217:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case APPEND:
			{
				AST tmp344_AST_in = (AST)_t;
				match(_t,APPEND);
				_t = _t.getNextSibling();
				break;
			}
			case ALL:
			{
				AST tmp345_AST_in = (AST)_t;
				match(_t,ALL);
				_t = _t.getNextSibling();
				break;
			}
			case NOERROR_KW:
			{
				AST tmp346_AST_in = (AST)_t;
				match(_t,NOERROR_KW);
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				break _loop217;
			}
			}
		} while (true);
		}
		state_end(_t);
		_t = _retTree;
		_t = __t213;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void applystate(AST _t) throws RecognitionException {
		
		AST applystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t219 = _t;
		AST tmp347_AST_in = (AST)_t;
		match(_t,APPLY);
		_t = _t.getFirstChild();
		expression(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case TO:
		{
			AST __t221 = _t;
			AST tmp348_AST_in = (AST)_t;
			match(_t,TO);
			_t = _t.getFirstChild();
			gwidget(_t);
			_t = _retTree;
			_t = __t221;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t219;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void assignstate(AST _t) throws RecognitionException {
		
		AST assignstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t231 = _t;
		AST tmp349_AST_in = (AST)_t;
		match(_t,ASSIGN);
		_t = _t.getFirstChild();
		assignment_list(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp350_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t231;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void bellstate(AST _t) throws RecognitionException {
		
		AST bellstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t272 = _t;
		AST tmp351_AST_in = (AST)_t;
		match(_t,BELL);
		_t = _t.getFirstChild();
		state_end(_t);
		_t = _retTree;
		_t = __t272;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void buffercomparestate(AST _t) throws RecognitionException {
		
		AST buffercomparestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t274 = _t;
		AST tmp352_AST_in = (AST)_t;
		match(_t,BUFFERCOMPARE);
		_t = _t.getFirstChild();
		record_name(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case EXCEPT:
		{
			AST __t276 = _t;
			AST tmp353_AST_in = (AST)_t;
			match(_t,EXCEPT);
			_t = _t.getFirstChild();
			{
			_loop278:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==Field_ref)) {
					field(_t);
					_t = _retTree;
				}
				else {
					break _loop278;
				}
				
			} while (true);
			}
			_t = __t276;
			_t = _t.getNextSibling();
			break;
		}
		case USING:
		{
			AST __t279 = _t;
			AST tmp354_AST_in = (AST)_t;
			match(_t,USING);
			_t = _t.getFirstChild();
			{
			int _cnt281=0;
			_loop281:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==Field_ref)) {
					field(_t);
					_t = _retTree;
				}
				else {
					if ( _cnt281>=1 ) { break _loop281; } else {throw new NoViableAltException(_t);}
				}
				
				_cnt281++;
			} while (true);
			}
			_t = __t279;
			_t = _t.getNextSibling();
			break;
		}
		case TO:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp355_AST_in = (AST)_t;
		match(_t,TO);
		_t = _t.getNextSibling();
		record_name(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case CASESENSITIVE:
		{
			AST tmp356_AST_in = (AST)_t;
			match(_t,CASESENSITIVE);
			_t = _t.getNextSibling();
			break;
		}
		case BINARY:
		{
			AST tmp357_AST_in = (AST)_t;
			match(_t,BINARY);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case COMPARES:
		case EXPLICIT:
		case NOERROR_KW:
		case SAVE:
		case NOLOBS:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case SAVE:
		{
			AST __t284 = _t;
			AST tmp358_AST_in = (AST)_t;
			match(_t,SAVE);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case RESULT:
			{
				AST __t286 = _t;
				AST tmp359_AST_in = (AST)_t;
				match(_t,RESULT);
				_t = _t.getFirstChild();
				AST tmp360_AST_in = (AST)_t;
				match(_t,IN_KW);
				_t = _t.getNextSibling();
				_t = __t286;
				_t = _t.getNextSibling();
				break;
			}
			case Field_ref:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			field(_t);
			_t = _retTree;
			_t = __t284;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case COMPARES:
		case EXPLICIT:
		case NOERROR_KW:
		case NOLOBS:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case EXPLICIT:
		{
			AST tmp361_AST_in = (AST)_t;
			match(_t,EXPLICIT);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case COMPARES:
		case NOERROR_KW:
		case NOLOBS:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case COMPARES:
		{
			AST tmp362_AST_in = (AST)_t;
			match(_t,COMPARES);
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case NOERROR_KW:
			{
				AST tmp363_AST_in = (AST)_t;
				match(_t,NOERROR_KW);
				_t = _t.getNextSibling();
				break;
			}
			case PERIOD:
			case LEXCOLON:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			block_colon(_t);
			_t = _retTree;
			AST __t290 = _t;
			AST tmp364_AST_in = (AST)_t;
			match(_t,Code_block);
			_t = _t.getFirstChild();
			{
			_loop293:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==WHEN)) {
					AST __t292 = _t;
					AST tmp365_AST_in = (AST)_t;
					match(_t,WHEN);
					_t = _t.getFirstChild();
					expression(_t);
					_t = _retTree;
					AST tmp366_AST_in = (AST)_t;
					match(_t,THEN);
					_t = _t.getNextSibling();
					blockorstate(_t);
					_t = _retTree;
					_t = __t292;
					_t = _t.getNextSibling();
				}
				else {
					break _loop293;
				}
				
			} while (true);
			}
			_t = __t290;
			_t = _t.getNextSibling();
			AST __t294 = _t;
			AST tmp367_AST_in = (AST)_t;
			match(_t,END);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case COMPARES:
			{
				AST tmp368_AST_in = (AST)_t;
				match(_t,COMPARES);
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t294;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		case NOLOBS:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOLOBS:
		{
			AST tmp369_AST_in = (AST)_t;
			match(_t,NOLOBS);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp370_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t274;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void buffercopystate(AST _t) throws RecognitionException {
		
		AST buffercopystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t299 = _t;
		AST tmp371_AST_in = (AST)_t;
		match(_t,BUFFERCOPY);
		_t = _t.getFirstChild();
		record_name(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case EXCEPT:
		{
			AST __t301 = _t;
			AST tmp372_AST_in = (AST)_t;
			match(_t,EXCEPT);
			_t = _t.getFirstChild();
			{
			_loop303:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==Field_ref)) {
					field(_t);
					_t = _retTree;
				}
				else {
					break _loop303;
				}
				
			} while (true);
			}
			_t = __t301;
			_t = _t.getNextSibling();
			break;
		}
		case USING:
		{
			AST __t304 = _t;
			AST tmp373_AST_in = (AST)_t;
			match(_t,USING);
			_t = _t.getFirstChild();
			{
			int _cnt306=0;
			_loop306:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==Field_ref)) {
					field(_t);
					_t = _retTree;
				}
				else {
					if ( _cnt306>=1 ) { break _loop306; } else {throw new NoViableAltException(_t);}
				}
				
				_cnt306++;
			} while (true);
			}
			_t = __t304;
			_t = _t.getNextSibling();
			break;
		}
		case TO:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp374_AST_in = (AST)_t;
		match(_t,TO);
		_t = _t.getNextSibling();
		record_name(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case ASSIGN:
		{
			AST __t308 = _t;
			AST tmp375_AST_in = (AST)_t;
			match(_t,ASSIGN);
			_t = _t.getFirstChild();
			assignment_list(_t);
			_t = _retTree;
			_t = __t308;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		case NOLOBS:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOLOBS:
		{
			AST tmp376_AST_in = (AST)_t;
			match(_t,NOLOBS);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp377_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t299;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void callstate(AST _t) throws RecognitionException {
		
		AST callstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t312 = _t;
		AST tmp378_AST_in = (AST)_t;
		match(_t,CALL);
		_t = _t.getFirstChild();
		anyorvalue(_t);
		_t = _retTree;
		{
		_loop314:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_5.member(_t.getType()))) {
				expressionorvalue(_t);
				_t = _retTree;
			}
			else {
				break _loop314;
			}
			
		} while (true);
		}
		state_end(_t);
		_t = _retTree;
		_t = __t312;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void casestate(AST _t) throws RecognitionException {
		
		AST casestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t329 = _t;
		AST tmp379_AST_in = (AST)_t;
		match(_t,CASE);
		_t = _t.getFirstChild();
		expression(_t);
		_t = _retTree;
		block_colon(_t);
		_t = _retTree;
		AST __t330 = _t;
		AST tmp380_AST_in = (AST)_t;
		match(_t,Code_block);
		_t = _t.getFirstChild();
		{
		_loop333:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==WHEN)) {
				AST __t332 = _t;
				AST tmp381_AST_in = (AST)_t;
				match(_t,WHEN);
				_t = _t.getFirstChild();
				case_expression(_t);
				_t = _retTree;
				AST tmp382_AST_in = (AST)_t;
				match(_t,THEN);
				_t = _t.getNextSibling();
				blockorstate(_t);
				_t = _retTree;
				_t = __t332;
				_t = _t.getNextSibling();
			}
			else {
				break _loop333;
			}
			
		} while (true);
		}
		_t = __t330;
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case OTHERWISE:
		{
			AST __t335 = _t;
			AST tmp383_AST_in = (AST)_t;
			match(_t,OTHERWISE);
			_t = _t.getFirstChild();
			blockorstate(_t);
			_t = _retTree;
			_t = __t335;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case END:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case EOF:
		{
			AST tmp384_AST_in = (AST)_t;
			match(_t,Token.EOF_TYPE);
			_t = _t.getNextSibling();
			break;
		}
		case END:
		{
			AST __t337 = _t;
			AST tmp385_AST_in = (AST)_t;
			match(_t,END);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case CASE:
			{
				AST tmp386_AST_in = (AST)_t;
				match(_t,CASE);
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t337;
			_t = _t.getNextSibling();
			state_end(_t);
			_t = _retTree;
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t329;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void choosestate(AST _t) throws RecognitionException {
		
		AST choosestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t346 = _t;
		AST tmp387_AST_in = (AST)_t;
		match(_t,CHOOSE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case ROW:
		{
			AST tmp388_AST_in = (AST)_t;
			match(_t,ROW);
			_t = _t.getNextSibling();
			break;
		}
		case FIELD:
		{
			AST tmp389_AST_in = (AST)_t;
			match(_t,FIELD);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		int _cnt352=0;
		_loop352:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==Form_item)) {
				AST __t349 = _t;
				AST tmp390_AST_in = (AST)_t;
				match(_t,Form_item);
				_t = _t.getFirstChild();
				field(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case HELP:
				{
					AST __t351 = _t;
					AST tmp391_AST_in = (AST)_t;
					match(_t,HELP);
					_t = _t.getFirstChild();
					constant(_t);
					_t = _retTree;
					_t = __t351;
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t349;
				_t = _t.getNextSibling();
			}
			else {
				if ( _cnt352>=1 ) { break _loop352; } else {throw new NoViableAltException(_t);}
			}
			
			_cnt352++;
		} while (true);
		}
		{
		_loop357:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case AUTORETURN:
			{
				AST tmp392_AST_in = (AST)_t;
				match(_t,AUTORETURN);
				_t = _t.getNextSibling();
				break;
			}
			case COLOR:
			{
				AST __t354 = _t;
				AST tmp393_AST_in = (AST)_t;
				match(_t,COLOR);
				_t = _t.getFirstChild();
				anyorvalue(_t);
				_t = _retTree;
				_t = __t354;
				_t = _t.getNextSibling();
				break;
			}
			case GOON:
			{
				goonphrase(_t);
				_t = _retTree;
				break;
			}
			case KEYS:
			{
				AST __t355 = _t;
				AST tmp394_AST_in = (AST)_t;
				match(_t,KEYS);
				_t = _t.getFirstChild();
				field(_t);
				_t = _retTree;
				_t = __t355;
				_t = _t.getNextSibling();
				break;
			}
			case NOERROR_KW:
			{
				AST tmp395_AST_in = (AST)_t;
				match(_t,NOERROR_KW);
				_t = _t.getNextSibling();
				break;
			}
			case PAUSE:
			{
				AST __t356 = _t;
				AST tmp396_AST_in = (AST)_t;
				match(_t,PAUSE);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t356;
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				break _loop357;
			}
			}
		} while (true);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case WITH:
		{
			framephrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t346;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void clearstate(AST _t) throws RecognitionException {
		
		AST clearstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t362 = _t;
		AST tmp397_AST_in = (AST)_t;
		match(_t,CLEAR);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case FRAME:
		{
			AST __t364 = _t;
			AST tmp398_AST_in = (AST)_t;
			match(_t,FRAME);
			_t = _t.getFirstChild();
			AST tmp399_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			_t = __t364;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case ALL:
		case NOPAUSE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case ALL:
		{
			AST tmp400_AST_in = (AST)_t;
			match(_t,ALL);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOPAUSE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOPAUSE:
		{
			AST tmp401_AST_in = (AST)_t;
			match(_t,NOPAUSE);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t362;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void closestate(AST _t) throws RecognitionException {
		
		AST closestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2410 = _t;
		AST tmp402_AST_in = (AST)_t;
		match(_t,CLOSE);
		_t = _t.getFirstChild();
		AST tmp403_AST_in = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		state_end(_t);
		_t = _retTree;
		_t = __t2410;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void closequerystate(AST _t) throws RecognitionException {
		
		AST closequerystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t368 = _t;
		AST tmp404_AST_in = (AST)_t;
		match(_t,CLOSE);
		_t = _t.getFirstChild();
		AST tmp405_AST_in = (AST)_t;
		match(_t,QUERY);
		_t = _t.getNextSibling();
		AST tmp406_AST_in = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		state_end(_t);
		_t = _retTree;
		_t = __t368;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void closestoredprocedurestate(AST _t) throws RecognitionException {
		
		AST closestoredprocedurestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t370 = _t;
		AST tmp407_AST_in = (AST)_t;
		match(_t,CLOSE);
		_t = _t.getFirstChild();
		AST tmp408_AST_in = (AST)_t;
		match(_t,STOREDPROCEDURE);
		_t = _t.getNextSibling();
		AST tmp409_AST_in = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case EQUAL:
		{
			AST __t372 = _t;
			AST tmp410_AST_in = (AST)_t;
			match(_t,EQUAL);
			_t = _t.getFirstChild();
			field(_t);
			_t = _retTree;
			AST tmp411_AST_in = (AST)_t;
			match(_t,PROCSTATUS);
			_t = _t.getNextSibling();
			_t = __t372;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case WHERE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case WHERE:
		{
			AST __t374 = _t;
			AST tmp412_AST_in = (AST)_t;
			match(_t,WHERE);
			_t = _t.getFirstChild();
			AST tmp413_AST_in = (AST)_t;
			match(_t,PROCHANDLE);
			_t = _t.getNextSibling();
			AST tmp414_AST_in = (AST)_t;
			match(_t,EQ);
			_t = _t.getNextSibling();
			field(_t);
			_t = _retTree;
			_t = __t374;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t370;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void colorstate(AST _t) throws RecognitionException {
		
		AST colorstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t395 = _t;
		AST tmp415_AST_in = (AST)_t;
		match(_t,COLOR);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case DISPLAY:
		case PROMPT:
		{
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case DISPLAY:
			{
				AST __t398 = _t;
				AST tmp416_AST_in = (AST)_t;
				match(_t,DISPLAY);
				_t = _t.getFirstChild();
				anyorvalue(_t);
				_t = _retTree;
				_t = __t398;
				_t = _t.getNextSibling();
				break;
			}
			case PROMPT:
			{
				AST __t399 = _t;
				AST tmp417_AST_in = (AST)_t;
				match(_t,PROMPT);
				_t = _t.getFirstChild();
				anyorvalue(_t);
				_t = _retTree;
				_t = __t399;
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case DISPLAY:
			{
				AST __t401 = _t;
				AST tmp418_AST_in = (AST)_t;
				match(_t,DISPLAY);
				_t = _t.getFirstChild();
				anyorvalue(_t);
				_t = _retTree;
				_t = __t401;
				_t = _t.getNextSibling();
				break;
			}
			case PROMPT:
			{
				AST __t402 = _t;
				AST tmp419_AST_in = (AST)_t;
				match(_t,PROMPT);
				_t = _t.getFirstChild();
				anyorvalue(_t);
				_t = _retTree;
				_t = __t402;
				_t = _t.getNextSibling();
				break;
			}
			case EOF:
			case PERIOD:
			case WITH:
			case Form_item:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			break;
		}
		case EOF:
		case PERIOD:
		case WITH:
		case Form_item:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop406:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==Form_item)) {
				AST __t404 = _t;
				AST tmp420_AST_in = (AST)_t;
				match(_t,Form_item);
				_t = _t.getFirstChild();
				field(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case Format_phrase:
				{
					formatphrase(_t);
					_t = _retTree;
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t404;
				_t = _t.getNextSibling();
			}
			else {
				break _loop406;
			}
			
		} while (true);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case WITH:
		{
			framephrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t395;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void compilestate(AST _t) throws RecognitionException {
		
		AST compilestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t444 = _t;
		AST tmp421_AST_in = (AST)_t;
		match(_t,COMPILE);
		_t = _t.getFirstChild();
		filenameorvalue(_t);
		_t = _retTree;
		{
		_loop493:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case ATTRSPACE:
			{
				AST __t446 = _t;
				AST tmp422_AST_in = (AST)_t;
				match(_t,ATTRSPACE);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case EQUAL:
				{
					AST __t448 = _t;
					AST tmp423_AST_in = (AST)_t;
					match(_t,EQUAL);
					_t = _t.getFirstChild();
					expression(_t);
					_t = _retTree;
					_t = __t448;
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t446;
				_t = _t.getNextSibling();
				break;
			}
			case NOATTRSPACE:
			{
				AST tmp424_AST_in = (AST)_t;
				match(_t,NOATTRSPACE);
				_t = _t.getNextSibling();
				break;
			}
			case SAVE:
			{
				AST __t449 = _t;
				AST tmp425_AST_in = (AST)_t;
				match(_t,SAVE);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case EQUAL:
				{
					AST __t451 = _t;
					AST tmp426_AST_in = (AST)_t;
					match(_t,EQUAL);
					_t = _t.getFirstChild();
					expression(_t);
					_t = _retTree;
					_t = __t451;
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				case INTO:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case INTO:
				{
					AST __t453 = _t;
					AST tmp427_AST_in = (AST)_t;
					match(_t,INTO);
					_t = _t.getFirstChild();
					filenameorvalue(_t);
					_t = _retTree;
					_t = __t453;
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t449;
				_t = _t.getNextSibling();
				break;
			}
			case LISTING:
			{
				AST __t454 = _t;
				AST tmp428_AST_in = (AST)_t;
				match(_t,LISTING);
				_t = _t.getFirstChild();
				filenameorvalue(_t);
				_t = _retTree;
				{
				_loop458:
				do {
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case APPEND:
					{
						compile_append(_t);
						_t = _retTree;
						break;
					}
					case PAGESIZE_KW:
					{
						AST __t456 = _t;
						AST tmp429_AST_in = (AST)_t;
						match(_t,PAGESIZE_KW);
						_t = _t.getFirstChild();
						expression(_t);
						_t = _retTree;
						_t = __t456;
						_t = _t.getNextSibling();
						break;
					}
					case PAGEWIDTH:
					{
						AST __t457 = _t;
						AST tmp430_AST_in = (AST)_t;
						match(_t,PAGEWIDTH);
						_t = _t.getFirstChild();
						expression(_t);
						_t = _retTree;
						_t = __t457;
						_t = _t.getNextSibling();
						break;
					}
					default:
					{
						break _loop458;
					}
					}
				} while (true);
				}
				_t = __t454;
				_t = _t.getNextSibling();
				break;
			}
			case XCODE:
			{
				AST __t459 = _t;
				AST tmp431_AST_in = (AST)_t;
				match(_t,XCODE);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t459;
				_t = _t.getNextSibling();
				break;
			}
			case XREF:
			{
				AST __t460 = _t;
				AST tmp432_AST_in = (AST)_t;
				match(_t,XREF);
				_t = _t.getFirstChild();
				filenameorvalue(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case APPEND:
				{
					compile_append(_t);
					_t = _retTree;
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t460;
				_t = _t.getNextSibling();
				break;
			}
			case STRINGXREF:
			{
				AST __t462 = _t;
				AST tmp433_AST_in = (AST)_t;
				match(_t,STRINGXREF);
				_t = _t.getFirstChild();
				filenameorvalue(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case APPEND:
				{
					compile_append(_t);
					_t = _retTree;
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t462;
				_t = _t.getNextSibling();
				break;
			}
			case STREAMIO:
			{
				AST __t464 = _t;
				AST tmp434_AST_in = (AST)_t;
				match(_t,STREAMIO);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case EQUAL:
				{
					AST __t466 = _t;
					AST tmp435_AST_in = (AST)_t;
					match(_t,EQUAL);
					_t = _t.getFirstChild();
					expression(_t);
					_t = _retTree;
					_t = __t466;
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t464;
				_t = _t.getNextSibling();
				break;
			}
			case MINSIZE:
			{
				AST __t467 = _t;
				AST tmp436_AST_in = (AST)_t;
				match(_t,MINSIZE);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case EQUAL:
				{
					AST __t469 = _t;
					AST tmp437_AST_in = (AST)_t;
					match(_t,EQUAL);
					_t = _t.getFirstChild();
					expression(_t);
					_t = _retTree;
					_t = __t469;
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t467;
				_t = _t.getNextSibling();
				break;
			}
			case LANGUAGES:
			{
				AST __t470 = _t;
				AST tmp438_AST_in = (AST)_t;
				match(_t,LANGUAGES);
				_t = _t.getFirstChild();
				AST tmp439_AST_in = (AST)_t;
				match(_t,LEFTPAREN);
				_t = _t.getNextSibling();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case VALUE:
				case TYPELESS_TOKEN:
				{
					compile_lang(_t);
					_t = _retTree;
					{
					_loop473:
					do {
						if (_t==null) _t=ASTNULL;
						if ((_t.getType()==COMMA)) {
							AST tmp440_AST_in = (AST)_t;
							match(_t,COMMA);
							_t = _t.getNextSibling();
							compile_lang(_t);
							_t = _retTree;
						}
						else {
							break _loop473;
						}
						
					} while (true);
					}
					break;
				}
				case RIGHTPAREN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				AST tmp441_AST_in = (AST)_t;
				match(_t,RIGHTPAREN);
				_t = _t.getNextSibling();
				_t = __t470;
				_t = _t.getNextSibling();
				break;
			}
			case TEXTSEGGROW:
			{
				AST __t474 = _t;
				AST tmp442_AST_in = (AST)_t;
				match(_t,TEXTSEGGROW);
				_t = _t.getFirstChild();
				AST __t475 = _t;
				AST tmp443_AST_in = (AST)_t;
				match(_t,EQUAL);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t475;
				_t = _t.getNextSibling();
				_t = __t474;
				_t = _t.getNextSibling();
				break;
			}
			case DEBUGLIST:
			{
				AST __t476 = _t;
				AST tmp444_AST_in = (AST)_t;
				match(_t,DEBUGLIST);
				_t = _t.getFirstChild();
				filenameorvalue(_t);
				_t = _retTree;
				_t = __t476;
				_t = _t.getNextSibling();
				break;
			}
			case DEFAULTNOXLATE:
			{
				AST __t477 = _t;
				AST tmp445_AST_in = (AST)_t;
				match(_t,DEFAULTNOXLATE);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case EQUAL:
				{
					AST __t479 = _t;
					AST tmp446_AST_in = (AST)_t;
					match(_t,EQUAL);
					_t = _t.getFirstChild();
					expression(_t);
					_t = _retTree;
					_t = __t479;
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t477;
				_t = _t.getNextSibling();
				break;
			}
			case GENERATEMD5:
			{
				AST __t480 = _t;
				AST tmp447_AST_in = (AST)_t;
				match(_t,GENERATEMD5);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case EQUAL:
				{
					AST __t482 = _t;
					AST tmp448_AST_in = (AST)_t;
					match(_t,EQUAL);
					_t = _t.getFirstChild();
					expression(_t);
					_t = _retTree;
					_t = __t482;
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t480;
				_t = _t.getNextSibling();
				break;
			}
			case PREPROCESS:
			{
				AST __t483 = _t;
				AST tmp449_AST_in = (AST)_t;
				match(_t,PREPROCESS);
				_t = _t.getFirstChild();
				filenameorvalue(_t);
				_t = _retTree;
				_t = __t483;
				_t = _t.getNextSibling();
				break;
			}
			case USEREVVIDEO:
			{
				AST __t484 = _t;
				AST tmp450_AST_in = (AST)_t;
				match(_t,USEREVVIDEO);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case EQUAL:
				{
					AST __t486 = _t;
					AST tmp451_AST_in = (AST)_t;
					match(_t,EQUAL);
					_t = _t.getFirstChild();
					expression(_t);
					_t = _retTree;
					_t = __t486;
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t484;
				_t = _t.getNextSibling();
				break;
			}
			case USEUNDERLINE:
			{
				AST __t487 = _t;
				AST tmp452_AST_in = (AST)_t;
				match(_t,USEUNDERLINE);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case EQUAL:
				{
					AST __t489 = _t;
					AST tmp453_AST_in = (AST)_t;
					match(_t,EQUAL);
					_t = _t.getFirstChild();
					expression(_t);
					_t = _retTree;
					_t = __t489;
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t487;
				_t = _t.getNextSibling();
				break;
			}
			case V6FRAME:
			{
				AST __t490 = _t;
				AST tmp454_AST_in = (AST)_t;
				match(_t,V6FRAME);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case EQUAL:
				{
					AST __t492 = _t;
					AST tmp455_AST_in = (AST)_t;
					match(_t,EQUAL);
					_t = _t.getFirstChild();
					expression(_t);
					_t = _retTree;
					_t = __t492;
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t490;
				_t = _t.getNextSibling();
				break;
			}
			case NOERROR_KW:
			{
				AST tmp456_AST_in = (AST)_t;
				match(_t,NOERROR_KW);
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				break _loop493;
			}
			}
		} while (true);
		}
		state_end(_t);
		_t = _retTree;
		_t = __t444;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void connectstate(AST _t) throws RecognitionException {
		
		AST connectstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t502 = _t;
		AST tmp457_AST_in = (AST)_t;
		match(_t,CONNECT);
		_t = _t.getFirstChild();
		{
		_loop504:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case NOERROR_KW:
			{
				AST tmp458_AST_in = (AST)_t;
				match(_t,NOERROR_KW);
				_t = _t.getNextSibling();
				break;
			}
			case DDE:
			{
				AST tmp459_AST_in = (AST)_t;
				match(_t,DDE);
				_t = _t.getNextSibling();
				break;
			}
			case FILENAME:
			case VALUE:
			{
				filenameorvalue(_t);
				_t = _retTree;
				break;
			}
			default:
			{
				break _loop504;
			}
			}
		} while (true);
		}
		state_end(_t);
		_t = _retTree;
		_t = __t502;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void copylobstate(AST _t) throws RecognitionException {
		
		AST copylobstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t518 = _t;
		AST tmp460_AST_in = (AST)_t;
		match(_t,COPYLOB);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		if ((_t.getType()==FROM)) {
			AST tmp461_AST_in = (AST)_t;
			match(_t,FROM);
			_t = _t.getNextSibling();
		}
		else if ((_tokenSet_6.member(_t.getType()))) {
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		{
		if (_t==null) _t=ASTNULL;
		if ((_t.getType()==FILE)) {
			AST tmp462_AST_in = (AST)_t;
			match(_t,FILE);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
		}
		else if ((_tokenSet_7.member(_t.getType()))) {
			{
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==OBJECT)) {
				AST tmp463_AST_in = (AST)_t;
				match(_t,OBJECT);
				_t = _t.getNextSibling();
			}
			else if ((_tokenSet_4.member(_t.getType()))) {
			}
			else {
				throw new NoViableAltException(_t);
			}
			
			}
			expression(_t);
			_t = _retTree;
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case STARTING:
		{
			AST __t523 = _t;
			AST tmp464_AST_in = (AST)_t;
			match(_t,STARTING);
			_t = _t.getFirstChild();
			AST tmp465_AST_in = (AST)_t;
			match(_t,AT);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t523;
			_t = _t.getNextSibling();
			break;
		}
		case FOR:
		case TO:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case FOR:
		{
			AST __t525 = _t;
			AST tmp466_AST_in = (AST)_t;
			match(_t,FOR);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t525;
			_t = _t.getNextSibling();
			break;
		}
		case TO:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp467_AST_in = (AST)_t;
		match(_t,TO);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		if ((_t.getType()==FILE)) {
			AST tmp468_AST_in = (AST)_t;
			match(_t,FILE);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case APPEND:
			{
				AST tmp469_AST_in = (AST)_t;
				match(_t,APPEND);
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			case CONVERT:
			case NOCONVERT:
			case NOERROR_KW:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
		}
		else if ((_tokenSet_7.member(_t.getType()))) {
			{
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==OBJECT)) {
				AST tmp470_AST_in = (AST)_t;
				match(_t,OBJECT);
				_t = _t.getNextSibling();
			}
			else if ((_tokenSet_4.member(_t.getType()))) {
			}
			else {
				throw new NoViableAltException(_t);
			}
			
			}
			expression(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case OVERLAY:
			{
				AST tmp471_AST_in = (AST)_t;
				match(_t,OVERLAY);
				_t = _t.getNextSibling();
				AST tmp472_AST_in = (AST)_t;
				match(_t,AT);
				_t = _t.getNextSibling();
				expression(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case TRIM:
				{
					AST tmp473_AST_in = (AST)_t;
					match(_t,TRIM);
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				case CONVERT:
				case NOCONVERT:
				case NOERROR_KW:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				break;
			}
			case 3:
			case CONVERT:
			case NOCONVERT:
			case NOERROR_KW:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOCONVERT:
		{
			AST tmp474_AST_in = (AST)_t;
			match(_t,NOCONVERT);
			_t = _t.getNextSibling();
			break;
		}
		case CONVERT:
		{
			convertphrase(_t);
			_t = _retTree;
			break;
		}
		case 3:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp475_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t518;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void createstate(AST _t) throws RecognitionException {
		
		AST createstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t536 = _t;
		AST tmp476_AST_in = (AST)_t;
		match(_t,CREATE);
		_t = _t.getFirstChild();
		record_name(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case USING:
		{
			AST __t538 = _t;
			AST tmp477_AST_in = (AST)_t;
			match(_t,USING);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case ROWID:
			{
				AST tmp478_AST_in = (AST)_t;
				match(_t,ROWID);
				_t = _t.getNextSibling();
				break;
			}
			case RECID:
			{
				AST tmp479_AST_in = (AST)_t;
				match(_t,RECID);
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			expression(_t);
			_t = _retTree;
			_t = __t538;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp480_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t536;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void createaliasstate(AST _t) throws RecognitionException {
		
		AST createaliasstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t542 = _t;
		AST tmp481_AST_in = (AST)_t;
		match(_t,CREATE);
		_t = _t.getFirstChild();
		AST tmp482_AST_in = (AST)_t;
		match(_t,ALIAS);
		_t = _t.getNextSibling();
		anyorvalue(_t);
		_t = _retTree;
		AST tmp483_AST_in = (AST)_t;
		match(_t,FOR);
		_t = _t.getNextSibling();
		AST tmp484_AST_in = (AST)_t;
		match(_t,DATABASE);
		_t = _t.getNextSibling();
		anyorvalue(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp485_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t542;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void createautomationobjectstate(AST _t) throws RecognitionException {
		
		AST createautomationobjectstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t545 = _t;
		AST tmp486_AST_in = (AST)_t;
		match(_t,CREATE);
		_t = _t.getFirstChild();
		AST tmp487_AST_in = (AST)_t;
		match(_t,QSTRING);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case CONNECT:
		{
			AST __t547 = _t;
			AST tmp488_AST_in = (AST)_t;
			match(_t,CONNECT);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case TO:
			{
				AST __t549 = _t;
				AST tmp489_AST_in = (AST)_t;
				match(_t,TO);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t549;
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t547;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp490_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t545;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void createbrowsestate(AST _t) throws RecognitionException {
		
		AST createbrowsestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t552 = _t;
		AST tmp491_AST_in = (AST)_t;
		match(_t,CREATE);
		_t = _t.getFirstChild();
		AST tmp492_AST_in = (AST)_t;
		match(_t,BROWSE);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t554 = _t;
			AST tmp493_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			AST tmp494_AST_in = (AST)_t;
			match(_t,WIDGETPOOL);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t554;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case ASSIGN:
		case NOERROR_KW:
		case TRIGGERS:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp495_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case ASSIGN:
		case TRIGGERS:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case ASSIGN:
		{
			assign_opt(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case TRIGGERS:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case TRIGGERS:
		{
			triggerphrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t552;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void createbufferstate(AST _t) throws RecognitionException {
		
		AST createbufferstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t559 = _t;
		AST tmp496_AST_in = (AST)_t;
		match(_t,CREATE);
		_t = _t.getFirstChild();
		AST tmp497_AST_in = (AST)_t;
		match(_t,BUFFER);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		AST tmp498_AST_in = (AST)_t;
		match(_t,FOR);
		_t = _t.getNextSibling();
		AST tmp499_AST_in = (AST)_t;
		match(_t,TABLE);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case BUFFERNAME:
		{
			AST __t561 = _t;
			AST tmp500_AST_in = (AST)_t;
			match(_t,BUFFERNAME);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t561;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case IN_KW:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t563 = _t;
			AST tmp501_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			AST tmp502_AST_in = (AST)_t;
			match(_t,WIDGETPOOL);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t563;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp503_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t559;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void createcallstate(AST _t) throws RecognitionException {
		
		AST createcallstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t566 = _t;
		AST tmp504_AST_in = (AST)_t;
		match(_t,CREATE);
		_t = _t.getFirstChild();
		AST tmp505_AST_in = (AST)_t;
		match(_t,CALL);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t568 = _t;
			AST tmp506_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			AST tmp507_AST_in = (AST)_t;
			match(_t,WIDGETPOOL);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t568;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp508_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t566;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void createdatabasestate(AST _t) throws RecognitionException {
		
		AST createdatabasestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t571 = _t;
		AST tmp509_AST_in = (AST)_t;
		match(_t,CREATE);
		_t = _t.getFirstChild();
		AST tmp510_AST_in = (AST)_t;
		match(_t,DATABASE);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case FROM:
		{
			AST __t573 = _t;
			AST tmp511_AST_in = (AST)_t;
			match(_t,FROM);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t573;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		case REPLACE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case REPLACE:
		{
			AST tmp512_AST_in = (AST)_t;
			match(_t,REPLACE);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp513_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t571;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void createdatasetstate(AST _t) throws RecognitionException {
		
		AST createdatasetstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t577 = _t;
		AST tmp514_AST_in = (AST)_t;
		match(_t,CREATE);
		_t = _t.getFirstChild();
		AST tmp515_AST_in = (AST)_t;
		match(_t,DATASET);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t579 = _t;
			AST tmp516_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			AST tmp517_AST_in = (AST)_t;
			match(_t,WIDGETPOOL);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t579;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp518_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t577;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void createdatasourcestate(AST _t) throws RecognitionException {
		
		AST createdatasourcestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t582 = _t;
		AST tmp519_AST_in = (AST)_t;
		match(_t,CREATE);
		_t = _t.getFirstChild();
		AST tmp520_AST_in = (AST)_t;
		match(_t,DATASOURCE);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t584 = _t;
			AST tmp521_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			AST tmp522_AST_in = (AST)_t;
			match(_t,WIDGETPOOL);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t584;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp523_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t582;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void createindexstate(AST _t) throws RecognitionException {
		
		AST createindexstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2412 = _t;
		AST tmp524_AST_in = (AST)_t;
		match(_t,CREATE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case UNIQUE:
		{
			AST tmp525_AST_in = (AST)_t;
			match(_t,UNIQUE);
			_t = _t.getNextSibling();
			break;
		}
		case INDEX:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp526_AST_in = (AST)_t;
		match(_t,INDEX);
		_t = _t.getNextSibling();
		AST tmp527_AST_in = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		AST tmp528_AST_in = (AST)_t;
		match(_t,ON);
		_t = _t.getNextSibling();
		record_name(_t);
		_t = _retTree;
		AST __t2414 = _t;
		AST tmp529_AST_in = (AST)_t;
		match(_t,Field_list);
		_t = _t.getFirstChild();
		AST tmp530_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		{
		_loop2416:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==COMMA)) {
				AST tmp531_AST_in = (AST)_t;
				match(_t,COMMA);
				_t = _t.getNextSibling();
				field(_t);
				_t = _retTree;
			}
			else {
				break _loop2416;
			}
			
		} while (true);
		}
		AST tmp532_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_t = __t2414;
		_t = _t.getNextSibling();
		state_end(_t);
		_t = _retTree;
		_t = __t2412;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void createquerystate(AST _t) throws RecognitionException {
		
		AST createquerystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t587 = _t;
		AST tmp533_AST_in = (AST)_t;
		match(_t,CREATE);
		_t = _t.getFirstChild();
		AST tmp534_AST_in = (AST)_t;
		match(_t,QUERY);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t589 = _t;
			AST tmp535_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			AST tmp536_AST_in = (AST)_t;
			match(_t,WIDGETPOOL);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t589;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp537_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t587;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void createsaxreaderstate(AST _t) throws RecognitionException {
		
		AST createsaxreaderstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t592 = _t;
		AST tmp538_AST_in = (AST)_t;
		match(_t,CREATE);
		_t = _t.getFirstChild();
		AST tmp539_AST_in = (AST)_t;
		match(_t,SAXREADER);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t594 = _t;
			AST tmp540_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			AST tmp541_AST_in = (AST)_t;
			match(_t,WIDGETPOOL);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t594;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp542_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t592;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void createserverstate(AST _t) throws RecognitionException {
		
		AST createserverstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t597 = _t;
		AST tmp543_AST_in = (AST)_t;
		match(_t,CREATE);
		_t = _t.getFirstChild();
		AST tmp544_AST_in = (AST)_t;
		match(_t,SERVER);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case ASSIGN:
		{
			assign_opt(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t597;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void createserversocketstate(AST _t) throws RecognitionException {
		
		AST createserversocketstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t600 = _t;
		AST tmp545_AST_in = (AST)_t;
		match(_t,CREATE);
		_t = _t.getFirstChild();
		AST tmp546_AST_in = (AST)_t;
		match(_t,SERVERSOCKET);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp547_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t600;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void createsoapheaderstate(AST _t) throws RecognitionException {
		
		AST createsoapheaderstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t603 = _t;
		AST tmp548_AST_in = (AST)_t;
		match(_t,CREATE);
		_t = _t.getFirstChild();
		AST tmp549_AST_in = (AST)_t;
		match(_t,SOAPHEADER);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t605 = _t;
			AST tmp550_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			AST tmp551_AST_in = (AST)_t;
			match(_t,WIDGETPOOL);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t605;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp552_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t603;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void createsoapheaderentryrefstate(AST _t) throws RecognitionException {
		
		AST createsoapheaderentryrefstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t608 = _t;
		AST tmp553_AST_in = (AST)_t;
		match(_t,CREATE);
		_t = _t.getFirstChild();
		AST tmp554_AST_in = (AST)_t;
		match(_t,SOAPHEADERENTRYREF);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t610 = _t;
			AST tmp555_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			AST tmp556_AST_in = (AST)_t;
			match(_t,WIDGETPOOL);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t610;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp557_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t608;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void createsocketstate(AST _t) throws RecognitionException {
		
		AST createsocketstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t613 = _t;
		AST tmp558_AST_in = (AST)_t;
		match(_t,CREATE);
		_t = _t.getFirstChild();
		AST tmp559_AST_in = (AST)_t;
		match(_t,SOCKET);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp560_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t613;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void createtablestate(AST _t) throws RecognitionException {
		
		AST createtablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2418 = _t;
		AST tmp561_AST_in = (AST)_t;
		match(_t,CREATE);
		_t = _t.getFirstChild();
		AST tmp562_AST_in = (AST)_t;
		match(_t,TABLE);
		_t = _t.getNextSibling();
		AST tmp563_AST_in = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		AST tmp564_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case ID:
		{
			sql_col_def(_t);
			_t = _retTree;
			break;
		}
		case UNIQUE:
		{
			AST __t2420 = _t;
			AST tmp565_AST_in = (AST)_t;
			match(_t,UNIQUE);
			_t = _t.getFirstChild();
			AST tmp566_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getNextSibling();
			AST tmp567_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			{
			_loop2422:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==COMMA)) {
					AST tmp568_AST_in = (AST)_t;
					match(_t,COMMA);
					_t = _t.getNextSibling();
					AST tmp569_AST_in = (AST)_t;
					match(_t,ID);
					_t = _t.getNextSibling();
				}
				else {
					break _loop2422;
				}
				
			} while (true);
			}
			AST tmp570_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			_t = __t2420;
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop2428:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==COMMA)) {
				AST tmp571_AST_in = (AST)_t;
				match(_t,COMMA);
				_t = _t.getNextSibling();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case ID:
				{
					sql_col_def(_t);
					_t = _retTree;
					break;
				}
				case UNIQUE:
				{
					AST __t2425 = _t;
					AST tmp572_AST_in = (AST)_t;
					match(_t,UNIQUE);
					_t = _t.getFirstChild();
					AST tmp573_AST_in = (AST)_t;
					match(_t,LEFTPAREN);
					_t = _t.getNextSibling();
					AST tmp574_AST_in = (AST)_t;
					match(_t,ID);
					_t = _t.getNextSibling();
					{
					_loop2427:
					do {
						if (_t==null) _t=ASTNULL;
						if ((_t.getType()==COMMA)) {
							AST tmp575_AST_in = (AST)_t;
							match(_t,COMMA);
							_t = _t.getNextSibling();
							AST tmp576_AST_in = (AST)_t;
							match(_t,ID);
							_t = _t.getNextSibling();
						}
						else {
							break _loop2427;
						}
						
					} while (true);
					}
					AST tmp577_AST_in = (AST)_t;
					match(_t,RIGHTPAREN);
					_t = _t.getNextSibling();
					_t = __t2425;
					_t = _t.getNextSibling();
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
			}
			else {
				break _loop2428;
			}
			
		} while (true);
		}
		AST tmp578_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		state_end(_t);
		_t = _retTree;
		_t = __t2418;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void createtemptablestate(AST _t) throws RecognitionException {
		
		AST createtemptablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t616 = _t;
		AST tmp579_AST_in = (AST)_t;
		match(_t,CREATE);
		_t = _t.getFirstChild();
		AST tmp580_AST_in = (AST)_t;
		match(_t,TEMPTABLE);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t618 = _t;
			AST tmp581_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			AST tmp582_AST_in = (AST)_t;
			match(_t,WIDGETPOOL);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t618;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp583_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t616;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void createviewstate(AST _t) throws RecognitionException {
		
		AST createviewstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2430 = _t;
		AST tmp584_AST_in = (AST)_t;
		match(_t,CREATE);
		_t = _t.getFirstChild();
		AST tmp585_AST_in = (AST)_t;
		match(_t,VIEW);
		_t = _t.getNextSibling();
		AST tmp586_AST_in = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case Field_list:
		{
			AST __t2432 = _t;
			AST tmp587_AST_in = (AST)_t;
			match(_t,Field_list);
			_t = _t.getFirstChild();
			AST tmp588_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getNextSibling();
			field(_t);
			_t = _retTree;
			{
			_loop2434:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==COMMA)) {
					AST tmp589_AST_in = (AST)_t;
					match(_t,COMMA);
					_t = _t.getNextSibling();
					field(_t);
					_t = _retTree;
				}
				else {
					break _loop2434;
				}
				
			} while (true);
			}
			AST tmp590_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			_t = __t2432;
			_t = _t.getNextSibling();
			break;
		}
		case AS:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp591_AST_in = (AST)_t;
		match(_t,AS);
		_t = _t.getNextSibling();
		selectstatea(_t);
		_t = _retTree;
		state_end(_t);
		_t = _retTree;
		_t = __t2430;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void createwidgetstate(AST _t) throws RecognitionException {
		
		AST createwidgetstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t621 = _t;
		AST tmp592_AST_in = (AST)_t;
		match(_t,CREATE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case VALUE:
		{
			valueexpression(_t);
			_t = _retTree;
			break;
		}
		case BUTTON:
		{
			AST tmp593_AST_in = (AST)_t;
			match(_t,BUTTON);
			_t = _t.getNextSibling();
			break;
		}
		case COMBOBOX:
		{
			AST tmp594_AST_in = (AST)_t;
			match(_t,COMBOBOX);
			_t = _t.getNextSibling();
			break;
		}
		case CONTROLFRAME:
		{
			AST tmp595_AST_in = (AST)_t;
			match(_t,CONTROLFRAME);
			_t = _t.getNextSibling();
			break;
		}
		case DIALOGBOX:
		{
			AST tmp596_AST_in = (AST)_t;
			match(_t,DIALOGBOX);
			_t = _t.getNextSibling();
			break;
		}
		case EDITOR:
		{
			AST tmp597_AST_in = (AST)_t;
			match(_t,EDITOR);
			_t = _t.getNextSibling();
			break;
		}
		case FILLIN:
		{
			AST tmp598_AST_in = (AST)_t;
			match(_t,FILLIN);
			_t = _t.getNextSibling();
			break;
		}
		case FRAME:
		{
			AST tmp599_AST_in = (AST)_t;
			match(_t,FRAME);
			_t = _t.getNextSibling();
			break;
		}
		case IMAGE:
		{
			AST tmp600_AST_in = (AST)_t;
			match(_t,IMAGE);
			_t = _t.getNextSibling();
			break;
		}
		case MENU:
		{
			AST tmp601_AST_in = (AST)_t;
			match(_t,MENU);
			_t = _t.getNextSibling();
			break;
		}
		case MENUITEM:
		{
			AST tmp602_AST_in = (AST)_t;
			match(_t,MENUITEM);
			_t = _t.getNextSibling();
			break;
		}
		case RADIOSET:
		{
			AST tmp603_AST_in = (AST)_t;
			match(_t,RADIOSET);
			_t = _t.getNextSibling();
			break;
		}
		case RECTANGLE:
		{
			AST tmp604_AST_in = (AST)_t;
			match(_t,RECTANGLE);
			_t = _t.getNextSibling();
			break;
		}
		case SELECTIONLIST:
		{
			AST tmp605_AST_in = (AST)_t;
			match(_t,SELECTIONLIST);
			_t = _t.getNextSibling();
			break;
		}
		case SLIDER:
		{
			AST tmp606_AST_in = (AST)_t;
			match(_t,SLIDER);
			_t = _t.getNextSibling();
			break;
		}
		case SUBMENU:
		{
			AST tmp607_AST_in = (AST)_t;
			match(_t,SUBMENU);
			_t = _t.getNextSibling();
			break;
		}
		case TEXT:
		{
			AST tmp608_AST_in = (AST)_t;
			match(_t,TEXT);
			_t = _t.getNextSibling();
			break;
		}
		case TOGGLEBOX:
		{
			AST tmp609_AST_in = (AST)_t;
			match(_t,TOGGLEBOX);
			_t = _t.getNextSibling();
			break;
		}
		case WINDOW:
		{
			AST tmp610_AST_in = (AST)_t;
			match(_t,WINDOW);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		field(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t624 = _t;
			AST tmp611_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			AST tmp612_AST_in = (AST)_t;
			match(_t,WIDGETPOOL);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t624;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case ASSIGN:
		case NOERROR_KW:
		case TRIGGERS:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp613_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case ASSIGN:
		case TRIGGERS:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case ASSIGN:
		{
			assign_opt(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case TRIGGERS:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case TRIGGERS:
		{
			triggerphrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t621;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void createwidgetpoolstate(AST _t) throws RecognitionException {
		
		AST createwidgetpoolstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t629 = _t;
		AST tmp614_AST_in = (AST)_t;
		match(_t,CREATE);
		_t = _t.getFirstChild();
		AST tmp615_AST_in = (AST)_t;
		match(_t,WIDGETPOOL);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		if ((_tokenSet_4.member(_t.getType()))) {
			expression(_t);
			_t = _retTree;
		}
		else if ((_tokenSet_8.member(_t.getType()))) {
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case PERSISTENT:
		{
			AST tmp616_AST_in = (AST)_t;
			match(_t,PERSISTENT);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp617_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t629;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void createxdocumentstate(AST _t) throws RecognitionException {
		
		AST createxdocumentstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t634 = _t;
		AST tmp618_AST_in = (AST)_t;
		match(_t,CREATE);
		_t = _t.getFirstChild();
		AST tmp619_AST_in = (AST)_t;
		match(_t,XDOCUMENT);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t636 = _t;
			AST tmp620_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			AST tmp621_AST_in = (AST)_t;
			match(_t,WIDGETPOOL);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t636;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp622_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t634;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void createxnoderefstate(AST _t) throws RecognitionException {
		
		AST createxnoderefstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t639 = _t;
		AST tmp623_AST_in = (AST)_t;
		match(_t,CREATE);
		_t = _t.getFirstChild();
		AST tmp624_AST_in = (AST)_t;
		match(_t,XNODEREF);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t641 = _t;
			AST tmp625_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			AST tmp626_AST_in = (AST)_t;
			match(_t,WIDGETPOOL);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t641;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp627_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t639;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void ddeadvisestate(AST _t) throws RecognitionException {
		
		AST ddeadvisestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t686 = _t;
		AST tmp628_AST_in = (AST)_t;
		match(_t,DDE);
		_t = _t.getFirstChild();
		AST tmp629_AST_in = (AST)_t;
		match(_t,ADVISE);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case START:
		{
			AST tmp630_AST_in = (AST)_t;
			match(_t,START);
			_t = _t.getNextSibling();
			break;
		}
		case STOP:
		{
			AST tmp631_AST_in = (AST)_t;
			match(_t,STOP);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp632_AST_in = (AST)_t;
		match(_t,ITEM);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case TIME:
		{
			AST __t689 = _t;
			AST tmp633_AST_in = (AST)_t;
			match(_t,TIME);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t689;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp634_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t686;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void ddeexecutestate(AST _t) throws RecognitionException {
		
		AST ddeexecutestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t692 = _t;
		AST tmp635_AST_in = (AST)_t;
		match(_t,DDE);
		_t = _t.getFirstChild();
		AST tmp636_AST_in = (AST)_t;
		match(_t,EXECUTE);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		AST tmp637_AST_in = (AST)_t;
		match(_t,COMMAND);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case TIME:
		{
			AST __t694 = _t;
			AST tmp638_AST_in = (AST)_t;
			match(_t,TIME);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t694;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp639_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t692;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void ddegetstate(AST _t) throws RecognitionException {
		
		AST ddegetstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t697 = _t;
		AST tmp640_AST_in = (AST)_t;
		match(_t,DDE);
		_t = _t.getFirstChild();
		AST tmp641_AST_in = (AST)_t;
		match(_t,GET);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		AST tmp642_AST_in = (AST)_t;
		match(_t,TARGET);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		AST tmp643_AST_in = (AST)_t;
		match(_t,ITEM);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case TIME:
		{
			AST __t699 = _t;
			AST tmp644_AST_in = (AST)_t;
			match(_t,TIME);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t699;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp645_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t697;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void ddeinitiatestate(AST _t) throws RecognitionException {
		
		AST ddeinitiatestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t702 = _t;
		AST tmp646_AST_in = (AST)_t;
		match(_t,DDE);
		_t = _t.getFirstChild();
		AST tmp647_AST_in = (AST)_t;
		match(_t,INITIATE);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		AST tmp648_AST_in = (AST)_t;
		match(_t,FRAME);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		AST tmp649_AST_in = (AST)_t;
		match(_t,APPLICATION);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		AST tmp650_AST_in = (AST)_t;
		match(_t,TOPIC);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp651_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t702;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void dderequeststate(AST _t) throws RecognitionException {
		
		AST dderequeststate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t705 = _t;
		AST tmp652_AST_in = (AST)_t;
		match(_t,DDE);
		_t = _t.getFirstChild();
		AST tmp653_AST_in = (AST)_t;
		match(_t,REQUEST);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		AST tmp654_AST_in = (AST)_t;
		match(_t,TARGET);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		AST tmp655_AST_in = (AST)_t;
		match(_t,ITEM);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case TIME:
		{
			AST __t707 = _t;
			AST tmp656_AST_in = (AST)_t;
			match(_t,TIME);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t707;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp657_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t705;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void ddesendstate(AST _t) throws RecognitionException {
		
		AST ddesendstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t710 = _t;
		AST tmp658_AST_in = (AST)_t;
		match(_t,DDE);
		_t = _t.getFirstChild();
		AST tmp659_AST_in = (AST)_t;
		match(_t,SEND);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		AST tmp660_AST_in = (AST)_t;
		match(_t,SOURCE);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		AST tmp661_AST_in = (AST)_t;
		match(_t,ITEM);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case TIME:
		{
			AST __t712 = _t;
			AST tmp662_AST_in = (AST)_t;
			match(_t,TIME);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t712;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp663_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t710;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void ddeterminatestate(AST _t) throws RecognitionException {
		
		AST ddeterminatestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t715 = _t;
		AST tmp664_AST_in = (AST)_t;
		match(_t,DDE);
		_t = _t.getFirstChild();
		AST tmp665_AST_in = (AST)_t;
		match(_t,TERMINATE);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp666_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t715;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void declarecursorstate(AST _t) throws RecognitionException {
		
		AST declarecursorstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2436 = _t;
		AST tmp667_AST_in = (AST)_t;
		match(_t,DECLARE);
		_t = _t.getFirstChild();
		AST tmp668_AST_in = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		AST tmp669_AST_in = (AST)_t;
		match(_t,CURSOR);
		_t = _t.getNextSibling();
		AST tmp670_AST_in = (AST)_t;
		match(_t,FOR);
		_t = _t.getNextSibling();
		selectstatea(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case FOR:
		{
			AST __t2438 = _t;
			AST tmp671_AST_in = (AST)_t;
			match(_t,FOR);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case READ:
			{
				AST __t2440 = _t;
				AST tmp672_AST_in = (AST)_t;
				match(_t,READ);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case ONLY:
				{
					AST tmp673_AST_in = (AST)_t;
					match(_t,ONLY);
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t2440;
				_t = _t.getNextSibling();
				break;
			}
			case UPDATE:
			{
				AST tmp674_AST_in = (AST)_t;
				match(_t,UPDATE);
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t2438;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2436;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void definebrowsestate(AST _t) throws RecognitionException {
		
		AST definebrowsestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST id = null;
		
		AST __t722 = _t;
		AST tmp675_AST_in = (AST)_t;
		match(_t,DEFINE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NEW:
		{
			AST __t724 = _t;
			AST tmp676_AST_in = (AST)_t;
			match(_t,NEW);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case GLOBAL:
			{
				AST tmp677_AST_in = (AST)_t;
				match(_t,GLOBAL);
				_t = _t.getNextSibling();
				break;
			}
			case SHARED:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp678_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			_t = __t724;
			_t = _t.getNextSibling();
			break;
		}
		case SHARED:
		{
			AST tmp679_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			break;
		}
		case BROWSE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp680_AST_in = (AST)_t;
		match(_t,BROWSE);
		_t = _t.getNextSibling();
		id = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case QUERY:
		{
			AST __t727 = _t;
			AST tmp681_AST_in = (AST)_t;
			match(_t,QUERY);
			_t = _t.getFirstChild();
			AST tmp682_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			_t = __t727;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case CONTEXTHELPID:
		case DISPLAY:
		case EXCLUSIVELOCK:
		case NOLOCK:
		case NOWAIT:
		case SHARELOCK:
		case TOOLTIP:
		case WITH:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop729:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case EXCLUSIVELOCK:
			case NOLOCK:
			case SHARELOCK:
			{
				lockhow(_t);
				_t = _retTree;
				break;
			}
			case NOWAIT:
			{
				AST tmp683_AST_in = (AST)_t;
				match(_t,NOWAIT);
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				break _loop729;
			}
			}
		} while (true);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case DISPLAY:
		{
			AST __t731 = _t;
			AST tmp684_AST_in = (AST)_t;
			match(_t,DISPLAY);
			_t = _t.getFirstChild();
			{
			_loop738:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==Form_item)) {
					AST __t733 = _t;
					AST tmp685_AST_in = (AST)_t;
					match(_t,Form_item);
					_t = _t.getFirstChild();
					{
					boolean synPredMatched736 = false;
					if (((_t.getType()==RECORD_NAME))) {
						AST __t736 = _t;
						synPredMatched736 = true;
						inputState.guessing++;
						try {
							{
							record_name(_t);
							_t = _retTree;
							}
						}
						catch (RecognitionException pe) {
							synPredMatched736 = false;
						}
						_t = __t736;
						inputState.guessing--;
					}
					if ( synPredMatched736 ) {
						record_name(_t);
						_t = _retTree;
					}
					else if ((_tokenSet_4.member(_t.getType()))) {
						expression(_t);
						_t = _retTree;
						{
						if (_t==null) _t=ASTNULL;
						switch ( _t.getType()) {
						case Format_phrase:
						{
							columnformat(_t);
							_t = _retTree;
							break;
						}
						case 3:
						{
							break;
						}
						default:
						{
							throw new NoViableAltException(_t);
						}
						}
						}
					}
					else if ((_t.getType()==SPACE)) {
						spacephrase(_t);
						_t = _retTree;
					}
					else {
						throw new NoViableAltException(_t);
					}
					
					}
					_t = __t733;
					_t = _t.getNextSibling();
				}
				else {
					break _loop738;
				}
				
			} while (true);
			}
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case EXCEPT:
			{
				AST __t740 = _t;
				AST tmp686_AST_in = (AST)_t;
				match(_t,EXCEPT);
				_t = _t.getFirstChild();
				{
				_loop742:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_t.getType()==Field_ref)) {
						field(_t);
						_t = _retTree;
					}
					else {
						break _loop742;
					}
					
				} while (true);
				}
				_t = __t740;
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t731;
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case ENABLE:
			{
				AST __t744 = _t;
				AST tmp687_AST_in = (AST)_t;
				match(_t,ENABLE);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case ALL:
				{
					AST __t746 = _t;
					AST tmp688_AST_in = (AST)_t;
					match(_t,ALL);
					_t = _t.getFirstChild();
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case EXCEPT:
					{
						AST __t748 = _t;
						AST tmp689_AST_in = (AST)_t;
						match(_t,EXCEPT);
						_t = _t.getFirstChild();
						{
						_loop750:
						do {
							if (_t==null) _t=ASTNULL;
							if ((_t.getType()==Field_ref)) {
								field(_t);
								_t = _retTree;
							}
							else {
								break _loop750;
							}
							
						} while (true);
						}
						_t = __t748;
						_t = _t.getNextSibling();
						break;
					}
					case 3:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
					_t = __t746;
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				case Form_item:
				{
					{
					_loop757:
					do {
						if (_t==null) _t=ASTNULL;
						if ((_t.getType()==Form_item)) {
							AST __t752 = _t;
							AST tmp690_AST_in = (AST)_t;
							match(_t,Form_item);
							_t = _t.getFirstChild();
							field(_t);
							_t = _retTree;
							{
							_loop756:
							do {
								if (_t==null) _t=ASTNULL;
								switch ( _t.getType()) {
								case HELP:
								{
									AST __t754 = _t;
									AST tmp691_AST_in = (AST)_t;
									match(_t,HELP);
									_t = _t.getFirstChild();
									constant(_t);
									_t = _retTree;
									_t = __t754;
									_t = _t.getNextSibling();
									break;
								}
								case VALIDATE:
								{
									AST __t755 = _t;
									AST tmp692_AST_in = (AST)_t;
									match(_t,VALIDATE);
									_t = _t.getFirstChild();
									funargs(_t);
									_t = _retTree;
									_t = __t755;
									_t = _t.getNextSibling();
									break;
								}
								case AUTORETURN:
								{
									AST tmp693_AST_in = (AST)_t;
									match(_t,AUTORETURN);
									_t = _t.getNextSibling();
									break;
								}
								case DISABLEAUTOZAP:
								{
									AST tmp694_AST_in = (AST)_t;
									match(_t,DISABLEAUTOZAP);
									_t = _t.getNextSibling();
									break;
								}
								default:
								{
									break _loop756;
								}
								}
							} while (true);
							}
							_t = __t752;
							_t = _t.getNextSibling();
						}
						else {
							break _loop757;
						}
						
					} while (true);
					}
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t744;
				_t = _t.getNextSibling();
				break;
			}
			case EOF:
			case PERIOD:
			case CONTEXTHELPID:
			case TOOLTIP:
			case WITH:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			break;
		}
		case EOF:
		case PERIOD:
		case CONTEXTHELPID:
		case TOOLTIP:
		case WITH:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop759:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==WITH)) {
				display_with(_t);
				_t = _retTree;
			}
			else {
				break _loop759;
			}
			
		} while (true);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case TOOLTIP:
		{
			tooltip_expr(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case CONTEXTHELPID:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case CONTEXTHELPID:
		{
			AST __t762 = _t;
			AST tmp695_AST_in = (AST)_t;
			match(_t,CONTEXTHELPID);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t762;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t722;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void definebufferstate(AST _t) throws RecognitionException {
		
		AST definebufferstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST id = null;
		AST rec = null;
		
		AST __t764 = _t;
		AST tmp696_AST_in = (AST)_t;
		match(_t,DEFINE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NEW:
		{
			AST __t766 = _t;
			AST tmp697_AST_in = (AST)_t;
			match(_t,NEW);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case GLOBAL:
			{
				AST tmp698_AST_in = (AST)_t;
				match(_t,GLOBAL);
				_t = _t.getNextSibling();
				break;
			}
			case SHARED:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp699_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			_t = __t766;
			_t = _t.getNextSibling();
			break;
		}
		case SHARED:
		{
			AST tmp700_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			break;
		}
		case BUFFER:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp701_AST_in = (AST)_t;
		match(_t,BUFFER);
		_t = _t.getNextSibling();
		id = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		AST tmp702_AST_in = (AST)_t;
		match(_t,FOR);
		_t = _t.getNextSibling();
		rec = (AST)_t;
		match(_t,RECORD_NAME);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case PRESELECT:
		{
			AST tmp703_AST_in = (AST)_t;
			match(_t,PRESELECT);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case COLUMNLABEL:
		case FIELDS:
		case LABEL:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case COLUMNLABEL:
		case LABEL:
		{
			label_constant(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case FIELDS:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case FIELDS:
		{
			AST __t771 = _t;
			AST tmp704_AST_in = (AST)_t;
			match(_t,FIELDS);
			_t = _t.getFirstChild();
			{
			_loop773:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==Field_ref)) {
					field(_t);
					_t = _retTree;
				}
				else {
					break _loop773;
				}
				
			} while (true);
			}
			_t = __t771;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t764;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void definebuttonstate(AST _t) throws RecognitionException {
		
		AST definebuttonstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST id = null;
		
		AST __t775 = _t;
		AST tmp705_AST_in = (AST)_t;
		match(_t,DEFINE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NEW:
		{
			AST __t777 = _t;
			AST tmp706_AST_in = (AST)_t;
			match(_t,NEW);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case GLOBAL:
			{
				AST tmp707_AST_in = (AST)_t;
				match(_t,GLOBAL);
				_t = _t.getNextSibling();
				break;
			}
			case SHARED:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp708_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			_t = __t777;
			_t = _t.getNextSibling();
			break;
		}
		case SHARED:
		{
			AST tmp709_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			break;
		}
		case BUTTON:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp710_AST_in = (AST)_t;
		match(_t,BUTTON);
		_t = _t.getNextSibling();
		id = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		{
		_loop800:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case AUTOGO:
			{
				AST tmp711_AST_in = (AST)_t;
				match(_t,AUTOGO);
				_t = _t.getNextSibling();
				break;
			}
			case AUTOENDKEY:
			{
				AST tmp712_AST_in = (AST)_t;
				match(_t,AUTOENDKEY);
				_t = _t.getNextSibling();
				break;
			}
			case DEFAULT:
			{
				AST tmp713_AST_in = (AST)_t;
				match(_t,DEFAULT);
				_t = _t.getNextSibling();
				break;
			}
			case BGCOLOR:
			case DCOLOR:
			case FGCOLOR:
			case PFCOLOR:
			{
				color_expr(_t);
				_t = _retTree;
				break;
			}
			case CONTEXTHELPID:
			{
				AST __t780 = _t;
				AST tmp714_AST_in = (AST)_t;
				match(_t,CONTEXTHELPID);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t780;
				_t = _t.getNextSibling();
				break;
			}
			case DROPTARGET:
			{
				AST tmp715_AST_in = (AST)_t;
				match(_t,DROPTARGET);
				_t = _t.getNextSibling();
				break;
			}
			case FONT:
			{
				AST __t781 = _t;
				AST tmp716_AST_in = (AST)_t;
				match(_t,FONT);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t781;
				_t = _t.getNextSibling();
				break;
			}
			case IMAGEDOWN:
			{
				AST __t782 = _t;
				AST tmp717_AST_in = (AST)_t;
				match(_t,IMAGEDOWN);
				_t = _t.getFirstChild();
				{
				int _cnt784=0;
				_loop784:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_tokenSet_9.member(_t.getType()))) {
						imagephrase_opt(_t);
						_t = _retTree;
					}
					else {
						if ( _cnt784>=1 ) { break _loop784; } else {throw new NoViableAltException(_t);}
					}
					
					_cnt784++;
				} while (true);
				}
				_t = __t782;
				_t = _t.getNextSibling();
				break;
			}
			case IMAGE:
			{
				AST __t785 = _t;
				AST tmp718_AST_in = (AST)_t;
				match(_t,IMAGE);
				_t = _t.getFirstChild();
				{
				int _cnt787=0;
				_loop787:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_tokenSet_9.member(_t.getType()))) {
						imagephrase_opt(_t);
						_t = _retTree;
					}
					else {
						if ( _cnt787>=1 ) { break _loop787; } else {throw new NoViableAltException(_t);}
					}
					
					_cnt787++;
				} while (true);
				}
				_t = __t785;
				_t = _t.getNextSibling();
				break;
			}
			case IMAGEUP:
			{
				AST __t788 = _t;
				AST tmp719_AST_in = (AST)_t;
				match(_t,IMAGEUP);
				_t = _t.getFirstChild();
				{
				int _cnt790=0;
				_loop790:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_tokenSet_9.member(_t.getType()))) {
						imagephrase_opt(_t);
						_t = _retTree;
					}
					else {
						if ( _cnt790>=1 ) { break _loop790; } else {throw new NoViableAltException(_t);}
					}
					
					_cnt790++;
				} while (true);
				}
				_t = __t788;
				_t = _t.getNextSibling();
				break;
			}
			case IMAGEINSENSITIVE:
			{
				AST __t791 = _t;
				AST tmp720_AST_in = (AST)_t;
				match(_t,IMAGEINSENSITIVE);
				_t = _t.getFirstChild();
				{
				int _cnt793=0;
				_loop793:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_tokenSet_9.member(_t.getType()))) {
						imagephrase_opt(_t);
						_t = _retTree;
					}
					else {
						if ( _cnt793>=1 ) { break _loop793; } else {throw new NoViableAltException(_t);}
					}
					
					_cnt793++;
				} while (true);
				}
				_t = __t791;
				_t = _t.getNextSibling();
				break;
			}
			case MOUSEPOINTER:
			{
				AST __t794 = _t;
				AST tmp721_AST_in = (AST)_t;
				match(_t,MOUSEPOINTER);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t794;
				_t = _t.getNextSibling();
				break;
			}
			case COLUMNLABEL:
			case LABEL:
			{
				label_constant(_t);
				_t = _retTree;
				break;
			}
			case LIKE:
			{
				AST __t795 = _t;
				AST tmp722_AST_in = (AST)_t;
				match(_t,LIKE);
				_t = _t.getFirstChild();
				field(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case VALIDATE:
				{
					AST tmp723_AST_in = (AST)_t;
					match(_t,VALIDATE);
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t795;
				_t = _t.getNextSibling();
				break;
			}
			case FLATBUTTON:
			{
				AST tmp724_AST_in = (AST)_t;
				match(_t,FLATBUTTON);
				_t = _t.getNextSibling();
				break;
			}
			case NOFOCUS:
			{
				AST __t797 = _t;
				AST tmp725_AST_in = (AST)_t;
				match(_t,NOFOCUS);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case FLATBUTTON:
				{
					AST tmp726_AST_in = (AST)_t;
					match(_t,FLATBUTTON);
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t797;
				_t = _t.getNextSibling();
				break;
			}
			case NOCONVERT3DCOLORS:
			{
				AST tmp727_AST_in = (AST)_t;
				match(_t,NOCONVERT3DCOLORS);
				_t = _t.getNextSibling();
				break;
			}
			case TOOLTIP:
			{
				tooltip_expr(_t);
				_t = _retTree;
				break;
			}
			case SIZE:
			case SIZECHARS:
			case SIZEPIXELS:
			{
				sizephrase(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case MARGINEXTRA:
				{
					AST tmp728_AST_in = (AST)_t;
					match(_t,MARGINEXTRA);
					_t = _t.getNextSibling();
					break;
				}
				case EOF:
				case PERIOD:
				case AUTOENDKEY:
				case AUTOGO:
				case BGCOLOR:
				case COLUMNLABEL:
				case CONTEXTHELPID:
				case DCOLOR:
				case DEFAULT:
				case DROPTARGET:
				case FGCOLOR:
				case FLATBUTTON:
				case FONT:
				case IMAGE:
				case IMAGEDOWN:
				case IMAGEINSENSITIVE:
				case IMAGEUP:
				case LABEL:
				case LIKE:
				case MOUSEPOINTER:
				case NOCONVERT3DCOLORS:
				case NOFOCUS:
				case PFCOLOR:
				case SIZE:
				case SIZECHARS:
				case SIZEPIXELS:
				case TOOLTIP:
				case TRIGGERS:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				break;
			}
			default:
			{
				break _loop800;
			}
			}
		} while (true);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case TRIGGERS:
		{
			triggerphrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t775;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void definedatasetstate(AST _t) throws RecognitionException {
		
		AST definedatasetstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t803 = _t;
		AST tmp729_AST_in = (AST)_t;
		match(_t,DEFINE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NEW:
		{
			AST __t805 = _t;
			AST tmp730_AST_in = (AST)_t;
			match(_t,NEW);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case GLOBAL:
			{
				AST tmp731_AST_in = (AST)_t;
				match(_t,GLOBAL);
				_t = _t.getNextSibling();
				break;
			}
			case SHARED:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp732_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			_t = __t805;
			_t = _t.getNextSibling();
			break;
		}
		case SHARED:
		{
			AST tmp733_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			break;
		}
		case DATASET:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp734_AST_in = (AST)_t;
		match(_t,DATASET);
		_t = _t.getNextSibling();
		AST tmp735_AST_in = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		AST tmp736_AST_in = (AST)_t;
		match(_t,FOR);
		_t = _t.getNextSibling();
		AST tmp737_AST_in = (AST)_t;
		match(_t,RECORD_NAME);
		_t = _t.getNextSibling();
		{
		_loop808:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==COMMA)) {
				AST tmp738_AST_in = (AST)_t;
				match(_t,COMMA);
				_t = _t.getNextSibling();
				AST tmp739_AST_in = (AST)_t;
				match(_t,RECORD_NAME);
				_t = _t.getNextSibling();
			}
			else {
				break _loop808;
			}
			
		} while (true);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case DATARELATION:
		{
			data_relation(_t);
			_t = _retTree;
			{
			_loop812:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==COMMA||_t.getType()==DATARELATION)) {
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case COMMA:
					{
						AST tmp740_AST_in = (AST)_t;
						match(_t,COMMA);
						_t = _t.getNextSibling();
						break;
					}
					case DATARELATION:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
					data_relation(_t);
					_t = _retTree;
				}
				else {
					break _loop812;
				}
				
			} while (true);
			}
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t803;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void definedatasourcestate(AST _t) throws RecognitionException {
		
		AST definedatasourcestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t823 = _t;
		AST tmp741_AST_in = (AST)_t;
		match(_t,DEFINE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NEW:
		{
			AST __t825 = _t;
			AST tmp742_AST_in = (AST)_t;
			match(_t,NEW);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case GLOBAL:
			{
				AST tmp743_AST_in = (AST)_t;
				match(_t,GLOBAL);
				_t = _t.getNextSibling();
				break;
			}
			case SHARED:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp744_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			_t = __t825;
			_t = _t.getNextSibling();
			break;
		}
		case SHARED:
		{
			AST tmp745_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			break;
		}
		case DATASOURCE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp746_AST_in = (AST)_t;
		match(_t,DATASOURCE);
		_t = _t.getNextSibling();
		AST tmp747_AST_in = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		AST tmp748_AST_in = (AST)_t;
		match(_t,FOR);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case QUERY:
		{
			AST __t828 = _t;
			AST tmp749_AST_in = (AST)_t;
			match(_t,QUERY);
			_t = _t.getFirstChild();
			AST tmp750_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			_t = __t828;
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		case COMMA:
		case RECORD_NAME:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case RECORD_NAME:
		{
			source_buffer_phrase(_t);
			_t = _retTree;
			break;
		}
		case 3:
		case COMMA:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop831:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==COMMA)) {
				AST tmp751_AST_in = (AST)_t;
				match(_t,COMMA);
				_t = _t.getNextSibling();
				source_buffer_phrase(_t);
				_t = _retTree;
			}
			else {
				break _loop831;
			}
			
		} while (true);
		}
		_t = __t823;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void defineframestate(AST _t) throws RecognitionException {
		
		AST defineframestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST id = null;
		
		AST __t839 = _t;
		AST tmp752_AST_in = (AST)_t;
		match(_t,DEFINE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NEW:
		{
			AST __t841 = _t;
			AST tmp753_AST_in = (AST)_t;
			match(_t,NEW);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case GLOBAL:
			{
				AST tmp754_AST_in = (AST)_t;
				match(_t,GLOBAL);
				_t = _t.getNextSibling();
				break;
			}
			case SHARED:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp755_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			_t = __t841;
			_t = _t.getNextSibling();
			break;
		}
		case SHARED:
		{
			AST tmp756_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			break;
		}
		case FRAME:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp757_AST_in = (AST)_t;
		match(_t,FRAME);
		_t = _t.getNextSibling();
		id = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		{
		_loop844:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==Form_item)) {
				form_item(_t);
				_t = _retTree;
			}
			else {
				break _loop844;
			}
			
		} while (true);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case HEADER:
		{
			AST __t846 = _t;
			AST tmp758_AST_in = (AST)_t;
			match(_t,HEADER);
			_t = _t.getFirstChild();
			{
			int _cnt848=0;
			_loop848:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==Form_item)) {
					display_item(_t);
					_t = _retTree;
				}
				else {
					if ( _cnt848>=1 ) { break _loop848; } else {throw new NoViableAltException(_t);}
				}
				
				_cnt848++;
			} while (true);
			}
			_t = __t846;
			_t = _t.getNextSibling();
			break;
		}
		case BACKGROUND:
		{
			AST __t849 = _t;
			AST tmp759_AST_in = (AST)_t;
			match(_t,BACKGROUND);
			_t = _t.getFirstChild();
			{
			int _cnt851=0;
			_loop851:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==Form_item)) {
					display_item(_t);
					_t = _retTree;
				}
				else {
					if ( _cnt851>=1 ) { break _loop851; } else {throw new NoViableAltException(_t);}
				}
				
				_cnt851++;
			} while (true);
			}
			_t = __t849;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case EXCEPT:
		case WITH:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case EXCEPT:
		{
			AST __t853 = _t;
			AST tmp760_AST_in = (AST)_t;
			match(_t,EXCEPT);
			_t = _t.getFirstChild();
			{
			_loop855:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==Field_ref)) {
					field(_t);
					_t = _retTree;
				}
				else {
					break _loop855;
				}
				
			} while (true);
			}
			_t = __t853;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case WITH:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case WITH:
		{
			framephrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t839;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void defineimagestate(AST _t) throws RecognitionException {
		
		AST defineimagestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST id = null;
		
		AST __t858 = _t;
		AST tmp761_AST_in = (AST)_t;
		match(_t,DEFINE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NEW:
		{
			AST __t860 = _t;
			AST tmp762_AST_in = (AST)_t;
			match(_t,NEW);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case GLOBAL:
			{
				AST tmp763_AST_in = (AST)_t;
				match(_t,GLOBAL);
				_t = _t.getNextSibling();
				break;
			}
			case SHARED:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp764_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			_t = __t860;
			_t = _t.getNextSibling();
			break;
		}
		case SHARED:
		{
			AST tmp765_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			break;
		}
		case IMAGE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp766_AST_in = (AST)_t;
		match(_t,IMAGE);
		_t = _t.getNextSibling();
		id = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		{
		_loop867:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case LIKE:
			{
				AST __t863 = _t;
				AST tmp767_AST_in = (AST)_t;
				match(_t,LIKE);
				_t = _t.getFirstChild();
				field(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case VALIDATE:
				{
					AST tmp768_AST_in = (AST)_t;
					match(_t,VALIDATE);
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t863;
				_t = _t.getNextSibling();
				break;
			}
			case FILE:
			case FROM:
			case IMAGESIZE:
			case IMAGESIZECHARS:
			case IMAGESIZEPIXELS:
			{
				imagephrase_opt(_t);
				_t = _retTree;
				break;
			}
			case SIZE:
			case SIZECHARS:
			case SIZEPIXELS:
			{
				sizephrase(_t);
				_t = _retTree;
				break;
			}
			case BGCOLOR:
			case DCOLOR:
			case FGCOLOR:
			case PFCOLOR:
			{
				color_expr(_t);
				_t = _retTree;
				break;
			}
			case CONVERT3DCOLORS:
			{
				AST tmp769_AST_in = (AST)_t;
				match(_t,CONVERT3DCOLORS);
				_t = _t.getNextSibling();
				break;
			}
			case TOOLTIP:
			{
				tooltip_expr(_t);
				_t = _retTree;
				break;
			}
			case STRETCHTOFIT:
			{
				AST __t865 = _t;
				AST tmp770_AST_in = (AST)_t;
				match(_t,STRETCHTOFIT);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case RETAINSHAPE:
				{
					AST tmp771_AST_in = (AST)_t;
					match(_t,RETAINSHAPE);
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t865;
				_t = _t.getNextSibling();
				break;
			}
			case TRANSPARENT:
			{
				AST tmp772_AST_in = (AST)_t;
				match(_t,TRANSPARENT);
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				break _loop867;
			}
			}
		} while (true);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case TRIGGERS:
		{
			triggerphrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t858;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void definemenustate(AST _t) throws RecognitionException {
		
		AST definemenustate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST id = null;
		
		AST __t870 = _t;
		AST tmp773_AST_in = (AST)_t;
		match(_t,DEFINE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NEW:
		{
			AST __t872 = _t;
			AST tmp774_AST_in = (AST)_t;
			match(_t,NEW);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case GLOBAL:
			{
				AST tmp775_AST_in = (AST)_t;
				match(_t,GLOBAL);
				_t = _t.getNextSibling();
				break;
			}
			case SHARED:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp776_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			_t = __t872;
			_t = _t.getNextSibling();
			break;
		}
		case SHARED:
		{
			AST tmp777_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			break;
		}
		case MENU:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp778_AST_in = (AST)_t;
		match(_t,MENU);
		_t = _t.getNextSibling();
		id = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		{
		_loop875:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_10.member(_t.getType()))) {
				menu_opt(_t);
				_t = _retTree;
			}
			else {
				break _loop875;
			}
			
		} while (true);
		}
		{
		_loop877:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_11.member(_t.getType()))) {
				menu_list_item(_t);
				_t = _retTree;
			}
			else {
				break _loop877;
			}
			
		} while (true);
		}
		state_end(_t);
		_t = _retTree;
		_t = __t870;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void defineparameterstate(AST _t) throws RecognitionException {
		
		AST defineparameterstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST def = null;
		AST id = null;
		AST vid = null;
		
		AST __t904 = _t;
		def = _t==ASTNULL ? null :(AST)_t;
		match(_t,DEFINE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NEW:
		{
			AST __t906 = _t;
			AST tmp779_AST_in = (AST)_t;
			match(_t,NEW);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case GLOBAL:
			{
				AST tmp780_AST_in = (AST)_t;
				match(_t,GLOBAL);
				_t = _t.getNextSibling();
				break;
			}
			case SHARED:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp781_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			_t = __t906;
			_t = _t.getNextSibling();
			break;
		}
		case SHARED:
		{
			AST tmp782_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			break;
		}
		case INPUT:
		case INPUTOUTPUT:
		case OUTPUT:
		case PARAMETER:
		case RETURN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case PARAMETER:
		{
			AST tmp783_AST_in = (AST)_t;
			match(_t,PARAMETER);
			_t = _t.getNextSibling();
			AST tmp784_AST_in = (AST)_t;
			match(_t,BUFFER);
			_t = _t.getNextSibling();
			AST tmp785_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			AST tmp786_AST_in = (AST)_t;
			match(_t,FOR);
			_t = _t.getNextSibling();
			AST tmp787_AST_in = (AST)_t;
			match(_t,RECORD_NAME);
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case PRESELECT:
			{
				AST tmp788_AST_in = (AST)_t;
				match(_t,PRESELECT);
				_t = _t.getNextSibling();
				break;
			}
			case EOF:
			case PERIOD:
			case COLUMNLABEL:
			case FIELDS:
			case LABEL:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case COLUMNLABEL:
			case LABEL:
			{
				label_constant(_t);
				_t = _retTree;
				break;
			}
			case EOF:
			case PERIOD:
			case FIELDS:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case FIELDS:
			{
				AST __t912 = _t;
				AST tmp789_AST_in = (AST)_t;
				match(_t,FIELDS);
				_t = _t.getFirstChild();
				{
				_loop914:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_t.getType()==Field_ref)) {
						field(_t);
						_t = _retTree;
					}
					else {
						break _loop914;
					}
					
				} while (true);
				}
				_t = __t912;
				_t = _t.getNextSibling();
				break;
			}
			case EOF:
			case PERIOD:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			break;
		}
		case INPUT:
		case INPUTOUTPUT:
		case OUTPUT:
		case RETURN:
		{
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case INPUT:
			{
				AST tmp790_AST_in = (AST)_t;
				match(_t,INPUT);
				_t = _t.getNextSibling();
				break;
			}
			case OUTPUT:
			{
				AST tmp791_AST_in = (AST)_t;
				match(_t,OUTPUT);
				_t = _t.getNextSibling();
				break;
			}
			case INPUTOUTPUT:
			{
				AST tmp792_AST_in = (AST)_t;
				match(_t,INPUTOUTPUT);
				_t = _t.getNextSibling();
				break;
			}
			case RETURN:
			{
				AST tmp793_AST_in = (AST)_t;
				match(_t,RETURN);
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp794_AST_in = (AST)_t;
			match(_t,PARAMETER);
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case TABLE:
			{
				AST tmp795_AST_in = (AST)_t;
				match(_t,TABLE);
				_t = _t.getNextSibling();
				AST tmp796_AST_in = (AST)_t;
				match(_t,FOR);
				_t = _t.getNextSibling();
				record_name(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case APPEND:
				{
					AST tmp797_AST_in = (AST)_t;
					match(_t,APPEND);
					_t = _t.getNextSibling();
					break;
				}
				case EOF:
				case PERIOD:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				break;
			}
			case TABLEHANDLE:
			{
				AST tmp798_AST_in = (AST)_t;
				match(_t,TABLEHANDLE);
				_t = _t.getNextSibling();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case FOR:
				{
					AST tmp799_AST_in = (AST)_t;
					match(_t,FOR);
					_t = _t.getNextSibling();
					break;
				}
				case ID:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				id = (AST)_t;
				match(_t,ID);
				_t = _t.getNextSibling();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case APPEND:
				{
					AST tmp800_AST_in = (AST)_t;
					match(_t,APPEND);
					_t = _t.getNextSibling();
					break;
				}
				case EOF:
				case PERIOD:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				break;
			}
			case DATASET:
			{
				AST tmp801_AST_in = (AST)_t;
				match(_t,DATASET);
				_t = _t.getNextSibling();
				AST tmp802_AST_in = (AST)_t;
				match(_t,FOR);
				_t = _t.getNextSibling();
				AST tmp803_AST_in = (AST)_t;
				match(_t,ID);
				_t = _t.getNextSibling();
				{
				_loop921:
				do {
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case APPEND:
					{
						AST tmp804_AST_in = (AST)_t;
						match(_t,APPEND);
						_t = _t.getNextSibling();
						break;
					}
					case BYVALUE:
					{
						AST tmp805_AST_in = (AST)_t;
						match(_t,BYVALUE);
						_t = _t.getNextSibling();
						break;
					}
					default:
					{
						break _loop921;
					}
					}
				} while (true);
				}
				break;
			}
			case DATASETHANDLE:
			{
				AST tmp806_AST_in = (AST)_t;
				match(_t,DATASETHANDLE);
				_t = _t.getNextSibling();
				AST tmp807_AST_in = (AST)_t;
				match(_t,ID);
				_t = _t.getNextSibling();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case BYVALUE:
				{
					AST tmp808_AST_in = (AST)_t;
					match(_t,BYVALUE);
					_t = _t.getNextSibling();
					break;
				}
				case EOF:
				case PERIOD:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				break;
			}
			case ID:
			{
				vid = (AST)_t;
				match(_t,ID);
				_t = _t.getNextSibling();
				if ( inputState.guessing==0 ) {
					tpSupport.define(def, vid);
				}
				defineparam_var(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case TRIGGERS:
				{
					triggerphrase(_t);
					_t = _retTree;
					break;
				}
				case EOF:
				case PERIOD:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		if ( inputState.guessing==0 ) {
			tpSupport.defineEnd();
		}
		_t = __t904;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void definequerystate(AST _t) throws RecognitionException {
		
		AST definequerystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST id = null;
		
		AST __t939 = _t;
		AST tmp809_AST_in = (AST)_t;
		match(_t,DEFINE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NEW:
		{
			AST __t941 = _t;
			AST tmp810_AST_in = (AST)_t;
			match(_t,NEW);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case GLOBAL:
			{
				AST tmp811_AST_in = (AST)_t;
				match(_t,GLOBAL);
				_t = _t.getNextSibling();
				break;
			}
			case SHARED:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp812_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			_t = __t941;
			_t = _t.getNextSibling();
			break;
		}
		case SHARED:
		{
			AST tmp813_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			break;
		}
		case QUERY:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp814_AST_in = (AST)_t;
		match(_t,QUERY);
		_t = _t.getNextSibling();
		id = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		AST tmp815_AST_in = (AST)_t;
		match(_t,FOR);
		_t = _t.getNextSibling();
		record_name(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case EXCEPT:
		case FIELDS:
		{
			record_fields(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case CACHE:
		case RCODEINFORMATION:
		case SCROLLING:
		case COMMA:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop946:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==COMMA)) {
				AST tmp816_AST_in = (AST)_t;
				match(_t,COMMA);
				_t = _t.getNextSibling();
				record_name(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case EXCEPT:
				case FIELDS:
				{
					record_fields(_t);
					_t = _retTree;
					break;
				}
				case EOF:
				case PERIOD:
				case CACHE:
				case RCODEINFORMATION:
				case SCROLLING:
				case COMMA:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
			}
			else {
				break _loop946;
			}
			
		} while (true);
		}
		{
		_loop949:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case CACHE:
			{
				AST __t948 = _t;
				AST tmp817_AST_in = (AST)_t;
				match(_t,CACHE);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t948;
				_t = _t.getNextSibling();
				break;
			}
			case SCROLLING:
			{
				AST tmp818_AST_in = (AST)_t;
				match(_t,SCROLLING);
				_t = _t.getNextSibling();
				break;
			}
			case RCODEINFORMATION:
			{
				AST tmp819_AST_in = (AST)_t;
				match(_t,RCODEINFORMATION);
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				break _loop949;
			}
			}
		} while (true);
		}
		state_end(_t);
		_t = _retTree;
		_t = __t939;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void definerectanglestate(AST _t) throws RecognitionException {
		
		AST definerectanglestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST id = null;
		
		AST __t951 = _t;
		AST tmp820_AST_in = (AST)_t;
		match(_t,DEFINE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NEW:
		{
			AST __t953 = _t;
			AST tmp821_AST_in = (AST)_t;
			match(_t,NEW);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case GLOBAL:
			{
				AST tmp822_AST_in = (AST)_t;
				match(_t,GLOBAL);
				_t = _t.getNextSibling();
				break;
			}
			case SHARED:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp823_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			_t = __t953;
			_t = _t.getNextSibling();
			break;
		}
		case SHARED:
		{
			AST tmp824_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			break;
		}
		case RECTANGLE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp825_AST_in = (AST)_t;
		match(_t,RECTANGLE);
		_t = _t.getNextSibling();
		id = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		{
		_loop960:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case NOFILL:
			{
				AST tmp826_AST_in = (AST)_t;
				match(_t,NOFILL);
				_t = _t.getNextSibling();
				break;
			}
			case EDGECHARS:
			{
				AST __t956 = _t;
				AST tmp827_AST_in = (AST)_t;
				match(_t,EDGECHARS);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t956;
				_t = _t.getNextSibling();
				break;
			}
			case EDGEPIXELS:
			{
				AST __t957 = _t;
				AST tmp828_AST_in = (AST)_t;
				match(_t,EDGEPIXELS);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t957;
				_t = _t.getNextSibling();
				break;
			}
			case BGCOLOR:
			case DCOLOR:
			case FGCOLOR:
			case PFCOLOR:
			{
				color_expr(_t);
				_t = _retTree;
				break;
			}
			case GRAPHICEDGE:
			{
				AST tmp829_AST_in = (AST)_t;
				match(_t,GRAPHICEDGE);
				_t = _t.getNextSibling();
				break;
			}
			case LIKE:
			{
				AST __t958 = _t;
				AST tmp830_AST_in = (AST)_t;
				match(_t,LIKE);
				_t = _t.getFirstChild();
				field(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case VALIDATE:
				{
					AST tmp831_AST_in = (AST)_t;
					match(_t,VALIDATE);
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t958;
				_t = _t.getNextSibling();
				break;
			}
			case SIZE:
			case SIZECHARS:
			case SIZEPIXELS:
			{
				sizephrase(_t);
				_t = _retTree;
				break;
			}
			case TOOLTIP:
			{
				tooltip_expr(_t);
				_t = _retTree;
				break;
			}
			default:
			{
				break _loop960;
			}
			}
		} while (true);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case TRIGGERS:
		{
			triggerphrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t951;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void definestreamstate(AST _t) throws RecognitionException {
		
		AST definestreamstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST id = null;
		
		AST __t963 = _t;
		AST tmp832_AST_in = (AST)_t;
		match(_t,DEFINE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NEW:
		{
			AST __t965 = _t;
			AST tmp833_AST_in = (AST)_t;
			match(_t,NEW);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case GLOBAL:
			{
				AST tmp834_AST_in = (AST)_t;
				match(_t,GLOBAL);
				_t = _t.getNextSibling();
				break;
			}
			case SHARED:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp835_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			_t = __t965;
			_t = _t.getNextSibling();
			break;
		}
		case SHARED:
		{
			AST tmp836_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			break;
		}
		case STREAM:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp837_AST_in = (AST)_t;
		match(_t,STREAM);
		_t = _t.getNextSibling();
		id = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		state_end(_t);
		_t = _retTree;
		_t = __t963;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void definesubmenustate(AST _t) throws RecognitionException {
		
		AST definesubmenustate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST id = null;
		
		AST __t968 = _t;
		AST tmp838_AST_in = (AST)_t;
		match(_t,DEFINE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NEW:
		{
			AST __t970 = _t;
			AST tmp839_AST_in = (AST)_t;
			match(_t,NEW);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case GLOBAL:
			{
				AST tmp840_AST_in = (AST)_t;
				match(_t,GLOBAL);
				_t = _t.getNextSibling();
				break;
			}
			case SHARED:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp841_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			_t = __t970;
			_t = _t.getNextSibling();
			break;
		}
		case SHARED:
		{
			AST tmp842_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			break;
		}
		case SUBMENU:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp843_AST_in = (AST)_t;
		match(_t,SUBMENU);
		_t = _t.getNextSibling();
		id = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		{
		_loop973:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_10.member(_t.getType()))) {
				menu_opt(_t);
				_t = _retTree;
			}
			else {
				break _loop973;
			}
			
		} while (true);
		}
		{
		_loop975:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_11.member(_t.getType()))) {
				menu_list_item(_t);
				_t = _retTree;
			}
			else {
				break _loop975;
			}
			
		} while (true);
		}
		state_end(_t);
		_t = _retTree;
		_t = __t968;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void definetemptablestate(AST _t) throws RecognitionException {
		
		AST definetemptablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST def = null;
		AST id = null;
		
		AST __t977 = _t;
		def = _t==ASTNULL ? null :(AST)_t;
		match(_t,DEFINE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NEW:
		{
			AST __t979 = _t;
			AST tmp844_AST_in = (AST)_t;
			match(_t,NEW);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case GLOBAL:
			{
				AST tmp845_AST_in = (AST)_t;
				match(_t,GLOBAL);
				_t = _t.getNextSibling();
				break;
			}
			case SHARED:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp846_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			_t = __t979;
			_t = _t.getNextSibling();
			break;
		}
		case SHARED:
		{
			AST tmp847_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			break;
		}
		case TEMPTABLE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp848_AST_in = (AST)_t;
		match(_t,TEMPTABLE);
		_t = _t.getNextSibling();
		id = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		if ( inputState.guessing==0 ) {
			tpSupport.define(def, id);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case UNDO:
		{
			AST tmp849_AST_in = (AST)_t;
			match(_t,UNDO);
			_t = _t.getNextSibling();
			if ( inputState.guessing==0 ) {
				tpSupport.undo();
			}
			break;
		}
		case NOUNDO:
		{
			AST tmp850_AST_in = (AST)_t;
			match(_t,NOUNDO);
			_t = _t.getNextSibling();
			if ( inputState.guessing==0 ) {
				tpSupport.noundo();
			}
			break;
		}
		case EOF:
		case PERIOD:
		case COLUMNLABEL:
		case FIELD:
		case INDEX:
		case LABEL:
		case LIKE:
		case RCODEINFORMATION:
		case BEFORETABLE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case LIKE:
		{
			def_table_like(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case COLUMNLABEL:
		case FIELD:
		case INDEX:
		case LABEL:
		case RCODEINFORMATION:
		case BEFORETABLE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case COLUMNLABEL:
		case LABEL:
		{
			label_constant(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case FIELD:
		case INDEX:
		case RCODEINFORMATION:
		case BEFORETABLE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case BEFORETABLE:
		{
			AST __t985 = _t;
			AST tmp851_AST_in = (AST)_t;
			match(_t,BEFORETABLE);
			_t = _t.getFirstChild();
			AST tmp852_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			_t = __t985;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case FIELD:
		case INDEX:
		case RCODEINFORMATION:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case RCODEINFORMATION:
		{
			AST tmp853_AST_in = (AST)_t;
			match(_t,RCODEINFORMATION);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case FIELD:
		case INDEX:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop988:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==FIELD)) {
				def_table_field(_t);
				_t = _retTree;
			}
			else {
				break _loop988;
			}
			
		} while (true);
		}
		{
		_loop999:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==INDEX)) {
				AST __t990 = _t;
				AST tmp854_AST_in = (AST)_t;
				match(_t,INDEX);
				_t = _t.getFirstChild();
				AST tmp855_AST_in = (AST)_t;
				match(_t,ID);
				_t = _t.getNextSibling();
				{
				_loop994:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_tokenSet_12.member(_t.getType()))) {
						{
						if (_t==null) _t=ASTNULL;
						switch ( _t.getType()) {
						case AS:
						{
							AST tmp856_AST_in = (AST)_t;
							match(_t,AS);
							_t = _t.getNextSibling();
							break;
						}
						case IS:
						{
							AST tmp857_AST_in = (AST)_t;
							match(_t,IS);
							_t = _t.getNextSibling();
							break;
						}
						case PRIMARY:
						case UNIQUE:
						case WORDINDEX:
						{
							break;
						}
						default:
						{
							throw new NoViableAltException(_t);
						}
						}
						}
						{
						if (_t==null) _t=ASTNULL;
						switch ( _t.getType()) {
						case UNIQUE:
						{
							AST tmp858_AST_in = (AST)_t;
							match(_t,UNIQUE);
							_t = _t.getNextSibling();
							break;
						}
						case PRIMARY:
						{
							AST tmp859_AST_in = (AST)_t;
							match(_t,PRIMARY);
							_t = _t.getNextSibling();
							break;
						}
						case WORDINDEX:
						{
							AST tmp860_AST_in = (AST)_t;
							match(_t,WORDINDEX);
							_t = _t.getNextSibling();
							break;
						}
						default:
						{
							throw new NoViableAltException(_t);
						}
						}
						}
					}
					else {
						break _loop994;
					}
					
				} while (true);
				}
				{
				int _cnt998=0;
				_loop998:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_t.getType()==ID)) {
						AST tmp861_AST_in = (AST)_t;
						match(_t,ID);
						_t = _t.getNextSibling();
						{
						_loop997:
						do {
							if (_t==null) _t=ASTNULL;
							switch ( _t.getType()) {
							case ASCENDING:
							{
								AST tmp862_AST_in = (AST)_t;
								match(_t,ASCENDING);
								_t = _t.getNextSibling();
								break;
							}
							case DESCENDING:
							{
								AST tmp863_AST_in = (AST)_t;
								match(_t,DESCENDING);
								_t = _t.getNextSibling();
								break;
							}
							case CASESENSITIVE:
							{
								AST tmp864_AST_in = (AST)_t;
								match(_t,CASESENSITIVE);
								_t = _t.getNextSibling();
								break;
							}
							default:
							{
								break _loop997;
							}
							}
						} while (true);
						}
					}
					else {
						if ( _cnt998>=1 ) { break _loop998; } else {throw new NoViableAltException(_t);}
					}
					
					_cnt998++;
				} while (true);
				}
				_t = __t990;
				_t = _t.getNextSibling();
			}
			else {
				break _loop999;
			}
			
		} while (true);
		}
		state_end(_t);
		_t = _retTree;
		if ( inputState.guessing==0 ) {
			tpSupport.defineEnd();
		}
		_t = __t977;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void defineworktablestate(AST _t) throws RecognitionException {
		
		AST defineworktablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST def = null;
		AST id = null;
		
		AST __t1013 = _t;
		def = _t==ASTNULL ? null :(AST)_t;
		match(_t,DEFINE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NEW:
		{
			AST __t1015 = _t;
			AST tmp865_AST_in = (AST)_t;
			match(_t,NEW);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case GLOBAL:
			{
				AST tmp866_AST_in = (AST)_t;
				match(_t,GLOBAL);
				_t = _t.getNextSibling();
				break;
			}
			case SHARED:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp867_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			_t = __t1015;
			_t = _t.getNextSibling();
			break;
		}
		case SHARED:
		{
			AST tmp868_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			break;
		}
		case WORKTABLE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp869_AST_in = (AST)_t;
		match(_t,WORKTABLE);
		_t = _t.getNextSibling();
		id = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		if ( inputState.guessing==0 ) {
			tpSupport.define(def, id);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOUNDO:
		{
			AST tmp870_AST_in = (AST)_t;
			match(_t,NOUNDO);
			_t = _t.getNextSibling();
			if ( inputState.guessing==0 ) {
				tpSupport.noundo();
			}
			break;
		}
		case EOF:
		case PERIOD:
		case COLUMNLABEL:
		case FIELD:
		case LABEL:
		case LIKE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case LIKE:
		{
			def_table_like(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case COLUMNLABEL:
		case FIELD:
		case LABEL:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case COLUMNLABEL:
		case LABEL:
		{
			label_constant(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case FIELD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop1021:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==FIELD)) {
				def_table_field(_t);
				_t = _retTree;
			}
			else {
				break _loop1021;
			}
			
		} while (true);
		}
		state_end(_t);
		_t = _retTree;
		if ( inputState.guessing==0 ) {
			tpSupport.defineEnd();
		}
		_t = __t1013;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void definevariablestate(AST _t) throws RecognitionException {
		
		AST definevariablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST def = null;
		AST id = null;
		
		AST __t1023 = _t;
		def = _t==ASTNULL ? null :(AST)_t;
		match(_t,DEFINE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NEW:
		{
			AST __t1025 = _t;
			AST tmp871_AST_in = (AST)_t;
			match(_t,NEW);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case GLOBAL:
			{
				AST tmp872_AST_in = (AST)_t;
				match(_t,GLOBAL);
				_t = _t.getNextSibling();
				break;
			}
			case SHARED:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp873_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			_t = __t1025;
			_t = _t.getNextSibling();
			break;
		}
		case SHARED:
		{
			AST tmp874_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			break;
		}
		case VARIABLE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp875_AST_in = (AST)_t;
		match(_t,VARIABLE);
		_t = _t.getNextSibling();
		id = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		if ( inputState.guessing==0 ) {
			tpSupport.define(def, id);
		}
		{
		_loop1028:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_13.member(_t.getType()))) {
				fieldoption(_t);
				_t = _retTree;
			}
			else {
				break _loop1028;
			}
			
		} while (true);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case TRIGGERS:
		{
			triggerphrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		if ( inputState.guessing==0 ) {
			tpSupport.defineEnd();
		}
		_t = __t1023;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void dictionarystate(AST _t) throws RecognitionException {
		
		AST dictionarystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1053 = _t;
		AST tmp876_AST_in = (AST)_t;
		match(_t,DICTIONARY);
		_t = _t.getFirstChild();
		state_end(_t);
		_t = _retTree;
		_t = __t1053;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void deletestate(AST _t) throws RecognitionException {
		
		AST deletestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1031 = _t;
		AST tmp877_AST_in = (AST)_t;
		match(_t,DELETE_KW);
		_t = _t.getFirstChild();
		record_name(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case VALIDATE:
		{
			AST __t1033 = _t;
			AST tmp878_AST_in = (AST)_t;
			match(_t,VALIDATE);
			_t = _t.getFirstChild();
			funargs(_t);
			_t = _retTree;
			_t = __t1033;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp879_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1031;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void deletealiasstate(AST _t) throws RecognitionException {
		
		AST deletealiasstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1036 = _t;
		AST tmp880_AST_in = (AST)_t;
		match(_t,DELETE_KW);
		_t = _t.getFirstChild();
		AST tmp881_AST_in = (AST)_t;
		match(_t,ALIAS);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case ID:
		{
			AST tmp882_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			break;
		}
		case QSTRING:
		{
			AST tmp883_AST_in = (AST)_t;
			match(_t,QSTRING);
			_t = _t.getNextSibling();
			break;
		}
		case VALUE:
		{
			valueexpression(_t);
			_t = _retTree;
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1036;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void deletefromstate(AST _t) throws RecognitionException {
		
		AST deletefromstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2443 = _t;
		AST tmp884_AST_in = (AST)_t;
		match(_t,DELETE_KW);
		_t = _t.getFirstChild();
		AST tmp885_AST_in = (AST)_t;
		match(_t,FROM);
		_t = _t.getNextSibling();
		record_name(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case WHERE:
		{
			AST __t2445 = _t;
			AST tmp886_AST_in = (AST)_t;
			match(_t,WHERE);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case CURRENT:
			{
				AST __t2447 = _t;
				AST tmp887_AST_in = (AST)_t;
				match(_t,CURRENT);
				_t = _t.getFirstChild();
				AST tmp888_AST_in = (AST)_t;
				match(_t,OF);
				_t = _t.getNextSibling();
				AST tmp889_AST_in = (AST)_t;
				match(_t,ID);
				_t = _t.getNextSibling();
				_t = __t2447;
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
				if (_t==null) _t=ASTNULL;
				if ((_tokenSet_14.member(_t.getType()))) {
					sqlexpression(_t);
					_t = _retTree;
				}
			else {
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t2445;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2443;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void deleteobjectstate(AST _t) throws RecognitionException {
		
		AST deleteobjectstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1039 = _t;
		AST tmp890_AST_in = (AST)_t;
		match(_t,DELETE_KW);
		_t = _t.getFirstChild();
		AST tmp891_AST_in = (AST)_t;
		match(_t,OBJECT);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp892_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1039;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void deleteprocedurestate(AST _t) throws RecognitionException {
		
		AST deleteprocedurestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1042 = _t;
		AST tmp893_AST_in = (AST)_t;
		match(_t,DELETE_KW);
		_t = _t.getFirstChild();
		AST tmp894_AST_in = (AST)_t;
		match(_t,PROCEDURE);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp895_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1042;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void deletewidgetstate(AST _t) throws RecognitionException {
		
		AST deletewidgetstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1045 = _t;
		AST tmp896_AST_in = (AST)_t;
		match(_t,DELETE_KW);
		_t = _t.getFirstChild();
		AST tmp897_AST_in = (AST)_t;
		match(_t,WIDGET);
		_t = _t.getNextSibling();
		{
		_loop1047:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==Widget_ref)) {
				gwidget(_t);
				_t = _retTree;
			}
			else {
				break _loop1047;
			}
			
		} while (true);
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1045;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void deletewidgetpoolstate(AST _t) throws RecognitionException {
		
		AST deletewidgetpoolstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1049 = _t;
		AST tmp898_AST_in = (AST)_t;
		match(_t,DELETE_KW);
		_t = _t.getFirstChild();
		AST tmp899_AST_in = (AST)_t;
		match(_t,WIDGETPOOL);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		if ((_tokenSet_4.member(_t.getType()))) {
			expression(_t);
			_t = _retTree;
		}
		else if ((_t.getType()==EOF||_t.getType()==PERIOD||_t.getType()==NOERROR_KW)) {
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp900_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1049;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void disablestate(AST _t) throws RecognitionException {
		
		AST disablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1055 = _t;
		AST tmp901_AST_in = (AST)_t;
		match(_t,DISABLE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case UNLESSHIDDEN:
		{
			AST tmp902_AST_in = (AST)_t;
			match(_t,UNLESSHIDDEN);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case ALL:
		case WITH:
		case Form_item:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case ALL:
		{
			AST __t1058 = _t;
			AST tmp903_AST_in = (AST)_t;
			match(_t,ALL);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case EXCEPT:
			{
				AST __t1060 = _t;
				AST tmp904_AST_in = (AST)_t;
				match(_t,EXCEPT);
				_t = _t.getFirstChild();
				{
				_loop1062:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_t.getType()==Field_ref)) {
						field(_t);
						_t = _retTree;
					}
					else {
						break _loop1062;
					}
					
				} while (true);
				}
				_t = __t1060;
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t1058;
			_t = _t.getNextSibling();
			break;
		}
		case Form_item:
		{
			{
			int _cnt1064=0;
			_loop1064:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==Form_item)) {
					form_item(_t);
					_t = _retTree;
				}
				else {
					if ( _cnt1064>=1 ) { break _loop1064; } else {throw new NoViableAltException(_t);}
				}
				
				_cnt1064++;
			} while (true);
			}
			break;
		}
		case EOF:
		case PERIOD:
		case WITH:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case WITH:
		{
			framephrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1055;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void disabletriggersstate(AST _t) throws RecognitionException {
		
		AST disabletriggersstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1067 = _t;
		AST tmp905_AST_in = (AST)_t;
		match(_t,DISABLE);
		_t = _t.getFirstChild();
		AST tmp906_AST_in = (AST)_t;
		match(_t,TRIGGERS);
		_t = _t.getNextSibling();
		AST tmp907_AST_in = (AST)_t;
		match(_t,FOR);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case DUMP:
		{
			AST tmp908_AST_in = (AST)_t;
			match(_t,DUMP);
			_t = _t.getNextSibling();
			break;
		}
		case LOAD:
		{
			AST tmp909_AST_in = (AST)_t;
			match(_t,LOAD);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp910_AST_in = (AST)_t;
		match(_t,OF);
		_t = _t.getNextSibling();
		record_name(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case ALLOWREPLICATION:
		{
			AST tmp911_AST_in = (AST)_t;
			match(_t,ALLOWREPLICATION);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1067;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void disconnectstate(AST _t) throws RecognitionException {
		
		AST disconnectstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1071 = _t;
		AST tmp912_AST_in = (AST)_t;
		match(_t,DISCONNECT);
		_t = _t.getFirstChild();
		filenameorvalue(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp913_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1071;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void displaystate(AST _t) throws RecognitionException {
		
		AST displaystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1074 = _t;
		AST tmp914_AST_in = (AST)_t;
		match(_t,DISPLAY);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case STREAM:
		{
			stream_name(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case EXCEPT:
		case IN_KW:
		case NOERROR_KW:
		case UNLESSHIDDEN:
		case WITH:
		case Form_item:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case UNLESSHIDDEN:
		{
			AST tmp915_AST_in = (AST)_t;
			match(_t,UNLESSHIDDEN);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case EXCEPT:
		case IN_KW:
		case NOERROR_KW:
		case WITH:
		case Form_item:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop1078:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==Form_item)) {
				display_item(_t);
				_t = _retTree;
			}
			else {
				break _loop1078;
			}
			
		} while (true);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case EXCEPT:
		{
			AST __t1080 = _t;
			AST tmp916_AST_in = (AST)_t;
			match(_t,EXCEPT);
			_t = _t.getFirstChild();
			{
			_loop1082:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==Field_ref)) {
					field(_t);
					_t = _retTree;
				}
				else {
					break _loop1082;
				}
				
			} while (true);
			}
			_t = __t1080;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case IN_KW:
		case NOERROR_KW:
		case WITH:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t1084 = _t;
			AST tmp917_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			AST tmp918_AST_in = (AST)_t;
			match(_t,WINDOW);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t1084;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		case WITH:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop1086:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==WITH)) {
				display_with(_t);
				_t = _retTree;
			}
			else {
				break _loop1086;
			}
			
		} while (true);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp919_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1074;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void downstate(AST _t) throws RecognitionException {
		
		AST downstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1106 = _t;
		AST tmp920_AST_in = (AST)_t;
		match(_t,DOWN);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case STREAM:
		{
			{
			stream_name(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_4.member(_t.getType()))) {
				expression(_t);
				_t = _retTree;
			}
			else if ((_t.getType()==EOF||_t.getType()==PERIOD||_t.getType()==WITH)) {
			}
			else {
				throw new NoViableAltException(_t);
			}
			
			}
			}
			break;
		}
		case EOF:
		case PERIOD:
		case WITH:
		{
			break;
		}
		default:
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_4.member(_t.getType()))) {
				{
				expression(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case STREAM:
				{
					stream_name(_t);
					_t = _retTree;
					break;
				}
				case EOF:
				case PERIOD:
				case WITH:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				}
			}
		else {
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case WITH:
		{
			framephrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1106;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void dropindexstate(AST _t) throws RecognitionException {
		
		AST dropindexstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2449 = _t;
		AST tmp921_AST_in = (AST)_t;
		match(_t,DROP);
		_t = _t.getFirstChild();
		AST tmp922_AST_in = (AST)_t;
		match(_t,INDEX);
		_t = _t.getNextSibling();
		AST tmp923_AST_in = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		state_end(_t);
		_t = _retTree;
		_t = __t2449;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void droptablestate(AST _t) throws RecognitionException {
		
		AST droptablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2451 = _t;
		AST tmp924_AST_in = (AST)_t;
		match(_t,DROP);
		_t = _t.getFirstChild();
		AST tmp925_AST_in = (AST)_t;
		match(_t,TABLE);
		_t = _t.getNextSibling();
		record_name(_t);
		_t = _retTree;
		state_end(_t);
		_t = _retTree;
		_t = __t2451;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void dropviewstate(AST _t) throws RecognitionException {
		
		AST dropviewstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2453 = _t;
		AST tmp926_AST_in = (AST)_t;
		match(_t,DROP);
		_t = _t.getFirstChild();
		AST tmp927_AST_in = (AST)_t;
		match(_t,VIEW);
		_t = _t.getNextSibling();
		AST tmp928_AST_in = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		state_end(_t);
		_t = _retTree;
		_t = __t2453;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void emptytemptablestate(AST _t) throws RecognitionException {
		
		AST emptytemptablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1134 = _t;
		AST tmp929_AST_in = (AST)_t;
		match(_t,EMPTY);
		_t = _t.getFirstChild();
		AST tmp930_AST_in = (AST)_t;
		match(_t,TEMPTABLE);
		_t = _t.getNextSibling();
		record_name(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp931_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1134;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void enablestate(AST _t) throws RecognitionException {
		
		AST enablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1137 = _t;
		AST tmp932_AST_in = (AST)_t;
		match(_t,ENABLE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case UNLESSHIDDEN:
		{
			AST tmp933_AST_in = (AST)_t;
			match(_t,UNLESSHIDDEN);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case ALL:
		case IN_KW:
		case WITH:
		case Form_item:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case ALL:
		{
			AST __t1140 = _t;
			AST tmp934_AST_in = (AST)_t;
			match(_t,ALL);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case EXCEPT:
			{
				AST __t1142 = _t;
				AST tmp935_AST_in = (AST)_t;
				match(_t,EXCEPT);
				_t = _t.getFirstChild();
				{
				_loop1144:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_t.getType()==Field_ref)) {
						field(_t);
						_t = _retTree;
					}
					else {
						break _loop1144;
					}
					
				} while (true);
				}
				_t = __t1142;
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t1140;
			_t = _t.getNextSibling();
			break;
		}
		case Form_item:
		{
			{
			int _cnt1146=0;
			_loop1146:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==Form_item)) {
					form_item(_t);
					_t = _retTree;
				}
				else {
					if ( _cnt1146>=1 ) { break _loop1146; } else {throw new NoViableAltException(_t);}
				}
				
				_cnt1146++;
			} while (true);
			}
			break;
		}
		case EOF:
		case PERIOD:
		case IN_KW:
		case WITH:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t1148 = _t;
			AST tmp936_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			AST tmp937_AST_in = (AST)_t;
			match(_t,WINDOW);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t1148;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case WITH:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case WITH:
		{
			framephrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1137;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void exportstate(AST _t) throws RecognitionException {
		
		AST exportstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1169 = _t;
		AST tmp938_AST_in = (AST)_t;
		match(_t,EXPORT);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case STREAM:
		{
			stream_name(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case DELIMITER:
		case EXCEPT:
		case Form_item:
		case NOLOBS:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case DELIMITER:
		{
			AST __t1172 = _t;
			AST tmp939_AST_in = (AST)_t;
			match(_t,DELIMITER);
			_t = _t.getFirstChild();
			constant(_t);
			_t = _retTree;
			_t = __t1172;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case EXCEPT:
		case Form_item:
		case NOLOBS:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop1174:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==Form_item)) {
				display_item(_t);
				_t = _retTree;
			}
			else {
				break _loop1174;
			}
			
		} while (true);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case EXCEPT:
		{
			AST __t1176 = _t;
			AST tmp940_AST_in = (AST)_t;
			match(_t,EXCEPT);
			_t = _t.getFirstChild();
			{
			_loop1178:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==Field_ref)) {
					field(_t);
					_t = _retTree;
				}
				else {
					break _loop1178;
				}
				
			} while (true);
			}
			_t = __t1176;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOLOBS:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOLOBS:
		{
			AST tmp941_AST_in = (AST)_t;
			match(_t,NOLOBS);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1169;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void fetchstate(AST _t) throws RecognitionException {
		
		AST fetchstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2455 = _t;
		AST tmp942_AST_in = (AST)_t;
		match(_t,FETCH);
		_t = _t.getFirstChild();
		AST tmp943_AST_in = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		AST tmp944_AST_in = (AST)_t;
		match(_t,INTO);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case INDICATOR:
		case Field_ref:
		{
			fetch_indicator(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case COMMA:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop2459:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==COMMA)) {
				AST tmp945_AST_in = (AST)_t;
				match(_t,COMMA);
				_t = _t.getNextSibling();
				field(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case INDICATOR:
				case Field_ref:
				{
					fetch_indicator(_t);
					_t = _retTree;
					break;
				}
				case EOF:
				case PERIOD:
				case COMMA:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
			}
			else {
				break _loop2459;
			}
			
		} while (true);
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2455;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void findstate(AST _t) throws RecognitionException {
		
		AST findstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1203 = _t;
		AST tmp946_AST_in = (AST)_t;
		match(_t,FIND);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case CURRENT:
		case EACH:
		case FIRST:
		case LAST:
		case NEXT:
		case PREV:
		{
			findwhich(_t);
			_t = _retTree;
			break;
		}
		case RECORD_NAME:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		recordphrase(_t);
		_t = _retTree;
		{
		_loop1206:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case NOWAIT:
			{
				AST tmp947_AST_in = (AST)_t;
				match(_t,NOWAIT);
				_t = _t.getNextSibling();
				break;
			}
			case NOPREFETCH:
			{
				AST tmp948_AST_in = (AST)_t;
				match(_t,NOPREFETCH);
				_t = _t.getNextSibling();
				break;
			}
			case NOERROR_KW:
			{
				AST tmp949_AST_in = (AST)_t;
				match(_t,NOERROR_KW);
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				break _loop1206;
			}
			}
		} while (true);
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1203;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void formstate(AST _t) throws RecognitionException {
		
		AST formstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1232 = _t;
		AST tmp950_AST_in = (AST)_t;
		match(_t,FORMAT);
		_t = _t.getFirstChild();
		{
		_loop1234:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==Form_item)) {
				form_item(_t);
				_t = _retTree;
			}
			else {
				break _loop1234;
			}
			
		} while (true);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case HEADER:
		{
			AST __t1236 = _t;
			AST tmp951_AST_in = (AST)_t;
			match(_t,HEADER);
			_t = _t.getFirstChild();
			{
			int _cnt1238=0;
			_loop1238:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==Form_item)) {
					display_item(_t);
					_t = _retTree;
				}
				else {
					if ( _cnt1238>=1 ) { break _loop1238; } else {throw new NoViableAltException(_t);}
				}
				
				_cnt1238++;
			} while (true);
			}
			_t = __t1236;
			_t = _t.getNextSibling();
			break;
		}
		case BACKGROUND:
		{
			AST __t1239 = _t;
			AST tmp952_AST_in = (AST)_t;
			match(_t,BACKGROUND);
			_t = _t.getFirstChild();
			{
			int _cnt1241=0;
			_loop1241:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==Form_item)) {
					display_item(_t);
					_t = _retTree;
				}
				else {
					if ( _cnt1241>=1 ) { break _loop1241; } else {throw new NoViableAltException(_t);}
				}
				
				_cnt1241++;
			} while (true);
			}
			_t = __t1239;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case EXCEPT:
		case WITH:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case EXCEPT:
		{
			AST __t1243 = _t;
			AST tmp953_AST_in = (AST)_t;
			match(_t,EXCEPT);
			_t = _t.getFirstChild();
			{
			_loop1245:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==Field_ref)) {
					field(_t);
					_t = _retTree;
				}
				else {
					break _loop1245;
				}
				
			} while (true);
			}
			_t = __t1243;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case WITH:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case WITH:
		{
			framephrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1232;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void functionstate(AST _t) throws RecognitionException {
		
		AST functionstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST f = null;
		
		AST __t1314 = _t;
		f = _t==ASTNULL ? null :(AST)_t;
		match(_t,FUNCTION);
		_t = _t.getFirstChild();
		AST tmp954_AST_in = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case RETURNS:
		{
			AST tmp955_AST_in = (AST)_t;
			match(_t,RETURNS);
			_t = _t.getNextSibling();
			break;
		}
		case RETURN:
		{
			AST tmp956_AST_in = (AST)_t;
			match(_t,RETURN);
			_t = _t.getNextSibling();
			break;
		}
		case CHARACTER:
		case COMHANDLE:
		case DATE:
		case DECIMAL:
		case HANDLE:
		case INTEGER:
		case LOGICAL:
		case MEMPTR:
		case RAW:
		case RECID:
		case ROWID:
		case WIDGETHANDLE:
		case DATETIME:
		case DATETIMETZ:
		case LONGCHAR:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		datatype_var(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case PRIVATE:
		{
			AST tmp957_AST_in = (AST)_t;
			match(_t,PRIVATE);
			_t = _t.getNextSibling();
			break;
		}
		case PERIOD:
		case FORWARDS:
		case IN_KW:
		case MAP:
		case LEXCOLON:
		case Parameter_list:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case Parameter_list:
		{
			AST __t1318 = _t;
			AST tmp958_AST_in = (AST)_t;
			match(_t,Parameter_list);
			_t = _t.getFirstChild();
			AST tmp959_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case BUFFER:
			case INPUT:
			case INPUTOUTPUT:
			case OUTPUT:
			{
				function_param(_t);
				_t = _retTree;
				break;
			}
			case COMMA:
			case RIGHTPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			{
			_loop1321:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==COMMA)) {
					AST tmp960_AST_in = (AST)_t;
					match(_t,COMMA);
					_t = _t.getNextSibling();
					function_param(_t);
					_t = _retTree;
				}
				else {
					break _loop1321;
				}
				
			} while (true);
			}
			AST tmp961_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			_t = __t1318;
			_t = _t.getNextSibling();
			break;
		}
		case PERIOD:
		case FORWARDS:
		case IN_KW:
		case MAP:
		case LEXCOLON:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case FORWARDS:
		{
			AST tmp962_AST_in = (AST)_t;
			match(_t,FORWARDS);
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case LEXCOLON:
			{
				AST tmp963_AST_in = (AST)_t;
				match(_t,LEXCOLON);
				_t = _t.getNextSibling();
				break;
			}
			case PERIOD:
			{
				AST tmp964_AST_in = (AST)_t;
				match(_t,PERIOD);
				_t = _t.getNextSibling();
				break;
			}
			case EOF:
			{
				AST tmp965_AST_in = (AST)_t;
				match(_t,Token.EOF_TYPE);
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			break;
		}
		case PERIOD:
		case LEXCOLON:
		{
			block_colon(_t);
			_t = _retTree;
			code_block(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case EOF:
			{
				AST tmp966_AST_in = (AST)_t;
				match(_t,Token.EOF_TYPE);
				_t = _t.getNextSibling();
				break;
			}
			case END:
			{
				AST __t1331 = _t;
				AST tmp967_AST_in = (AST)_t;
				match(_t,END);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case FUNCTION:
				{
					AST tmp968_AST_in = (AST)_t;
					match(_t,FUNCTION);
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t1331;
				_t = _t.getNextSibling();
				state_end(_t);
				_t = _retTree;
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			break;
		}
		default:
			boolean synPredMatched1325 = false;
			if (((_t.getType()==IN_KW))) {
				AST __t1325 = _t;
				synPredMatched1325 = true;
				inputState.guessing++;
				try {
					{
					AST tmp969_AST_in = (AST)_t;
					match(_t,IN_KW);
					_t = _t.getNextSibling();
					AST tmp970_AST_in = (AST)_t;
					match(_t,SUPER);
					_t = _t.getNextSibling();
					}
				}
				catch (RecognitionException pe) {
					synPredMatched1325 = false;
				}
				_t = __t1325;
				inputState.guessing--;
			}
			if ( synPredMatched1325 ) {
				AST tmp971_AST_in = (AST)_t;
				match(_t,IN_KW);
				_t = _t.getNextSibling();
				AST tmp972_AST_in = (AST)_t;
				match(_t,SUPER);
				_t = _t.getNextSibling();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case LEXCOLON:
				{
					AST tmp973_AST_in = (AST)_t;
					match(_t,LEXCOLON);
					_t = _t.getNextSibling();
					break;
				}
				case PERIOD:
				{
					AST tmp974_AST_in = (AST)_t;
					match(_t,PERIOD);
					_t = _t.getNextSibling();
					break;
				}
				case EOF:
				{
					AST tmp975_AST_in = (AST)_t;
					match(_t,Token.EOF_TYPE);
					_t = _t.getNextSibling();
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
			}
			else if ((_t.getType()==IN_KW||_t.getType()==MAP)) {
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case MAP:
				{
					AST tmp976_AST_in = (AST)_t;
					match(_t,MAP);
					_t = _t.getNextSibling();
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case TO:
					{
						AST tmp977_AST_in = (AST)_t;
						match(_t,TO);
						_t = _t.getNextSibling();
						break;
					}
					case ID:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
					AST tmp978_AST_in = (AST)_t;
					match(_t,ID);
					_t = _t.getNextSibling();
					break;
				}
				case IN_KW:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				AST tmp979_AST_in = (AST)_t;
				match(_t,IN_KW);
				_t = _t.getNextSibling();
				expression(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case LEXCOLON:
				{
					AST tmp980_AST_in = (AST)_t;
					match(_t,LEXCOLON);
					_t = _t.getNextSibling();
					break;
				}
				case PERIOD:
				{
					AST tmp981_AST_in = (AST)_t;
					match(_t,PERIOD);
					_t = _t.getNextSibling();
					break;
				}
				case EOF:
				{
					AST tmp982_AST_in = (AST)_t;
					match(_t,Token.EOF_TYPE);
					_t = _t.getNextSibling();
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
			}
		else {
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t1314;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void getstate(AST _t) throws RecognitionException {
		
		AST getstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1353 = _t;
		AST tmp983_AST_in = (AST)_t;
		match(_t,GET);
		_t = _t.getFirstChild();
		findwhich(_t);
		_t = _retTree;
		AST tmp984_AST_in = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		{
		_loop1355:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case EXCLUSIVELOCK:
			case NOLOCK:
			case SHARELOCK:
			{
				lockhow(_t);
				_t = _retTree;
				break;
			}
			case NOWAIT:
			{
				AST tmp985_AST_in = (AST)_t;
				match(_t,NOWAIT);
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				break _loop1355;
			}
			}
		} while (true);
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1353;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void getkeyvaluestate(AST _t) throws RecognitionException {
		
		AST getkeyvaluestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1374 = _t;
		AST tmp986_AST_in = (AST)_t;
		match(_t,GETKEYVALUE);
		_t = _t.getFirstChild();
		AST tmp987_AST_in = (AST)_t;
		match(_t,SECTION);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		AST tmp988_AST_in = (AST)_t;
		match(_t,KEY);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		if ((_t.getType()==DEFAULT)) {
			AST tmp989_AST_in = (AST)_t;
			match(_t,DEFAULT);
			_t = _t.getNextSibling();
		}
		else if ((_tokenSet_4.member(_t.getType()))) {
			expression(_t);
			_t = _retTree;
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		AST tmp990_AST_in = (AST)_t;
		match(_t,VALUE);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		state_end(_t);
		_t = _retTree;
		_t = __t1374;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void grantstate(AST _t) throws RecognitionException {
		
		AST grantstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2463 = _t;
		AST tmp991_AST_in = (AST)_t;
		match(_t,GRANT);
		_t = _t.getFirstChild();
		{
		grant_rev_opt(_t);
		_t = _retTree;
		}
		AST tmp992_AST_in = (AST)_t;
		match(_t,ON);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case RECORD_NAME:
		{
			record_name(_t);
			_t = _retTree;
			break;
		}
		case ID:
		{
			AST tmp993_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		grant_rev_to(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case WITH:
		{
			AST tmp994_AST_in = (AST)_t;
			match(_t,WITH);
			_t = _t.getNextSibling();
			AST tmp995_AST_in = (AST)_t;
			match(_t,GRANT);
			_t = _t.getNextSibling();
			AST tmp996_AST_in = (AST)_t;
			match(_t,OPTION);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2463;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void hidestate(AST _t) throws RecognitionException {
		
		AST hidestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1402 = _t;
		AST tmp997_AST_in = (AST)_t;
		match(_t,HIDE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case STREAM:
		{
			stream_name(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case ALL:
		case IN_KW:
		case MESSAGE:
		case NOPAUSE:
		case Widget_ref:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case MESSAGE:
		{
			AST tmp998_AST_in = (AST)_t;
			match(_t,MESSAGE);
			_t = _t.getNextSibling();
			break;
		}
		case ALL:
		{
			AST tmp999_AST_in = (AST)_t;
			match(_t,ALL);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case IN_KW:
		case NOPAUSE:
		case Widget_ref:
		{
			{
			_loop1406:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==Widget_ref)) {
					gwidget(_t);
					_t = _retTree;
				}
				else {
					break _loop1406;
				}
				
			} while (true);
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOPAUSE:
		{
			AST tmp1000_AST_in = (AST)_t;
			match(_t,NOPAUSE);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case IN_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t1409 = _t;
			AST tmp1001_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			AST tmp1002_AST_in = (AST)_t;
			match(_t,WINDOW);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t1409;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1402;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void ifstate(AST _t) throws RecognitionException {
		
		AST ifstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1413 = _t;
		AST tmp1003_AST_in = (AST)_t;
		match(_t,IF);
		_t = _t.getFirstChild();
		expression(_t);
		_t = _retTree;
		AST tmp1004_AST_in = (AST)_t;
		match(_t,THEN);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case PERIOD:
		case PROPARSEDIRECTIVE:
		case AATRACE:
		case ACCUMULATE:
		case ALTER:
		case ANALYZE:
		case APPLY:
		case ASSIGN:
		case BELL:
		case BTOS:
		case BUFFERCOMPARE:
		case BUFFERCOPY:
		case CALL:
		case CASE:
		case CHOOSE:
		case CLEAR:
		case CLOSE:
		case COLOR:
		case COMPILE:
		case CONNECT:
		case CREATE:
		case DDE:
		case DECLARE:
		case DEFINE:
		case DELETE_KW:
		case DICTIONARY:
		case DISABLE:
		case DISCONNECT:
		case DISPLAY:
		case DO:
		case DOS:
		case DOWN:
		case DROP:
		case EMPTY:
		case ENABLE:
		case EXPORT:
		case FETCH:
		case FIND:
		case FOR:
		case FORMAT:
		case FUNCTION:
		case GET:
		case GETKEYVALUE:
		case GRANT:
		case HIDE:
		case IF:
		case IMPORT:
		case INPUT:
		case INPUTOUTPUT:
		case INSERT:
		case LEAVE:
		case LOAD:
		case MESSAGE:
		case MPE:
		case NEXT:
		case NEXTPROMPT:
		case ON:
		case OPEN:
		case OS2:
		case OS400:
		case OSAPPEND:
		case OSCOMMAND:
		case OSCOPY:
		case OSCREATEDIR:
		case OSDELETE:
		case OSRENAME:
		case OUTPUT:
		case PAGE:
		case PAUSE:
		case PROCEDURE:
		case PROCESS:
		case PROMPTFOR:
		case PUBLISH:
		case PUT:
		case PUTKEYVALUE:
		case QUIT:
		case RAWTRANSFER:
		case READKEY:
		case RELEASE:
		case REPEAT:
		case REPOSITION:
		case RETURN:
		case REVOKE:
		case RUN:
		case SAVE:
		case SCROLL:
		case SEEK:
		case SELECT:
		case SET:
		case SHOWSTATS:
		case STATUS:
		case STOP:
		case SUBSCRIBE:
		case SYSTEMDIALOG:
		case SYSTEMHELP:
		case TRANSACTIONMODE:
		case TRIGGER:
		case UNDERLINE:
		case UNDO:
		case UNIX:
		case UNLOAD:
		case UNSUBSCRIBE:
		case UP:
		case UPDATE:
		case USE:
		case VALIDATE:
		case VIEW:
		case VMS:
		case WAITFOR:
		case Expr_statement:
		case BLOCK_LABEL:
		case COPYLOB:
		{
			blockorstate(_t);
			_t = _retTree;
			break;
		}
		case 3:
		case ELSE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case ELSE:
		{
			AST __t1416 = _t;
			AST tmp1005_AST_in = (AST)_t;
			match(_t,ELSE);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case PERIOD:
			case PROPARSEDIRECTIVE:
			case AATRACE:
			case ACCUMULATE:
			case ALTER:
			case ANALYZE:
			case APPLY:
			case ASSIGN:
			case BELL:
			case BTOS:
			case BUFFERCOMPARE:
			case BUFFERCOPY:
			case CALL:
			case CASE:
			case CHOOSE:
			case CLEAR:
			case CLOSE:
			case COLOR:
			case COMPILE:
			case CONNECT:
			case CREATE:
			case DDE:
			case DECLARE:
			case DEFINE:
			case DELETE_KW:
			case DICTIONARY:
			case DISABLE:
			case DISCONNECT:
			case DISPLAY:
			case DO:
			case DOS:
			case DOWN:
			case DROP:
			case EMPTY:
			case ENABLE:
			case EXPORT:
			case FETCH:
			case FIND:
			case FOR:
			case FORMAT:
			case FUNCTION:
			case GET:
			case GETKEYVALUE:
			case GRANT:
			case HIDE:
			case IF:
			case IMPORT:
			case INPUT:
			case INPUTOUTPUT:
			case INSERT:
			case LEAVE:
			case LOAD:
			case MESSAGE:
			case MPE:
			case NEXT:
			case NEXTPROMPT:
			case ON:
			case OPEN:
			case OS2:
			case OS400:
			case OSAPPEND:
			case OSCOMMAND:
			case OSCOPY:
			case OSCREATEDIR:
			case OSDELETE:
			case OSRENAME:
			case OUTPUT:
			case PAGE:
			case PAUSE:
			case PROCEDURE:
			case PROCESS:
			case PROMPTFOR:
			case PUBLISH:
			case PUT:
			case PUTKEYVALUE:
			case QUIT:
			case RAWTRANSFER:
			case READKEY:
			case RELEASE:
			case REPEAT:
			case REPOSITION:
			case RETURN:
			case REVOKE:
			case RUN:
			case SAVE:
			case SCROLL:
			case SEEK:
			case SELECT:
			case SET:
			case SHOWSTATS:
			case STATUS:
			case STOP:
			case SUBSCRIBE:
			case SYSTEMDIALOG:
			case SYSTEMHELP:
			case TRANSACTIONMODE:
			case TRIGGER:
			case UNDERLINE:
			case UNDO:
			case UNIX:
			case UNLOAD:
			case UNSUBSCRIBE:
			case UP:
			case UPDATE:
			case USE:
			case VALIDATE:
			case VIEW:
			case VMS:
			case WAITFOR:
			case Expr_statement:
			case BLOCK_LABEL:
			case COPYLOB:
			{
				blockorstate(_t);
				_t = _retTree;
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t1416;
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t1413;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void importstate(AST _t) throws RecognitionException {
		
		AST importstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1427 = _t;
		AST tmp1006_AST_in = (AST)_t;
		match(_t,IMPORT);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case STREAM:
		{
			stream_name(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case DELIMITER:
		case NOERROR_KW:
		case UNFORMATTED:
		case CARET:
		case Field_ref:
		case RECORD_NAME:
		case NOLOBS:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case DELIMITER:
		{
			AST __t1430 = _t;
			AST tmp1007_AST_in = (AST)_t;
			match(_t,DELIMITER);
			_t = _t.getFirstChild();
			constant(_t);
			_t = _retTree;
			_t = __t1430;
			_t = _t.getNextSibling();
			break;
		}
		case UNFORMATTED:
		{
			AST tmp1008_AST_in = (AST)_t;
			match(_t,UNFORMATTED);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		case CARET:
		case Field_ref:
		case RECORD_NAME:
		case NOLOBS:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case RECORD_NAME:
		{
			record_name(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case EXCEPT:
			{
				AST __t1433 = _t;
				AST tmp1009_AST_in = (AST)_t;
				match(_t,EXCEPT);
				_t = _t.getFirstChild();
				{
				_loop1435:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_t.getType()==Field_ref)) {
						field(_t);
						_t = _retTree;
					}
					else {
						break _loop1435;
					}
					
				} while (true);
				}
				_t = __t1433;
				_t = _t.getNextSibling();
				break;
			}
			case EOF:
			case PERIOD:
			case NOERROR_KW:
			case NOLOBS:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			break;
		}
		case CARET:
		case Field_ref:
		{
			{
			int _cnt1437=0;
			_loop1437:
			do {
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case Field_ref:
				{
					if ( inputState.guessing==0 ) {
						tpSupport.updating(true);
					}
					field(_t);
					_t = _retTree;
					if ( inputState.guessing==0 ) {
						tpSupport.updating(false);
					}
					break;
				}
				case CARET:
				{
					AST tmp1010_AST_in = (AST)_t;
					match(_t,CARET);
					_t = _t.getNextSibling();
					break;
				}
				default:
				{
					if ( _cnt1437>=1 ) { break _loop1437; } else {throw new NoViableAltException(_t);}
				}
				}
				_cnt1437++;
			} while (true);
			}
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		case NOLOBS:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOLOBS:
		{
			AST tmp1011_AST_in = (AST)_t;
			match(_t,NOLOBS);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp1012_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1427;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void inputclearstate(AST _t) throws RecognitionException {
		
		AST inputclearstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1451 = _t;
		AST tmp1013_AST_in = (AST)_t;
		match(_t,INPUT);
		_t = _t.getFirstChild();
		AST tmp1014_AST_in = (AST)_t;
		match(_t,CLEAR);
		_t = _t.getNextSibling();
		state_end(_t);
		_t = _retTree;
		_t = __t1451;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void inputclosestate(AST _t) throws RecognitionException {
		
		AST inputclosestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1453 = _t;
		AST tmp1015_AST_in = (AST)_t;
		match(_t,INPUT);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case STREAM:
		{
			stream_name(_t);
			_t = _retTree;
			break;
		}
		case CLOSE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp1016_AST_in = (AST)_t;
		match(_t,CLOSE);
		_t = _t.getNextSibling();
		state_end(_t);
		_t = _retTree;
		_t = __t1453;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void inputfromstate(AST _t) throws RecognitionException {
		
		AST inputfromstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1456 = _t;
		AST tmp1017_AST_in = (AST)_t;
		match(_t,INPUT);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case STREAM:
		{
			stream_name(_t);
			_t = _retTree;
			break;
		}
		case FROM:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp1018_AST_in = (AST)_t;
		match(_t,FROM);
		_t = _t.getNextSibling();
		io_phrase(_t);
		_t = _retTree;
		state_end(_t);
		_t = _retTree;
		_t = __t1456;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void inputthroughstate(AST _t) throws RecognitionException {
		
		AST inputthroughstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1459 = _t;
		AST tmp1019_AST_in = (AST)_t;
		match(_t,INPUT);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case STREAM:
		{
			stream_name(_t);
			_t = _retTree;
			break;
		}
		case THROUGH:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp1020_AST_in = (AST)_t;
		match(_t,THROUGH);
		_t = _t.getNextSibling();
		io_phrase(_t);
		_t = _retTree;
		state_end(_t);
		_t = _retTree;
		_t = __t1459;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void inputoutputclosestate(AST _t) throws RecognitionException {
		
		AST inputoutputclosestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1462 = _t;
		AST tmp1021_AST_in = (AST)_t;
		match(_t,INPUTOUTPUT);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case STREAM:
		{
			stream_name(_t);
			_t = _retTree;
			break;
		}
		case CLOSE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp1022_AST_in = (AST)_t;
		match(_t,CLOSE);
		_t = _t.getNextSibling();
		state_end(_t);
		_t = _retTree;
		_t = __t1462;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void inputoutputthroughstate(AST _t) throws RecognitionException {
		
		AST inputoutputthroughstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1465 = _t;
		AST tmp1023_AST_in = (AST)_t;
		match(_t,INPUTOUTPUT);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case STREAM:
		{
			stream_name(_t);
			_t = _retTree;
			break;
		}
		case THROUGH:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp1024_AST_in = (AST)_t;
		match(_t,THROUGH);
		_t = _t.getNextSibling();
		io_phrase(_t);
		_t = _retTree;
		state_end(_t);
		_t = _retTree;
		_t = __t1465;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void insertintostate(AST _t) throws RecognitionException {
		
		AST insertintostate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2487 = _t;
		AST tmp1025_AST_in = (AST)_t;
		match(_t,INSERT);
		_t = _t.getFirstChild();
		AST tmp1026_AST_in = (AST)_t;
		match(_t,INTO);
		_t = _t.getNextSibling();
		record_name(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case Field_list:
		{
			AST __t2489 = _t;
			AST tmp1027_AST_in = (AST)_t;
			match(_t,Field_list);
			_t = _t.getFirstChild();
			AST tmp1028_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getNextSibling();
			field(_t);
			_t = _retTree;
			{
			_loop2491:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==COMMA)) {
					AST tmp1029_AST_in = (AST)_t;
					match(_t,COMMA);
					_t = _t.getNextSibling();
					field(_t);
					_t = _retTree;
				}
				else {
					break _loop2491;
				}
				
			} while (true);
			}
			AST tmp1030_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			_t = __t2489;
			_t = _t.getNextSibling();
			break;
		}
		case SELECT:
		case VALUES:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case VALUES:
		{
			AST __t2493 = _t;
			AST tmp1031_AST_in = (AST)_t;
			match(_t,VALUES);
			_t = _t.getFirstChild();
			AST tmp1032_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getNextSibling();
			sqlexpression(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case INDICATOR:
			case Field_ref:
			{
				fetch_indicator(_t);
				_t = _retTree;
				break;
			}
			case COMMA:
			case RIGHTPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			{
			_loop2497:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==COMMA)) {
					AST tmp1033_AST_in = (AST)_t;
					match(_t,COMMA);
					_t = _t.getNextSibling();
					sqlexpression(_t);
					_t = _retTree;
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case INDICATOR:
					case Field_ref:
					{
						fetch_indicator(_t);
						_t = _retTree;
						break;
					}
					case COMMA:
					case RIGHTPAREN:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
				}
				else {
					break _loop2497;
				}
				
			} while (true);
			}
			AST tmp1034_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			_t = __t2493;
			_t = _t.getNextSibling();
			break;
		}
		case SELECT:
		{
			selectstatea(_t);
			_t = _retTree;
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2487;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void insertstate(AST _t) throws RecognitionException {
		
		AST insertstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1468 = _t;
		AST tmp1035_AST_in = (AST)_t;
		match(_t,INSERT);
		_t = _t.getFirstChild();
		record_name(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case EXCEPT:
		{
			AST __t1470 = _t;
			AST tmp1036_AST_in = (AST)_t;
			match(_t,EXCEPT);
			_t = _t.getFirstChild();
			{
			_loop1472:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==Field_ref)) {
					field(_t);
					_t = _retTree;
				}
				else {
					break _loop1472;
				}
				
			} while (true);
			}
			_t = __t1470;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		case USING:
		case WITH:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case USING:
		{
			AST __t1474 = _t;
			AST tmp1037_AST_in = (AST)_t;
			match(_t,USING);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case ROWID:
			{
				AST tmp1038_AST_in = (AST)_t;
				match(_t,ROWID);
				_t = _t.getNextSibling();
				break;
			}
			case RECID:
			{
				AST tmp1039_AST_in = (AST)_t;
				match(_t,RECID);
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			expression(_t);
			_t = _retTree;
			_t = __t1474;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		case WITH:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case WITH:
		{
			framephrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp1040_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1468;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void leavestate(AST _t) throws RecognitionException {
		
		AST leavestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1540 = _t;
		AST tmp1041_AST_in = (AST)_t;
		match(_t,LEAVE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case BLOCK_LABEL:
		{
			AST tmp1042_AST_in = (AST)_t;
			match(_t,BLOCK_LABEL);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1540;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void loadstate(AST _t) throws RecognitionException {
		
		AST loadstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1560 = _t;
		AST tmp1043_AST_in = (AST)_t;
		match(_t,LOAD);
		_t = _t.getFirstChild();
		expression(_t);
		_t = _retTree;
		{
		_loop1564:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case DIR:
			{
				AST __t1562 = _t;
				AST tmp1044_AST_in = (AST)_t;
				match(_t,DIR);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1562;
				_t = _t.getNextSibling();
				break;
			}
			case APPLICATION:
			{
				AST tmp1045_AST_in = (AST)_t;
				match(_t,APPLICATION);
				_t = _t.getNextSibling();
				break;
			}
			case DYNAMIC:
			{
				AST tmp1046_AST_in = (AST)_t;
				match(_t,DYNAMIC);
				_t = _t.getNextSibling();
				break;
			}
			case NEW:
			{
				AST tmp1047_AST_in = (AST)_t;
				match(_t,NEW);
				_t = _t.getNextSibling();
				break;
			}
			case BASEKEY:
			{
				AST __t1563 = _t;
				AST tmp1048_AST_in = (AST)_t;
				match(_t,BASEKEY);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1563;
				_t = _t.getNextSibling();
				break;
			}
			case NOERROR_KW:
			{
				AST tmp1049_AST_in = (AST)_t;
				match(_t,NOERROR_KW);
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				break _loop1564;
			}
			}
		} while (true);
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1560;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void messagestate(AST _t) throws RecognitionException {
		
		AST messagestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1589 = _t;
		AST tmp1050_AST_in = (AST)_t;
		match(_t,MESSAGE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case COLOR:
		{
			AST __t1591 = _t;
			AST tmp1051_AST_in = (AST)_t;
			match(_t,COLOR);
			_t = _t.getFirstChild();
			anyorvalue(_t);
			_t = _retTree;
			_t = __t1591;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case IN_KW:
		case SET:
		case UPDATE:
		case VIEWAS:
		case Form_item:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop1595:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==Form_item)) {
				AST __t1593 = _t;
				AST tmp1052_AST_in = (AST)_t;
				match(_t,Form_item);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==SKIP)) {
					skipphrase(_t);
					_t = _retTree;
				}
				else if ((_tokenSet_4.member(_t.getType()))) {
					expression(_t);
					_t = _retTree;
				}
				else {
					throw new NoViableAltException(_t);
				}
				
				}
				_t = __t1593;
				_t = _t.getNextSibling();
			}
			else {
				break _loop1595;
			}
			
		} while (true);
		}
		{
		_loop1607:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case VIEWAS:
			{
				AST __t1597 = _t;
				AST tmp1053_AST_in = (AST)_t;
				match(_t,VIEWAS);
				_t = _t.getFirstChild();
				AST tmp1054_AST_in = (AST)_t;
				match(_t,ALERTBOX);
				_t = _t.getNextSibling();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case MESSAGE:
				{
					AST tmp1055_AST_in = (AST)_t;
					match(_t,MESSAGE);
					_t = _t.getNextSibling();
					break;
				}
				case QUESTION:
				{
					AST tmp1056_AST_in = (AST)_t;
					match(_t,QUESTION);
					_t = _t.getNextSibling();
					break;
				}
				case INFORMATION:
				{
					AST tmp1057_AST_in = (AST)_t;
					match(_t,INFORMATION);
					_t = _t.getNextSibling();
					break;
				}
				case ERROR:
				{
					AST tmp1058_AST_in = (AST)_t;
					match(_t,ERROR);
					_t = _t.getNextSibling();
					break;
				}
				case WARNING:
				{
					AST tmp1059_AST_in = (AST)_t;
					match(_t,WARNING);
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				case BUTTONS:
				case TITLE:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case BUTTONS:
				{
					AST tmp1060_AST_in = (AST)_t;
					match(_t,BUTTONS);
					_t = _t.getNextSibling();
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case YESNO:
					{
						AST tmp1061_AST_in = (AST)_t;
						match(_t,YESNO);
						_t = _t.getNextSibling();
						break;
					}
					case YESNOCANCEL:
					{
						AST tmp1062_AST_in = (AST)_t;
						match(_t,YESNOCANCEL);
						_t = _t.getNextSibling();
						break;
					}
					case OK:
					{
						AST tmp1063_AST_in = (AST)_t;
						match(_t,OK);
						_t = _t.getNextSibling();
						break;
					}
					case OKCANCEL:
					{
						AST tmp1064_AST_in = (AST)_t;
						match(_t,OKCANCEL);
						_t = _t.getNextSibling();
						break;
					}
					case RETRYCANCEL:
					{
						AST tmp1065_AST_in = (AST)_t;
						match(_t,RETRYCANCEL);
						_t = _t.getNextSibling();
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
					break;
				}
				case 3:
				case TITLE:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case TITLE:
				{
					AST __t1602 = _t;
					AST tmp1066_AST_in = (AST)_t;
					match(_t,TITLE);
					_t = _t.getFirstChild();
					expression(_t);
					_t = _retTree;
					_t = __t1602;
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t1597;
				_t = _t.getNextSibling();
				break;
			}
			case SET:
			{
				AST __t1603 = _t;
				AST tmp1067_AST_in = (AST)_t;
				match(_t,SET);
				_t = _t.getFirstChild();
				field(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case Format_phrase:
				{
					formatphrase(_t);
					_t = _retTree;
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t1603;
				_t = _t.getNextSibling();
				break;
			}
			case UPDATE:
			{
				AST __t1605 = _t;
				AST tmp1068_AST_in = (AST)_t;
				match(_t,UPDATE);
				_t = _t.getFirstChild();
				field(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case Format_phrase:
				{
					formatphrase(_t);
					_t = _retTree;
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t1605;
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				break _loop1607;
			}
			}
		} while (true);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t1609 = _t;
			AST tmp1069_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			AST tmp1070_AST_in = (AST)_t;
			match(_t,WINDOW);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t1609;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1589;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void nextstate(AST _t) throws RecognitionException {
		
		AST nextstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1626 = _t;
		AST tmp1071_AST_in = (AST)_t;
		match(_t,NEXT);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case BLOCK_LABEL:
		{
			AST tmp1072_AST_in = (AST)_t;
			match(_t,BLOCK_LABEL);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1626;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void nextpromptstate(AST _t) throws RecognitionException {
		
		AST nextpromptstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1629 = _t;
		AST tmp1073_AST_in = (AST)_t;
		match(_t,NEXTPROMPT);
		_t = _t.getFirstChild();
		field(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case WITH:
		{
			framephrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1629;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void onstate(AST _t) throws RecognitionException {
		
		AST onstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST onNode = null;
		AST id = null;
		
		AST __t1645 = _t;
		onNode = _t==ASTNULL ? null :(AST)_t;
		match(_t,ON);
		_t = _t.getFirstChild();
		{
		boolean synPredMatched1648 = false;
		if (((_tokenSet_15.member(_t.getType())))) {
			AST __t1648 = _t;
			synPredMatched1648 = true;
			inputState.guessing++;
			try {
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case ASSIGN:
				{
					AST tmp1074_AST_in = (AST)_t;
					match(_t,ASSIGN);
					_t = _t.getNextSibling();
					break;
				}
				case CREATE:
				{
					AST tmp1075_AST_in = (AST)_t;
					match(_t,CREATE);
					_t = _t.getNextSibling();
					break;
				}
				case DELETE_KW:
				{
					AST tmp1076_AST_in = (AST)_t;
					match(_t,DELETE_KW);
					_t = _t.getNextSibling();
					break;
				}
				case FIND:
				{
					AST tmp1077_AST_in = (AST)_t;
					match(_t,FIND);
					_t = _t.getNextSibling();
					break;
				}
				case WRITE:
				{
					AST tmp1078_AST_in = (AST)_t;
					match(_t,WRITE);
					_t = _t.getNextSibling();
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
			}
			catch (RecognitionException pe) {
				synPredMatched1648 = false;
			}
			_t = __t1648;
			inputState.guessing--;
		}
		if ( synPredMatched1648 ) {
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case CREATE:
			case DELETE_KW:
			case FIND:
			{
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case CREATE:
				{
					AST tmp1079_AST_in = (AST)_t;
					match(_t,CREATE);
					_t = _t.getNextSibling();
					break;
				}
				case DELETE_KW:
				{
					AST tmp1080_AST_in = (AST)_t;
					match(_t,DELETE_KW);
					_t = _t.getNextSibling();
					break;
				}
				case FIND:
				{
					AST tmp1081_AST_in = (AST)_t;
					match(_t,FIND);
					_t = _t.getNextSibling();
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				AST tmp1082_AST_in = (AST)_t;
				match(_t,OF);
				_t = _t.getNextSibling();
				record_name(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case COLUMNLABEL:
				case LABEL:
				{
					label_constant(_t);
					_t = _retTree;
					break;
				}
				case PERIOD:
				case PROPARSEDIRECTIVE:
				case AATRACE:
				case ACCUMULATE:
				case ALTER:
				case ANALYZE:
				case APPLY:
				case ASSIGN:
				case BELL:
				case BTOS:
				case BUFFERCOMPARE:
				case BUFFERCOPY:
				case CALL:
				case CASE:
				case CHOOSE:
				case CLEAR:
				case CLOSE:
				case COLOR:
				case COMPILE:
				case CONNECT:
				case CREATE:
				case DDE:
				case DECLARE:
				case DEFINE:
				case DELETE_KW:
				case DICTIONARY:
				case DISABLE:
				case DISCONNECT:
				case DISPLAY:
				case DO:
				case DOS:
				case DOWN:
				case DROP:
				case EMPTY:
				case ENABLE:
				case EXPORT:
				case FETCH:
				case FIND:
				case FOR:
				case FORMAT:
				case FUNCTION:
				case GET:
				case GETKEYVALUE:
				case GRANT:
				case HIDE:
				case IF:
				case IMPORT:
				case INPUT:
				case INPUTOUTPUT:
				case INSERT:
				case LEAVE:
				case LOAD:
				case MESSAGE:
				case MPE:
				case NEXT:
				case NEXTPROMPT:
				case ON:
				case OPEN:
				case OS2:
				case OS400:
				case OSAPPEND:
				case OSCOMMAND:
				case OSCOPY:
				case OSCREATEDIR:
				case OSDELETE:
				case OSRENAME:
				case OUTPUT:
				case OVERRIDE:
				case PAGE:
				case PAUSE:
				case PERSISTENT:
				case PROCEDURE:
				case PROCESS:
				case PROMPTFOR:
				case PUBLISH:
				case PUT:
				case PUTKEYVALUE:
				case QUIT:
				case RAWTRANSFER:
				case READKEY:
				case RELEASE:
				case REPEAT:
				case REPOSITION:
				case RETURN:
				case REVERT:
				case REVOKE:
				case RUN:
				case SAVE:
				case SCROLL:
				case SEEK:
				case SELECT:
				case SET:
				case SHOWSTATS:
				case STATUS:
				case STOP:
				case SUBSCRIBE:
				case SYSTEMDIALOG:
				case SYSTEMHELP:
				case TRANSACTIONMODE:
				case TRIGGER:
				case UNDERLINE:
				case UNDO:
				case UNIX:
				case UNLOAD:
				case UNSUBSCRIBE:
				case UP:
				case UPDATE:
				case USE:
				case VALIDATE:
				case VIEW:
				case VMS:
				case WAITFOR:
				case Expr_statement:
				case BLOCK_LABEL:
				case COPYLOB:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				break;
			}
			case WRITE:
			{
				AST tmp1083_AST_in = (AST)_t;
				match(_t,WRITE);
				_t = _t.getNextSibling();
				AST tmp1084_AST_in = (AST)_t;
				match(_t,OF);
				_t = _t.getNextSibling();
				record_name(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case COLUMNLABEL:
				case LABEL:
				{
					label_constant(_t);
					_t = _retTree;
					break;
				}
				case PERIOD:
				case PROPARSEDIRECTIVE:
				case AATRACE:
				case ACCUMULATE:
				case ALTER:
				case ANALYZE:
				case APPLY:
				case ASSIGN:
				case BELL:
				case BTOS:
				case BUFFERCOMPARE:
				case BUFFERCOPY:
				case CALL:
				case CASE:
				case CHOOSE:
				case CLEAR:
				case CLOSE:
				case COLOR:
				case COMPILE:
				case CONNECT:
				case CREATE:
				case DDE:
				case DECLARE:
				case DEFINE:
				case DELETE_KW:
				case DICTIONARY:
				case DISABLE:
				case DISCONNECT:
				case DISPLAY:
				case DO:
				case DOS:
				case DOWN:
				case DROP:
				case EMPTY:
				case ENABLE:
				case EXPORT:
				case FETCH:
				case FIND:
				case FOR:
				case FORMAT:
				case FUNCTION:
				case GET:
				case GETKEYVALUE:
				case GRANT:
				case HIDE:
				case IF:
				case IMPORT:
				case INPUT:
				case INPUTOUTPUT:
				case INSERT:
				case LEAVE:
				case LOAD:
				case MESSAGE:
				case MPE:
				case NEW:
				case NEXT:
				case NEXTPROMPT:
				case OLD:
				case ON:
				case OPEN:
				case OS2:
				case OS400:
				case OSAPPEND:
				case OSCOMMAND:
				case OSCOPY:
				case OSCREATEDIR:
				case OSDELETE:
				case OSRENAME:
				case OUTPUT:
				case OVERRIDE:
				case PAGE:
				case PAUSE:
				case PERSISTENT:
				case PROCEDURE:
				case PROCESS:
				case PROMPTFOR:
				case PUBLISH:
				case PUT:
				case PUTKEYVALUE:
				case QUIT:
				case RAWTRANSFER:
				case READKEY:
				case RELEASE:
				case REPEAT:
				case REPOSITION:
				case RETURN:
				case REVERT:
				case REVOKE:
				case RUN:
				case SAVE:
				case SCROLL:
				case SEEK:
				case SELECT:
				case SET:
				case SHOWSTATS:
				case STATUS:
				case STOP:
				case SUBSCRIBE:
				case SYSTEMDIALOG:
				case SYSTEMHELP:
				case TRANSACTIONMODE:
				case TRIGGER:
				case UNDERLINE:
				case UNDO:
				case UNIX:
				case UNLOAD:
				case UNSUBSCRIBE:
				case UP:
				case UPDATE:
				case USE:
				case VALIDATE:
				case VIEW:
				case VMS:
				case WAITFOR:
				case Expr_statement:
				case BLOCK_LABEL:
				case COPYLOB:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case NEW:
				{
					{
					AST tmp1085_AST_in = (AST)_t;
					match(_t,NEW);
					_t = _t.getNextSibling();
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case BUFFER:
					{
						AST tmp1086_AST_in = (AST)_t;
						match(_t,BUFFER);
						_t = _t.getNextSibling();
						break;
					}
					case ID:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
					AST tmp1087_AST_in = (AST)_t;
					match(_t,ID);
					_t = _t.getNextSibling();
					}
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case COLUMNLABEL:
					case LABEL:
					{
						label_constant(_t);
						_t = _retTree;
						break;
					}
					case PERIOD:
					case PROPARSEDIRECTIVE:
					case AATRACE:
					case ACCUMULATE:
					case ALTER:
					case ANALYZE:
					case APPLY:
					case ASSIGN:
					case BELL:
					case BTOS:
					case BUFFERCOMPARE:
					case BUFFERCOPY:
					case CALL:
					case CASE:
					case CHOOSE:
					case CLEAR:
					case CLOSE:
					case COLOR:
					case COMPILE:
					case CONNECT:
					case CREATE:
					case DDE:
					case DECLARE:
					case DEFINE:
					case DELETE_KW:
					case DICTIONARY:
					case DISABLE:
					case DISCONNECT:
					case DISPLAY:
					case DO:
					case DOS:
					case DOWN:
					case DROP:
					case EMPTY:
					case ENABLE:
					case EXPORT:
					case FETCH:
					case FIND:
					case FOR:
					case FORMAT:
					case FUNCTION:
					case GET:
					case GETKEYVALUE:
					case GRANT:
					case HIDE:
					case IF:
					case IMPORT:
					case INPUT:
					case INPUTOUTPUT:
					case INSERT:
					case LEAVE:
					case LOAD:
					case MESSAGE:
					case MPE:
					case NEXT:
					case NEXTPROMPT:
					case OLD:
					case ON:
					case OPEN:
					case OS2:
					case OS400:
					case OSAPPEND:
					case OSCOMMAND:
					case OSCOPY:
					case OSCREATEDIR:
					case OSDELETE:
					case OSRENAME:
					case OUTPUT:
					case OVERRIDE:
					case PAGE:
					case PAUSE:
					case PERSISTENT:
					case PROCEDURE:
					case PROCESS:
					case PROMPTFOR:
					case PUBLISH:
					case PUT:
					case PUTKEYVALUE:
					case QUIT:
					case RAWTRANSFER:
					case READKEY:
					case RELEASE:
					case REPEAT:
					case REPOSITION:
					case RETURN:
					case REVERT:
					case REVOKE:
					case RUN:
					case SAVE:
					case SCROLL:
					case SEEK:
					case SELECT:
					case SET:
					case SHOWSTATS:
					case STATUS:
					case STOP:
					case SUBSCRIBE:
					case SYSTEMDIALOG:
					case SYSTEMHELP:
					case TRANSACTIONMODE:
					case TRIGGER:
					case UNDERLINE:
					case UNDO:
					case UNIX:
					case UNLOAD:
					case UNSUBSCRIBE:
					case UP:
					case UPDATE:
					case USE:
					case VALIDATE:
					case VIEW:
					case VMS:
					case WAITFOR:
					case Expr_statement:
					case BLOCK_LABEL:
					case COPYLOB:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
					break;
				}
				case PERIOD:
				case PROPARSEDIRECTIVE:
				case AATRACE:
				case ACCUMULATE:
				case ALTER:
				case ANALYZE:
				case APPLY:
				case ASSIGN:
				case BELL:
				case BTOS:
				case BUFFERCOMPARE:
				case BUFFERCOPY:
				case CALL:
				case CASE:
				case CHOOSE:
				case CLEAR:
				case CLOSE:
				case COLOR:
				case COMPILE:
				case CONNECT:
				case CREATE:
				case DDE:
				case DECLARE:
				case DEFINE:
				case DELETE_KW:
				case DICTIONARY:
				case DISABLE:
				case DISCONNECT:
				case DISPLAY:
				case DO:
				case DOS:
				case DOWN:
				case DROP:
				case EMPTY:
				case ENABLE:
				case EXPORT:
				case FETCH:
				case FIND:
				case FOR:
				case FORMAT:
				case FUNCTION:
				case GET:
				case GETKEYVALUE:
				case GRANT:
				case HIDE:
				case IF:
				case IMPORT:
				case INPUT:
				case INPUTOUTPUT:
				case INSERT:
				case LEAVE:
				case LOAD:
				case MESSAGE:
				case MPE:
				case NEXT:
				case NEXTPROMPT:
				case OLD:
				case ON:
				case OPEN:
				case OS2:
				case OS400:
				case OSAPPEND:
				case OSCOMMAND:
				case OSCOPY:
				case OSCREATEDIR:
				case OSDELETE:
				case OSRENAME:
				case OUTPUT:
				case OVERRIDE:
				case PAGE:
				case PAUSE:
				case PERSISTENT:
				case PROCEDURE:
				case PROCESS:
				case PROMPTFOR:
				case PUBLISH:
				case PUT:
				case PUTKEYVALUE:
				case QUIT:
				case RAWTRANSFER:
				case READKEY:
				case RELEASE:
				case REPEAT:
				case REPOSITION:
				case RETURN:
				case REVERT:
				case REVOKE:
				case RUN:
				case SAVE:
				case SCROLL:
				case SEEK:
				case SELECT:
				case SET:
				case SHOWSTATS:
				case STATUS:
				case STOP:
				case SUBSCRIBE:
				case SYSTEMDIALOG:
				case SYSTEMHELP:
				case TRANSACTIONMODE:
				case TRIGGER:
				case UNDERLINE:
				case UNDO:
				case UNIX:
				case UNLOAD:
				case UNSUBSCRIBE:
				case UP:
				case UPDATE:
				case USE:
				case VALIDATE:
				case VIEW:
				case VMS:
				case WAITFOR:
				case Expr_statement:
				case BLOCK_LABEL:
				case COPYLOB:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case OLD:
				{
					{
					AST tmp1088_AST_in = (AST)_t;
					match(_t,OLD);
					_t = _t.getNextSibling();
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case BUFFER:
					{
						AST tmp1089_AST_in = (AST)_t;
						match(_t,BUFFER);
						_t = _t.getNextSibling();
						break;
					}
					case ID:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
					AST tmp1090_AST_in = (AST)_t;
					match(_t,ID);
					_t = _t.getNextSibling();
					}
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case COLUMNLABEL:
					case LABEL:
					{
						label_constant(_t);
						_t = _retTree;
						break;
					}
					case PERIOD:
					case PROPARSEDIRECTIVE:
					case AATRACE:
					case ACCUMULATE:
					case ALTER:
					case ANALYZE:
					case APPLY:
					case ASSIGN:
					case BELL:
					case BTOS:
					case BUFFERCOMPARE:
					case BUFFERCOPY:
					case CALL:
					case CASE:
					case CHOOSE:
					case CLEAR:
					case CLOSE:
					case COLOR:
					case COMPILE:
					case CONNECT:
					case CREATE:
					case DDE:
					case DECLARE:
					case DEFINE:
					case DELETE_KW:
					case DICTIONARY:
					case DISABLE:
					case DISCONNECT:
					case DISPLAY:
					case DO:
					case DOS:
					case DOWN:
					case DROP:
					case EMPTY:
					case ENABLE:
					case EXPORT:
					case FETCH:
					case FIND:
					case FOR:
					case FORMAT:
					case FUNCTION:
					case GET:
					case GETKEYVALUE:
					case GRANT:
					case HIDE:
					case IF:
					case IMPORT:
					case INPUT:
					case INPUTOUTPUT:
					case INSERT:
					case LEAVE:
					case LOAD:
					case MESSAGE:
					case MPE:
					case NEXT:
					case NEXTPROMPT:
					case ON:
					case OPEN:
					case OS2:
					case OS400:
					case OSAPPEND:
					case OSCOMMAND:
					case OSCOPY:
					case OSCREATEDIR:
					case OSDELETE:
					case OSRENAME:
					case OUTPUT:
					case OVERRIDE:
					case PAGE:
					case PAUSE:
					case PERSISTENT:
					case PROCEDURE:
					case PROCESS:
					case PROMPTFOR:
					case PUBLISH:
					case PUT:
					case PUTKEYVALUE:
					case QUIT:
					case RAWTRANSFER:
					case READKEY:
					case RELEASE:
					case REPEAT:
					case REPOSITION:
					case RETURN:
					case REVERT:
					case REVOKE:
					case RUN:
					case SAVE:
					case SCROLL:
					case SEEK:
					case SELECT:
					case SET:
					case SHOWSTATS:
					case STATUS:
					case STOP:
					case SUBSCRIBE:
					case SYSTEMDIALOG:
					case SYSTEMHELP:
					case TRANSACTIONMODE:
					case TRIGGER:
					case UNDERLINE:
					case UNDO:
					case UNIX:
					case UNLOAD:
					case UNSUBSCRIBE:
					case UP:
					case UPDATE:
					case USE:
					case VALIDATE:
					case VIEW:
					case VMS:
					case WAITFOR:
					case Expr_statement:
					case BLOCK_LABEL:
					case COPYLOB:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
					break;
				}
				case PERIOD:
				case PROPARSEDIRECTIVE:
				case AATRACE:
				case ACCUMULATE:
				case ALTER:
				case ANALYZE:
				case APPLY:
				case ASSIGN:
				case BELL:
				case BTOS:
				case BUFFERCOMPARE:
				case BUFFERCOPY:
				case CALL:
				case CASE:
				case CHOOSE:
				case CLEAR:
				case CLOSE:
				case COLOR:
				case COMPILE:
				case CONNECT:
				case CREATE:
				case DDE:
				case DECLARE:
				case DEFINE:
				case DELETE_KW:
				case DICTIONARY:
				case DISABLE:
				case DISCONNECT:
				case DISPLAY:
				case DO:
				case DOS:
				case DOWN:
				case DROP:
				case EMPTY:
				case ENABLE:
				case EXPORT:
				case FETCH:
				case FIND:
				case FOR:
				case FORMAT:
				case FUNCTION:
				case GET:
				case GETKEYVALUE:
				case GRANT:
				case HIDE:
				case IF:
				case IMPORT:
				case INPUT:
				case INPUTOUTPUT:
				case INSERT:
				case LEAVE:
				case LOAD:
				case MESSAGE:
				case MPE:
				case NEXT:
				case NEXTPROMPT:
				case ON:
				case OPEN:
				case OS2:
				case OS400:
				case OSAPPEND:
				case OSCOMMAND:
				case OSCOPY:
				case OSCREATEDIR:
				case OSDELETE:
				case OSRENAME:
				case OUTPUT:
				case OVERRIDE:
				case PAGE:
				case PAUSE:
				case PERSISTENT:
				case PROCEDURE:
				case PROCESS:
				case PROMPTFOR:
				case PUBLISH:
				case PUT:
				case PUTKEYVALUE:
				case QUIT:
				case RAWTRANSFER:
				case READKEY:
				case RELEASE:
				case REPEAT:
				case REPOSITION:
				case RETURN:
				case REVERT:
				case REVOKE:
				case RUN:
				case SAVE:
				case SCROLL:
				case SEEK:
				case SELECT:
				case SET:
				case SHOWSTATS:
				case STATUS:
				case STOP:
				case SUBSCRIBE:
				case SYSTEMDIALOG:
				case SYSTEMHELP:
				case TRANSACTIONMODE:
				case TRIGGER:
				case UNDERLINE:
				case UNDO:
				case UNIX:
				case UNLOAD:
				case UNSUBSCRIBE:
				case UP:
				case UPDATE:
				case USE:
				case VALIDATE:
				case VIEW:
				case VMS:
				case WAITFOR:
				case Expr_statement:
				case BLOCK_LABEL:
				case COPYLOB:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				break;
			}
			case ASSIGN:
			{
				AST tmp1091_AST_in = (AST)_t;
				match(_t,ASSIGN);
				_t = _t.getNextSibling();
				AST tmp1092_AST_in = (AST)_t;
				match(_t,OF);
				_t = _t.getNextSibling();
				field(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case TABLE:
				{
					AST __t1662 = _t;
					AST tmp1093_AST_in = (AST)_t;
					match(_t,TABLE);
					_t = _t.getFirstChild();
					AST tmp1094_AST_in = (AST)_t;
					match(_t,LABEL);
					_t = _t.getNextSibling();
					constant(_t);
					_t = _retTree;
					_t = __t1662;
					_t = _t.getNextSibling();
					break;
				}
				case PERIOD:
				case PROPARSEDIRECTIVE:
				case AATRACE:
				case ACCUMULATE:
				case ALTER:
				case ANALYZE:
				case APPLY:
				case ASSIGN:
				case BELL:
				case BTOS:
				case BUFFERCOMPARE:
				case BUFFERCOPY:
				case CALL:
				case CASE:
				case CHOOSE:
				case CLEAR:
				case CLOSE:
				case COLOR:
				case COMPILE:
				case CONNECT:
				case CREATE:
				case DDE:
				case DECLARE:
				case DEFINE:
				case DELETE_KW:
				case DICTIONARY:
				case DISABLE:
				case DISCONNECT:
				case DISPLAY:
				case DO:
				case DOS:
				case DOWN:
				case DROP:
				case EMPTY:
				case ENABLE:
				case EXPORT:
				case FETCH:
				case FIND:
				case FOR:
				case FORMAT:
				case FUNCTION:
				case GET:
				case GETKEYVALUE:
				case GRANT:
				case HIDE:
				case IF:
				case IMPORT:
				case INPUT:
				case INPUTOUTPUT:
				case INSERT:
				case LEAVE:
				case LOAD:
				case MESSAGE:
				case MPE:
				case NEXT:
				case NEXTPROMPT:
				case OLD:
				case ON:
				case OPEN:
				case OS2:
				case OS400:
				case OSAPPEND:
				case OSCOMMAND:
				case OSCOPY:
				case OSCREATEDIR:
				case OSDELETE:
				case OSRENAME:
				case OUTPUT:
				case OVERRIDE:
				case PAGE:
				case PAUSE:
				case PERSISTENT:
				case PROCEDURE:
				case PROCESS:
				case PROMPTFOR:
				case PUBLISH:
				case PUT:
				case PUTKEYVALUE:
				case QUIT:
				case RAWTRANSFER:
				case READKEY:
				case RELEASE:
				case REPEAT:
				case REPOSITION:
				case RETURN:
				case REVERT:
				case REVOKE:
				case RUN:
				case SAVE:
				case SCROLL:
				case SEEK:
				case SELECT:
				case SET:
				case SHOWSTATS:
				case STATUS:
				case STOP:
				case SUBSCRIBE:
				case SYSTEMDIALOG:
				case SYSTEMHELP:
				case TRANSACTIONMODE:
				case TRIGGER:
				case UNDERLINE:
				case UNDO:
				case UNIX:
				case UNLOAD:
				case UNSUBSCRIBE:
				case UP:
				case UPDATE:
				case USE:
				case VALIDATE:
				case VIEW:
				case VMS:
				case WAITFOR:
				case Expr_statement:
				case BLOCK_LABEL:
				case COPYLOB:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case OLD:
				{
					AST tmp1095_AST_in = (AST)_t;
					match(_t,OLD);
					_t = _t.getNextSibling();
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case VALUE:
					{
						AST tmp1096_AST_in = (AST)_t;
						match(_t,VALUE);
						_t = _t.getNextSibling();
						break;
					}
					case ID:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
					id = (AST)_t;
					match(_t,ID);
					_t = _t.getNextSibling();
					{
					if (_t==null) _t=ASTNULL;
					if ((_tokenSet_16.member(_t.getType()))) {
						defineparam_var(_t);
						_t = _retTree;
					}
					else if ((_tokenSet_17.member(_t.getType()))) {
					}
					else {
						throw new NoViableAltException(_t);
					}
					
					}
					break;
				}
				case PERIOD:
				case PROPARSEDIRECTIVE:
				case AATRACE:
				case ACCUMULATE:
				case ALTER:
				case ANALYZE:
				case APPLY:
				case ASSIGN:
				case BELL:
				case BTOS:
				case BUFFERCOMPARE:
				case BUFFERCOPY:
				case CALL:
				case CASE:
				case CHOOSE:
				case CLEAR:
				case CLOSE:
				case COLOR:
				case COMPILE:
				case CONNECT:
				case CREATE:
				case DDE:
				case DECLARE:
				case DEFINE:
				case DELETE_KW:
				case DICTIONARY:
				case DISABLE:
				case DISCONNECT:
				case DISPLAY:
				case DO:
				case DOS:
				case DOWN:
				case DROP:
				case EMPTY:
				case ENABLE:
				case EXPORT:
				case FETCH:
				case FIND:
				case FOR:
				case FORMAT:
				case FUNCTION:
				case GET:
				case GETKEYVALUE:
				case GRANT:
				case HIDE:
				case IF:
				case IMPORT:
				case INPUT:
				case INPUTOUTPUT:
				case INSERT:
				case LEAVE:
				case LOAD:
				case MESSAGE:
				case MPE:
				case NEXT:
				case NEXTPROMPT:
				case ON:
				case OPEN:
				case OS2:
				case OS400:
				case OSAPPEND:
				case OSCOMMAND:
				case OSCOPY:
				case OSCREATEDIR:
				case OSDELETE:
				case OSRENAME:
				case OUTPUT:
				case OVERRIDE:
				case PAGE:
				case PAUSE:
				case PERSISTENT:
				case PROCEDURE:
				case PROCESS:
				case PROMPTFOR:
				case PUBLISH:
				case PUT:
				case PUTKEYVALUE:
				case QUIT:
				case RAWTRANSFER:
				case READKEY:
				case RELEASE:
				case REPEAT:
				case REPOSITION:
				case RETURN:
				case REVERT:
				case REVOKE:
				case RUN:
				case SAVE:
				case SCROLL:
				case SEEK:
				case SELECT:
				case SET:
				case SHOWSTATS:
				case STATUS:
				case STOP:
				case SUBSCRIBE:
				case SYSTEMDIALOG:
				case SYSTEMHELP:
				case TRANSACTIONMODE:
				case TRIGGER:
				case UNDERLINE:
				case UNDO:
				case UNIX:
				case UNLOAD:
				case UNSUBSCRIBE:
				case UP:
				case UPDATE:
				case USE:
				case VALIDATE:
				case VIEW:
				case VMS:
				case WAITFOR:
				case Expr_statement:
				case BLOCK_LABEL:
				case COPYLOB:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case OVERRIDE:
			{
				AST tmp1097_AST_in = (AST)_t;
				match(_t,OVERRIDE);
				_t = _t.getNextSibling();
				break;
			}
			case PERIOD:
			case PROPARSEDIRECTIVE:
			case AATRACE:
			case ACCUMULATE:
			case ALTER:
			case ANALYZE:
			case APPLY:
			case ASSIGN:
			case BELL:
			case BTOS:
			case BUFFERCOMPARE:
			case BUFFERCOPY:
			case CALL:
			case CASE:
			case CHOOSE:
			case CLEAR:
			case CLOSE:
			case COLOR:
			case COMPILE:
			case CONNECT:
			case CREATE:
			case DDE:
			case DECLARE:
			case DEFINE:
			case DELETE_KW:
			case DICTIONARY:
			case DISABLE:
			case DISCONNECT:
			case DISPLAY:
			case DO:
			case DOS:
			case DOWN:
			case DROP:
			case EMPTY:
			case ENABLE:
			case EXPORT:
			case FETCH:
			case FIND:
			case FOR:
			case FORMAT:
			case FUNCTION:
			case GET:
			case GETKEYVALUE:
			case GRANT:
			case HIDE:
			case IF:
			case IMPORT:
			case INPUT:
			case INPUTOUTPUT:
			case INSERT:
			case LEAVE:
			case LOAD:
			case MESSAGE:
			case MPE:
			case NEXT:
			case NEXTPROMPT:
			case ON:
			case OPEN:
			case OS2:
			case OS400:
			case OSAPPEND:
			case OSCOMMAND:
			case OSCOPY:
			case OSCREATEDIR:
			case OSDELETE:
			case OSRENAME:
			case OUTPUT:
			case PAGE:
			case PAUSE:
			case PERSISTENT:
			case PROCEDURE:
			case PROCESS:
			case PROMPTFOR:
			case PUBLISH:
			case PUT:
			case PUTKEYVALUE:
			case QUIT:
			case RAWTRANSFER:
			case READKEY:
			case RELEASE:
			case REPEAT:
			case REPOSITION:
			case RETURN:
			case REVERT:
			case REVOKE:
			case RUN:
			case SAVE:
			case SCROLL:
			case SEEK:
			case SELECT:
			case SET:
			case SHOWSTATS:
			case STATUS:
			case STOP:
			case SUBSCRIBE:
			case SYSTEMDIALOG:
			case SYSTEMHELP:
			case TRANSACTIONMODE:
			case TRIGGER:
			case UNDERLINE:
			case UNDO:
			case UNIX:
			case UNLOAD:
			case UNSUBSCRIBE:
			case UP:
			case UPDATE:
			case USE:
			case VALIDATE:
			case VIEW:
			case VMS:
			case WAITFOR:
			case Expr_statement:
			case BLOCK_LABEL:
			case COPYLOB:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case REVERT:
			{
				AST tmp1098_AST_in = (AST)_t;
				match(_t,REVERT);
				_t = _t.getNextSibling();
				state_end(_t);
				_t = _retTree;
				break;
			}
			case PERSISTENT:
			{
				AST tmp1099_AST_in = (AST)_t;
				match(_t,PERSISTENT);
				_t = _t.getNextSibling();
				runstate(_t);
				_t = _retTree;
				break;
			}
			case PERIOD:
			case PROPARSEDIRECTIVE:
			case AATRACE:
			case ACCUMULATE:
			case ALTER:
			case ANALYZE:
			case APPLY:
			case ASSIGN:
			case BELL:
			case BTOS:
			case BUFFERCOMPARE:
			case BUFFERCOPY:
			case CALL:
			case CASE:
			case CHOOSE:
			case CLEAR:
			case CLOSE:
			case COLOR:
			case COMPILE:
			case CONNECT:
			case CREATE:
			case DDE:
			case DECLARE:
			case DEFINE:
			case DELETE_KW:
			case DICTIONARY:
			case DISABLE:
			case DISCONNECT:
			case DISPLAY:
			case DO:
			case DOS:
			case DOWN:
			case DROP:
			case EMPTY:
			case ENABLE:
			case EXPORT:
			case FETCH:
			case FIND:
			case FOR:
			case FORMAT:
			case FUNCTION:
			case GET:
			case GETKEYVALUE:
			case GRANT:
			case HIDE:
			case IF:
			case IMPORT:
			case INPUT:
			case INPUTOUTPUT:
			case INSERT:
			case LEAVE:
			case LOAD:
			case MESSAGE:
			case MPE:
			case NEXT:
			case NEXTPROMPT:
			case ON:
			case OPEN:
			case OS2:
			case OS400:
			case OSAPPEND:
			case OSCOMMAND:
			case OSCOPY:
			case OSCREATEDIR:
			case OSDELETE:
			case OSRENAME:
			case OUTPUT:
			case PAGE:
			case PAUSE:
			case PROCEDURE:
			case PROCESS:
			case PROMPTFOR:
			case PUBLISH:
			case PUT:
			case PUTKEYVALUE:
			case QUIT:
			case RAWTRANSFER:
			case READKEY:
			case RELEASE:
			case REPEAT:
			case REPOSITION:
			case RETURN:
			case REVOKE:
			case RUN:
			case SAVE:
			case SCROLL:
			case SEEK:
			case SELECT:
			case SET:
			case SHOWSTATS:
			case STATUS:
			case STOP:
			case SUBSCRIBE:
			case SYSTEMDIALOG:
			case SYSTEMHELP:
			case TRANSACTIONMODE:
			case TRIGGER:
			case UNDERLINE:
			case UNDO:
			case UNIX:
			case UNLOAD:
			case UNSUBSCRIBE:
			case UP:
			case UPDATE:
			case USE:
			case VALIDATE:
			case VIEW:
			case VMS:
			case WAITFOR:
			case Expr_statement:
			case BLOCK_LABEL:
			case COPYLOB:
			{
				blockorstate(_t);
				_t = _retTree;
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
		}
		else {
			boolean synPredMatched1671 = false;
			if (((_tokenSet_18.member(_t.getType())))) {
				AST __t1671 = _t;
				synPredMatched1671 = true;
				inputState.guessing++;
				try {
					{
					{
					if (_t==null) _t=ASTNULL;
					if ((_t.getType()==ID)) {
						AST tmp1100_AST_in = (AST)_t;
						match(_t,ID);
						_t = _t.getNextSibling();
					}
					else if ((_tokenSet_19.member(_t.getType()))) {
						keyword(_t);
						_t = _retTree;
					}
					else {
						throw new NoViableAltException(_t);
					}
					
					}
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case ID:
					{
						AST tmp1101_AST_in = (AST)_t;
						match(_t,ID);
						_t = _t.getNextSibling();
						break;
					}
					case QSTRING:
					{
						AST tmp1102_AST_in = (AST)_t;
						match(_t,QSTRING);
						_t = _t.getNextSibling();
						break;
					}
					default:
						if (_t==null) _t=ASTNULL;
						if ((_tokenSet_19.member(_t.getType()))) {
							keyword(_t);
							_t = _retTree;
						}
					else {
						throw new NoViableAltException(_t);
					}
					}
					}
					state_end(_t);
					_t = _retTree;
					}
				}
				catch (RecognitionException pe) {
					synPredMatched1671 = false;
				}
				_t = __t1671;
				inputState.guessing--;
			}
			if ( synPredMatched1671 ) {
				{
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==ID)) {
					AST tmp1103_AST_in = (AST)_t;
					match(_t,ID);
					_t = _t.getNextSibling();
				}
				else if ((_tokenSet_19.member(_t.getType()))) {
					keyword(_t);
					_t = _retTree;
				}
				else {
					throw new NoViableAltException(_t);
				}
				
				}
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case ID:
				{
					AST tmp1104_AST_in = (AST)_t;
					match(_t,ID);
					_t = _t.getNextSibling();
					break;
				}
				case QSTRING:
				{
					AST tmp1105_AST_in = (AST)_t;
					match(_t,QSTRING);
					_t = _t.getNextSibling();
					break;
				}
				default:
					if (_t==null) _t=ASTNULL;
					if ((_tokenSet_19.member(_t.getType()))) {
						keyword(_t);
						_t = _retTree;
					}
				else {
					throw new NoViableAltException(_t);
				}
				}
				}
				state_end(_t);
				_t = _retTree;
			}
			else if ((_t.getType()==Event_list)) {
				eventlist(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case ANYWHERE:
				{
					AST tmp1106_AST_in = (AST)_t;
					match(_t,ANYWHERE);
					_t = _t.getNextSibling();
					break;
				}
				case OF:
				{
					AST tmp1107_AST_in = (AST)_t;
					match(_t,OF);
					_t = _t.getNextSibling();
					widgetlist(_t);
					_t = _retTree;
					{
					_loop1676:
					do {
						if (_t==null) _t=ASTNULL;
						if ((_t.getType()==OR)) {
							AST tmp1108_AST_in = (AST)_t;
							match(_t,OR);
							_t = _t.getNextSibling();
							eventlist(_t);
							_t = _retTree;
							AST tmp1109_AST_in = (AST)_t;
							match(_t,OF);
							_t = _t.getNextSibling();
							widgetlist(_t);
							_t = _retTree;
						}
						else {
							break _loop1676;
						}
						
					} while (true);
					}
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case ANYWHERE:
					{
						AST tmp1110_AST_in = (AST)_t;
						match(_t,ANYWHERE);
						_t = _t.getNextSibling();
						break;
					}
					case PERIOD:
					case PROPARSEDIRECTIVE:
					case AATRACE:
					case ACCUMULATE:
					case ALTER:
					case ANALYZE:
					case APPLY:
					case ASSIGN:
					case BELL:
					case BTOS:
					case BUFFERCOMPARE:
					case BUFFERCOPY:
					case CALL:
					case CASE:
					case CHOOSE:
					case CLEAR:
					case CLOSE:
					case COLOR:
					case COMPILE:
					case CONNECT:
					case CREATE:
					case DDE:
					case DECLARE:
					case DEFINE:
					case DELETE_KW:
					case DICTIONARY:
					case DISABLE:
					case DISCONNECT:
					case DISPLAY:
					case DO:
					case DOS:
					case DOWN:
					case DROP:
					case EMPTY:
					case ENABLE:
					case EXPORT:
					case FETCH:
					case FIND:
					case FOR:
					case FORMAT:
					case FUNCTION:
					case GET:
					case GETKEYVALUE:
					case GRANT:
					case HIDE:
					case IF:
					case IMPORT:
					case INPUT:
					case INPUTOUTPUT:
					case INSERT:
					case LEAVE:
					case LOAD:
					case MESSAGE:
					case MPE:
					case NEXT:
					case NEXTPROMPT:
					case ON:
					case OPEN:
					case OS2:
					case OS400:
					case OSAPPEND:
					case OSCOMMAND:
					case OSCOPY:
					case OSCREATEDIR:
					case OSDELETE:
					case OSRENAME:
					case OUTPUT:
					case PAGE:
					case PAUSE:
					case PERSISTENT:
					case PROCEDURE:
					case PROCESS:
					case PROMPTFOR:
					case PUBLISH:
					case PUT:
					case PUTKEYVALUE:
					case QUIT:
					case RAWTRANSFER:
					case READKEY:
					case RELEASE:
					case REPEAT:
					case REPOSITION:
					case RETURN:
					case REVERT:
					case REVOKE:
					case RUN:
					case SAVE:
					case SCROLL:
					case SEEK:
					case SELECT:
					case SET:
					case SHOWSTATS:
					case STATUS:
					case STOP:
					case SUBSCRIBE:
					case SYSTEMDIALOG:
					case SYSTEMHELP:
					case TRANSACTIONMODE:
					case TRIGGER:
					case UNDERLINE:
					case UNDO:
					case UNIX:
					case UNLOAD:
					case UNSUBSCRIBE:
					case UP:
					case UPDATE:
					case USE:
					case VALIDATE:
					case VIEW:
					case VMS:
					case WAITFOR:
					case Expr_statement:
					case BLOCK_LABEL:
					case COPYLOB:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case REVERT:
				{
					AST tmp1111_AST_in = (AST)_t;
					match(_t,REVERT);
					_t = _t.getNextSibling();
					state_end(_t);
					_t = _retTree;
					break;
				}
				case PERSISTENT:
				{
					AST tmp1112_AST_in = (AST)_t;
					match(_t,PERSISTENT);
					_t = _t.getNextSibling();
					AST tmp1113_AST_in = (AST)_t;
					match(_t,RUN);
					_t = _t.getNextSibling();
					filenameorvalue(_t);
					_t = _retTree;
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case IN_KW:
					{
						AST __t1680 = _t;
						AST tmp1114_AST_in = (AST)_t;
						match(_t,IN_KW);
						_t = _t.getFirstChild();
						expression(_t);
						_t = _retTree;
						_t = __t1680;
						_t = _t.getNextSibling();
						break;
					}
					case EOF:
					case PERIOD:
					case Parameter_list:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case Parameter_list:
					{
						AST __t1682 = _t;
						AST tmp1115_AST_in = (AST)_t;
						match(_t,Parameter_list);
						_t = _t.getFirstChild();
						AST tmp1116_AST_in = (AST)_t;
						match(_t,LEFTPAREN);
						_t = _t.getNextSibling();
						{
						if (_t==null) _t=ASTNULL;
						if ((_t.getType()==INPUT)) {
							AST tmp1117_AST_in = (AST)_t;
							match(_t,INPUT);
							_t = _t.getNextSibling();
						}
						else if ((_tokenSet_4.member(_t.getType()))) {
						}
						else {
							throw new NoViableAltException(_t);
						}
						
						}
						expression(_t);
						_t = _retTree;
						{
						_loop1686:
						do {
							if (_t==null) _t=ASTNULL;
							if ((_t.getType()==COMMA)) {
								AST tmp1118_AST_in = (AST)_t;
								match(_t,COMMA);
								_t = _t.getNextSibling();
								{
								if (_t==null) _t=ASTNULL;
								if ((_t.getType()==INPUT)) {
									AST tmp1119_AST_in = (AST)_t;
									match(_t,INPUT);
									_t = _t.getNextSibling();
								}
								else if ((_tokenSet_4.member(_t.getType()))) {
								}
								else {
									throw new NoViableAltException(_t);
								}
								
								}
								expression(_t);
								_t = _retTree;
							}
							else {
								break _loop1686;
							}
							
						} while (true);
						}
						AST tmp1120_AST_in = (AST)_t;
						match(_t,RIGHTPAREN);
						_t = _t.getNextSibling();
						_t = __t1682;
						_t = _t.getNextSibling();
						break;
					}
					case EOF:
					case PERIOD:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
					state_end(_t);
					_t = _retTree;
					break;
				}
				case PERIOD:
				case PROPARSEDIRECTIVE:
				case AATRACE:
				case ACCUMULATE:
				case ALTER:
				case ANALYZE:
				case APPLY:
				case ASSIGN:
				case BELL:
				case BTOS:
				case BUFFERCOMPARE:
				case BUFFERCOPY:
				case CALL:
				case CASE:
				case CHOOSE:
				case CLEAR:
				case CLOSE:
				case COLOR:
				case COMPILE:
				case CONNECT:
				case CREATE:
				case DDE:
				case DECLARE:
				case DEFINE:
				case DELETE_KW:
				case DICTIONARY:
				case DISABLE:
				case DISCONNECT:
				case DISPLAY:
				case DO:
				case DOS:
				case DOWN:
				case DROP:
				case EMPTY:
				case ENABLE:
				case EXPORT:
				case FETCH:
				case FIND:
				case FOR:
				case FORMAT:
				case FUNCTION:
				case GET:
				case GETKEYVALUE:
				case GRANT:
				case HIDE:
				case IF:
				case IMPORT:
				case INPUT:
				case INPUTOUTPUT:
				case INSERT:
				case LEAVE:
				case LOAD:
				case MESSAGE:
				case MPE:
				case NEXT:
				case NEXTPROMPT:
				case ON:
				case OPEN:
				case OS2:
				case OS400:
				case OSAPPEND:
				case OSCOMMAND:
				case OSCOPY:
				case OSCREATEDIR:
				case OSDELETE:
				case OSRENAME:
				case OUTPUT:
				case PAGE:
				case PAUSE:
				case PROCEDURE:
				case PROCESS:
				case PROMPTFOR:
				case PUBLISH:
				case PUT:
				case PUTKEYVALUE:
				case QUIT:
				case RAWTRANSFER:
				case READKEY:
				case RELEASE:
				case REPEAT:
				case REPOSITION:
				case RETURN:
				case REVOKE:
				case RUN:
				case SAVE:
				case SCROLL:
				case SEEK:
				case SELECT:
				case SET:
				case SHOWSTATS:
				case STATUS:
				case STOP:
				case SUBSCRIBE:
				case SYSTEMDIALOG:
				case SYSTEMHELP:
				case TRANSACTIONMODE:
				case TRIGGER:
				case UNDERLINE:
				case UNDO:
				case UNIX:
				case UNLOAD:
				case UNSUBSCRIBE:
				case UP:
				case UPDATE:
				case USE:
				case VALIDATE:
				case VIEW:
				case VMS:
				case WAITFOR:
				case Expr_statement:
				case BLOCK_LABEL:
				case COPYLOB:
				{
					blockorstate(_t);
					_t = _retTree;
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
			}
			else {
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t1645;
			_t = _t.getNextSibling();
			_retTree = _t;
		}
		
	public final void openstate(AST _t) throws RecognitionException {
		
		AST openstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2499 = _t;
		AST tmp1121_AST_in = (AST)_t;
		match(_t,OPEN);
		_t = _t.getFirstChild();
		AST tmp1122_AST_in = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		state_end(_t);
		_t = _retTree;
		_t = __t2499;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void openquerystate(AST _t) throws RecognitionException {
		
		AST openquerystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1704 = _t;
		AST tmp1123_AST_in = (AST)_t;
		match(_t,OPEN);
		_t = _t.getFirstChild();
		AST tmp1124_AST_in = (AST)_t;
		match(_t,QUERY);
		_t = _t.getNextSibling();
		AST tmp1125_AST_in = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case FOR:
		{
			AST tmp1126_AST_in = (AST)_t;
			match(_t,FOR);
			_t = _t.getNextSibling();
			break;
		}
		case PRESELECT:
		{
			AST tmp1127_AST_in = (AST)_t;
			match(_t,PRESELECT);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		for_record_spec(_t);
		_t = _retTree;
		{
		_loop1710:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case QUERYTUNING:
			{
				querytuningphrase(_t);
				_t = _retTree;
				break;
			}
			case BY:
			{
				AST __t1707 = _t;
				AST tmp1128_AST_in = (AST)_t;
				match(_t,BY);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case DESCENDING:
				{
					AST tmp1129_AST_in = (AST)_t;
					match(_t,DESCENDING);
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t1707;
				_t = _t.getNextSibling();
				break;
			}
			case COLLATE:
			{
				collatephrase(_t);
				_t = _retTree;
				break;
			}
			case INDEXEDREPOSITION:
			{
				AST tmp1130_AST_in = (AST)_t;
				match(_t,INDEXEDREPOSITION);
				_t = _t.getNextSibling();
				break;
			}
			case MAXROWS:
			{
				AST __t1709 = _t;
				AST tmp1131_AST_in = (AST)_t;
				match(_t,MAXROWS);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1709;
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				break _loop1710;
			}
			}
		} while (true);
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1704;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void osappendstate(AST _t) throws RecognitionException {
		
		AST osappendstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1713 = _t;
		AST tmp1132_AST_in = (AST)_t;
		match(_t,OSAPPEND);
		_t = _t.getFirstChild();
		anyorvalue(_t);
		_t = _retTree;
		anyorvalue(_t);
		_t = _retTree;
		state_end(_t);
		_t = _retTree;
		_t = __t1713;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void oscommandstate(AST _t) throws RecognitionException {
		
		AST oscommandstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case OS400:
		{
			AST __t1715 = _t;
			AST tmp1133_AST_in = (AST)_t;
			match(_t,OS400);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case SILENT:
			{
				AST tmp1134_AST_in = (AST)_t;
				match(_t,SILENT);
				_t = _t.getNextSibling();
				break;
			}
			case NOWAIT:
			{
				AST tmp1135_AST_in = (AST)_t;
				match(_t,NOWAIT);
				_t = _t.getNextSibling();
				break;
			}
			case NOCONSOLE:
			{
				AST tmp1136_AST_in = (AST)_t;
				match(_t,NOCONSOLE);
				_t = _t.getNextSibling();
				break;
			}
			case EOF:
			case PERIOD:
			case VALUE:
			case TYPELESS_TOKEN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			{
			_loop1718:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==VALUE||_t.getType()==TYPELESS_TOKEN)) {
					anyorvalue(_t);
					_t = _retTree;
				}
				else {
					break _loop1718;
				}
				
			} while (true);
			}
			state_end(_t);
			_t = _retTree;
			_t = __t1715;
			_t = _t.getNextSibling();
			break;
		}
		case BTOS:
		{
			AST __t1719 = _t;
			AST tmp1137_AST_in = (AST)_t;
			match(_t,BTOS);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case SILENT:
			{
				AST tmp1138_AST_in = (AST)_t;
				match(_t,SILENT);
				_t = _t.getNextSibling();
				break;
			}
			case NOWAIT:
			{
				AST tmp1139_AST_in = (AST)_t;
				match(_t,NOWAIT);
				_t = _t.getNextSibling();
				break;
			}
			case NOCONSOLE:
			{
				AST tmp1140_AST_in = (AST)_t;
				match(_t,NOCONSOLE);
				_t = _t.getNextSibling();
				break;
			}
			case EOF:
			case PERIOD:
			case VALUE:
			case TYPELESS_TOKEN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			{
			_loop1722:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==VALUE||_t.getType()==TYPELESS_TOKEN)) {
					anyorvalue(_t);
					_t = _retTree;
				}
				else {
					break _loop1722;
				}
				
			} while (true);
			}
			state_end(_t);
			_t = _retTree;
			_t = __t1719;
			_t = _t.getNextSibling();
			break;
		}
		case DOS:
		{
			AST __t1723 = _t;
			AST tmp1141_AST_in = (AST)_t;
			match(_t,DOS);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case SILENT:
			{
				AST tmp1142_AST_in = (AST)_t;
				match(_t,SILENT);
				_t = _t.getNextSibling();
				break;
			}
			case NOWAIT:
			{
				AST tmp1143_AST_in = (AST)_t;
				match(_t,NOWAIT);
				_t = _t.getNextSibling();
				break;
			}
			case NOCONSOLE:
			{
				AST tmp1144_AST_in = (AST)_t;
				match(_t,NOCONSOLE);
				_t = _t.getNextSibling();
				break;
			}
			case EOF:
			case PERIOD:
			case VALUE:
			case TYPELESS_TOKEN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			{
			_loop1726:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==VALUE||_t.getType()==TYPELESS_TOKEN)) {
					anyorvalue(_t);
					_t = _retTree;
				}
				else {
					break _loop1726;
				}
				
			} while (true);
			}
			state_end(_t);
			_t = _retTree;
			_t = __t1723;
			_t = _t.getNextSibling();
			break;
		}
		case MPE:
		{
			AST __t1727 = _t;
			AST tmp1145_AST_in = (AST)_t;
			match(_t,MPE);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case SILENT:
			{
				AST tmp1146_AST_in = (AST)_t;
				match(_t,SILENT);
				_t = _t.getNextSibling();
				break;
			}
			case NOWAIT:
			{
				AST tmp1147_AST_in = (AST)_t;
				match(_t,NOWAIT);
				_t = _t.getNextSibling();
				break;
			}
			case NOCONSOLE:
			{
				AST tmp1148_AST_in = (AST)_t;
				match(_t,NOCONSOLE);
				_t = _t.getNextSibling();
				break;
			}
			case EOF:
			case PERIOD:
			case VALUE:
			case TYPELESS_TOKEN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			{
			_loop1730:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==VALUE||_t.getType()==TYPELESS_TOKEN)) {
					anyorvalue(_t);
					_t = _retTree;
				}
				else {
					break _loop1730;
				}
				
			} while (true);
			}
			state_end(_t);
			_t = _retTree;
			_t = __t1727;
			_t = _t.getNextSibling();
			break;
		}
		case OS2:
		{
			AST __t1731 = _t;
			AST tmp1149_AST_in = (AST)_t;
			match(_t,OS2);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case SILENT:
			{
				AST tmp1150_AST_in = (AST)_t;
				match(_t,SILENT);
				_t = _t.getNextSibling();
				break;
			}
			case NOWAIT:
			{
				AST tmp1151_AST_in = (AST)_t;
				match(_t,NOWAIT);
				_t = _t.getNextSibling();
				break;
			}
			case NOCONSOLE:
			{
				AST tmp1152_AST_in = (AST)_t;
				match(_t,NOCONSOLE);
				_t = _t.getNextSibling();
				break;
			}
			case EOF:
			case PERIOD:
			case VALUE:
			case TYPELESS_TOKEN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			{
			_loop1734:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==VALUE||_t.getType()==TYPELESS_TOKEN)) {
					anyorvalue(_t);
					_t = _retTree;
				}
				else {
					break _loop1734;
				}
				
			} while (true);
			}
			state_end(_t);
			_t = _retTree;
			_t = __t1731;
			_t = _t.getNextSibling();
			break;
		}
		case OSCOMMAND:
		{
			AST __t1735 = _t;
			AST tmp1153_AST_in = (AST)_t;
			match(_t,OSCOMMAND);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case SILENT:
			{
				AST tmp1154_AST_in = (AST)_t;
				match(_t,SILENT);
				_t = _t.getNextSibling();
				break;
			}
			case NOWAIT:
			{
				AST tmp1155_AST_in = (AST)_t;
				match(_t,NOWAIT);
				_t = _t.getNextSibling();
				break;
			}
			case NOCONSOLE:
			{
				AST tmp1156_AST_in = (AST)_t;
				match(_t,NOCONSOLE);
				_t = _t.getNextSibling();
				break;
			}
			case EOF:
			case PERIOD:
			case VALUE:
			case TYPELESS_TOKEN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			{
			_loop1738:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==VALUE||_t.getType()==TYPELESS_TOKEN)) {
					anyorvalue(_t);
					_t = _retTree;
				}
				else {
					break _loop1738;
				}
				
			} while (true);
			}
			state_end(_t);
			_t = _retTree;
			_t = __t1735;
			_t = _t.getNextSibling();
			break;
		}
		case UNIX:
		{
			AST __t1739 = _t;
			AST tmp1157_AST_in = (AST)_t;
			match(_t,UNIX);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case SILENT:
			{
				AST tmp1158_AST_in = (AST)_t;
				match(_t,SILENT);
				_t = _t.getNextSibling();
				break;
			}
			case NOWAIT:
			{
				AST tmp1159_AST_in = (AST)_t;
				match(_t,NOWAIT);
				_t = _t.getNextSibling();
				break;
			}
			case NOCONSOLE:
			{
				AST tmp1160_AST_in = (AST)_t;
				match(_t,NOCONSOLE);
				_t = _t.getNextSibling();
				break;
			}
			case EOF:
			case PERIOD:
			case VALUE:
			case TYPELESS_TOKEN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			{
			_loop1742:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==VALUE||_t.getType()==TYPELESS_TOKEN)) {
					anyorvalue(_t);
					_t = _retTree;
				}
				else {
					break _loop1742;
				}
				
			} while (true);
			}
			state_end(_t);
			_t = _retTree;
			_t = __t1739;
			_t = _t.getNextSibling();
			break;
		}
		case VMS:
		{
			AST __t1743 = _t;
			AST tmp1161_AST_in = (AST)_t;
			match(_t,VMS);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case SILENT:
			{
				AST tmp1162_AST_in = (AST)_t;
				match(_t,SILENT);
				_t = _t.getNextSibling();
				break;
			}
			case NOWAIT:
			{
				AST tmp1163_AST_in = (AST)_t;
				match(_t,NOWAIT);
				_t = _t.getNextSibling();
				break;
			}
			case NOCONSOLE:
			{
				AST tmp1164_AST_in = (AST)_t;
				match(_t,NOCONSOLE);
				_t = _t.getNextSibling();
				break;
			}
			case EOF:
			case PERIOD:
			case VALUE:
			case TYPELESS_TOKEN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			{
			_loop1746:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==VALUE||_t.getType()==TYPELESS_TOKEN)) {
					anyorvalue(_t);
					_t = _retTree;
				}
				else {
					break _loop1746;
				}
				
			} while (true);
			}
			state_end(_t);
			_t = _retTree;
			_t = __t1743;
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void oscopystate(AST _t) throws RecognitionException {
		
		AST oscopystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1748 = _t;
		AST tmp1165_AST_in = (AST)_t;
		match(_t,OSCOPY);
		_t = _t.getFirstChild();
		anyorvalue(_t);
		_t = _retTree;
		anyorvalue(_t);
		_t = _retTree;
		state_end(_t);
		_t = _retTree;
		_t = __t1748;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void oscreatedirstate(AST _t) throws RecognitionException {
		
		AST oscreatedirstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1750 = _t;
		AST tmp1166_AST_in = (AST)_t;
		match(_t,OSCREATEDIR);
		_t = _t.getFirstChild();
		{
		int _cnt1752=0;
		_loop1752:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==VALUE||_t.getType()==TYPELESS_TOKEN)) {
				anyorvalue(_t);
				_t = _retTree;
			}
			else {
				if ( _cnt1752>=1 ) { break _loop1752; } else {throw new NoViableAltException(_t);}
			}
			
			_cnt1752++;
		} while (true);
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1750;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void osdeletestate(AST _t) throws RecognitionException {
		
		AST osdeletestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1754 = _t;
		AST tmp1167_AST_in = (AST)_t;
		match(_t,OSDELETE);
		_t = _t.getFirstChild();
		{
		int _cnt1757=0;
		_loop1757:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==VALUE)) {
				valueexpression(_t);
				_t = _retTree;
			}
			else if ((_tokenSet_20.member(_t.getType()))) {
				{
				AST tmp1168_AST_in = (AST)_t;
				match(_t,_tokenSet_20);
				_t = _t.getNextSibling();
				}
			}
			else {
				if ( _cnt1757>=1 ) { break _loop1757; } else {throw new NoViableAltException(_t);}
			}
			
			_cnt1757++;
		} while (true);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case RECURSIVE:
		{
			AST tmp1169_AST_in = (AST)_t;
			match(_t,RECURSIVE);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1754;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void osrenamestate(AST _t) throws RecognitionException {
		
		AST osrenamestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1764 = _t;
		AST tmp1170_AST_in = (AST)_t;
		match(_t,OSRENAME);
		_t = _t.getFirstChild();
		anyorvalue(_t);
		_t = _retTree;
		anyorvalue(_t);
		_t = _retTree;
		state_end(_t);
		_t = _retTree;
		_t = __t1764;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void outputclosestate(AST _t) throws RecognitionException {
		
		AST outputclosestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1766 = _t;
		AST tmp1171_AST_in = (AST)_t;
		match(_t,OUTPUT);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case STREAM:
		{
			stream_name(_t);
			_t = _retTree;
			break;
		}
		case CLOSE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp1172_AST_in = (AST)_t;
		match(_t,CLOSE);
		_t = _t.getNextSibling();
		state_end(_t);
		_t = _retTree;
		_t = __t1766;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void outputthroughstate(AST _t) throws RecognitionException {
		
		AST outputthroughstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1769 = _t;
		AST tmp1173_AST_in = (AST)_t;
		match(_t,OUTPUT);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case STREAM:
		{
			stream_name(_t);
			_t = _retTree;
			break;
		}
		case THROUGH:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp1174_AST_in = (AST)_t;
		match(_t,THROUGH);
		_t = _t.getNextSibling();
		io_phrase(_t);
		_t = _retTree;
		state_end(_t);
		_t = _retTree;
		_t = __t1769;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void outputtostate(AST _t) throws RecognitionException {
		
		AST outputtostate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1772 = _t;
		AST tmp1175_AST_in = (AST)_t;
		match(_t,OUTPUT);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case STREAM:
		{
			stream_name(_t);
			_t = _retTree;
			break;
		}
		case TO:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp1176_AST_in = (AST)_t;
		match(_t,TO);
		_t = _t.getNextSibling();
		io_phrase(_t);
		_t = _retTree;
		state_end(_t);
		_t = _retTree;
		_t = __t1772;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void pagestate(AST _t) throws RecognitionException {
		
		AST pagestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1777 = _t;
		AST tmp1177_AST_in = (AST)_t;
		match(_t,PAGE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case STREAM:
		{
			stream_name(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1777;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void pausestate(AST _t) throws RecognitionException {
		
		AST pausestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1786 = _t;
		AST tmp1178_AST_in = (AST)_t;
		match(_t,PAUSE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		if ((_tokenSet_4.member(_t.getType()))) {
			expression(_t);
			_t = _retTree;
		}
		else if ((_tokenSet_21.member(_t.getType()))) {
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		{
		_loop1791:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case BEFOREHIDE:
			{
				AST tmp1179_AST_in = (AST)_t;
				match(_t,BEFOREHIDE);
				_t = _t.getNextSibling();
				break;
			}
			case MESSAGE:
			{
				AST __t1789 = _t;
				AST tmp1180_AST_in = (AST)_t;
				match(_t,MESSAGE);
				_t = _t.getFirstChild();
				constant(_t);
				_t = _retTree;
				_t = __t1789;
				_t = _t.getNextSibling();
				break;
			}
			case NOMESSAGE:
			{
				AST tmp1181_AST_in = (AST)_t;
				match(_t,NOMESSAGE);
				_t = _t.getNextSibling();
				break;
			}
			case IN_KW:
			{
				AST __t1790 = _t;
				AST tmp1182_AST_in = (AST)_t;
				match(_t,IN_KW);
				_t = _t.getFirstChild();
				AST tmp1183_AST_in = (AST)_t;
				match(_t,WINDOW);
				_t = _t.getNextSibling();
				expression(_t);
				_t = _retTree;
				_t = __t1790;
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				break _loop1791;
			}
			}
		} while (true);
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1786;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void procedurestate(AST _t) throws RecognitionException {
		
		AST procedurestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST p = null;
		
		AST __t1795 = _t;
		p = _t==ASTNULL ? null :(AST)_t;
		match(_t,PROCEDURE);
		_t = _t.getFirstChild();
		if ( inputState.guessing==0 ) {
			tpSupport.procedure(p);
		}
		AST tmp1184_AST_in = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case EXTERNAL:
		{
			AST __t1797 = _t;
			AST tmp1185_AST_in = (AST)_t;
			match(_t,EXTERNAL);
			_t = _t.getFirstChild();
			constant(_t);
			_t = _retTree;
			if ( inputState.guessing==0 ) {
				tpSupport.procedureExternal();
			}
			{
			_loop1800:
			do {
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case CDECL_KW:
				{
					AST tmp1186_AST_in = (AST)_t;
					match(_t,CDECL_KW);
					_t = _t.getNextSibling();
					break;
				}
				case PASCAL_KW:
				{
					AST tmp1187_AST_in = (AST)_t;
					match(_t,PASCAL_KW);
					_t = _t.getNextSibling();
					break;
				}
				case STDCALL_KW:
				{
					AST tmp1188_AST_in = (AST)_t;
					match(_t,STDCALL_KW);
					_t = _t.getNextSibling();
					break;
				}
				case ORDINAL:
				{
					AST __t1799 = _t;
					AST tmp1189_AST_in = (AST)_t;
					match(_t,ORDINAL);
					_t = _t.getFirstChild();
					expression(_t);
					_t = _retTree;
					_t = __t1799;
					_t = _t.getNextSibling();
					break;
				}
				case PERSISTENT:
				{
					AST tmp1190_AST_in = (AST)_t;
					match(_t,PERSISTENT);
					_t = _t.getNextSibling();
					break;
				}
				default:
				{
					break _loop1800;
				}
				}
			} while (true);
			}
			_t = __t1797;
			_t = _t.getNextSibling();
			break;
		}
		case PRIVATE:
		{
			AST tmp1191_AST_in = (AST)_t;
			match(_t,PRIVATE);
			_t = _t.getNextSibling();
			break;
		}
		case IN_KW:
		{
			AST tmp1192_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getNextSibling();
			AST tmp1193_AST_in = (AST)_t;
			match(_t,SUPER);
			_t = _t.getNextSibling();
			break;
		}
		case PERIOD:
		case LEXCOLON:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		block_colon(_t);
		_t = _retTree;
		code_block(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case EOF:
		{
			AST tmp1194_AST_in = (AST)_t;
			match(_t,Token.EOF_TYPE);
			_t = _t.getNextSibling();
			break;
		}
		case END:
		{
			AST __t1802 = _t;
			AST tmp1195_AST_in = (AST)_t;
			match(_t,END);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case PROCEDURE:
			{
				AST tmp1196_AST_in = (AST)_t;
				match(_t,PROCEDURE);
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t1802;
			_t = _t.getNextSibling();
			state_end(_t);
			_t = _retTree;
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		if ( inputState.guessing==0 ) {
			tpSupport.procedureEnd();
		}
		_t = __t1795;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void processeventsstate(AST _t) throws RecognitionException {
		
		AST processeventsstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1807 = _t;
		AST tmp1197_AST_in = (AST)_t;
		match(_t,PROCESS);
		_t = _t.getFirstChild();
		AST tmp1198_AST_in = (AST)_t;
		match(_t,EVENTS);
		_t = _t.getNextSibling();
		state_end(_t);
		_t = _retTree;
		_t = __t1807;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void promptforstate(AST _t) throws RecognitionException {
		
		AST promptforstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1812 = _t;
		AST tmp1199_AST_in = (AST)_t;
		match(_t,PROMPTFOR);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case STREAM:
		{
			stream_name(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case EXCEPT:
		case GOON:
		case IN_KW:
		case UNLESSHIDDEN:
		case WITH:
		case Editing_phrase:
		case Form_item:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case UNLESSHIDDEN:
		{
			AST tmp1200_AST_in = (AST)_t;
			match(_t,UNLESSHIDDEN);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case EXCEPT:
		case GOON:
		case IN_KW:
		case WITH:
		case Editing_phrase:
		case Form_item:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop1816:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==Form_item)) {
				form_item(_t);
				_t = _retTree;
			}
			else {
				break _loop1816;
			}
			
		} while (true);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case GOON:
		{
			goonphrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case EXCEPT:
		case IN_KW:
		case WITH:
		case Editing_phrase:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case EXCEPT:
		{
			AST __t1819 = _t;
			AST tmp1201_AST_in = (AST)_t;
			match(_t,EXCEPT);
			_t = _t.getFirstChild();
			{
			_loop1821:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==Field_ref)) {
					field(_t);
					_t = _retTree;
				}
				else {
					break _loop1821;
				}
				
			} while (true);
			}
			_t = __t1819;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case IN_KW:
		case WITH:
		case Editing_phrase:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t1823 = _t;
			AST tmp1202_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			AST tmp1203_AST_in = (AST)_t;
			match(_t,WINDOW);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t1823;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case WITH:
		case Editing_phrase:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case WITH:
		{
			framephrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case Editing_phrase:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case Editing_phrase:
		{
			editingphrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1812;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void publishstate(AST _t) throws RecognitionException {
		
		AST publishstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1830 = _t;
		AST tmp1204_AST_in = (AST)_t;
		match(_t,PUBLISH);
		_t = _t.getFirstChild();
		expression(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case FROM:
		{
			AST __t1832 = _t;
			AST tmp1205_AST_in = (AST)_t;
			match(_t,FROM);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t1832;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case Parameter_list:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case Parameter_list:
		{
			parameterlist(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1830;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void putstate(AST _t) throws RecognitionException {
		
		AST putstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1835 = _t;
		AST tmp1206_AST_in = (AST)_t;
		match(_t,PUT);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		if ((_t.getType()==STREAM)) {
			stream_name(_t);
			_t = _retTree;
		}
		else if ((_tokenSet_22.member(_t.getType()))) {
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case CONTROL:
		{
			AST tmp1207_AST_in = (AST)_t;
			match(_t,CONTROL);
			_t = _t.getNextSibling();
			break;
		}
		case UNFORMATTED:
		{
			AST tmp1208_AST_in = (AST)_t;
			match(_t,UNFORMATTED);
			_t = _t.getNextSibling();
			break;
		}
		default:
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_23.member(_t.getType()))) {
			}
		else {
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop1850:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case SKIP:
			{
				skipphrase(_t);
				_t = _retTree;
				break;
			}
			case SPACE:
			{
				spacephrase(_t);
				_t = _retTree;
				break;
			}
			default:
				boolean synPredMatched1842 = false;
				if (((_t.getType()==NULL_KW))) {
					AST __t1842 = _t;
					synPredMatched1842 = true;
					inputState.guessing++;
					try {
						{
						AST __t1840 = _t;
						AST tmp1209_AST_in = (AST)_t;
						match(_t,NULL_KW);
						_t = _t.getFirstChild();
						{
						if (_t==null) _t=ASTNULL;
						switch ( _t.getType()) {
						case LEFTPAREN:
						{
							AST tmp1210_AST_in = (AST)_t;
							match(_t,LEFTPAREN);
							_t = _t.getNextSibling();
							break;
						}
						case 3:
						{
							break;
						}
						default:
						{
							throw new NoViableAltException(_t);
						}
						}
						}
						_t = __t1840;
						_t = _t.getNextSibling();
						}
					}
					catch (RecognitionException pe) {
						synPredMatched1842 = false;
					}
					_t = __t1842;
					inputState.guessing--;
				}
				if ( synPredMatched1842 ) {
					AST __t1843 = _t;
					AST tmp1211_AST_in = (AST)_t;
					match(_t,NULL_KW);
					_t = _t.getFirstChild();
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case LEFTPAREN:
					{
						funargs(_t);
						_t = _retTree;
						break;
					}
					case 3:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
					_t = __t1843;
					_t = _t.getNextSibling();
				}
				else if ((_tokenSet_4.member(_t.getType()))) {
					expression(_t);
					_t = _retTree;
					{
					_loop1849:
					do {
						if (_t==null) _t=ASTNULL;
						switch ( _t.getType()) {
						case FORMAT:
						{
							AST __t1846 = _t;
							AST tmp1212_AST_in = (AST)_t;
							match(_t,FORMAT);
							_t = _t.getFirstChild();
							expression(_t);
							_t = _retTree;
							_t = __t1846;
							_t = _t.getNextSibling();
							break;
						}
						case AT:
						{
							AST __t1847 = _t;
							AST tmp1213_AST_in = (AST)_t;
							match(_t,AT);
							_t = _t.getFirstChild();
							expression(_t);
							_t = _retTree;
							_t = __t1847;
							_t = _t.getNextSibling();
							break;
						}
						case TO:
						{
							AST __t1848 = _t;
							AST tmp1214_AST_in = (AST)_t;
							match(_t,TO);
							_t = _t.getFirstChild();
							expression(_t);
							_t = _retTree;
							_t = __t1848;
							_t = _t.getNextSibling();
							break;
						}
						default:
						{
							break _loop1849;
						}
						}
					} while (true);
					}
				}
			else {
				break _loop1850;
			}
			}
		} while (true);
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1835;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void putcursorstate(AST _t) throws RecognitionException {
		
		AST putcursorstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1852 = _t;
		AST tmp1215_AST_in = (AST)_t;
		match(_t,PUT);
		_t = _t.getFirstChild();
		AST tmp1216_AST_in = (AST)_t;
		match(_t,CURSOR);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case OFF:
		{
			AST tmp1217_AST_in = (AST)_t;
			match(_t,OFF);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case COLUMN:
		case ROW:
		{
			{
			_loop1857:
			do {
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case ROW:
				{
					AST __t1855 = _t;
					AST tmp1218_AST_in = (AST)_t;
					match(_t,ROW);
					_t = _t.getFirstChild();
					expression(_t);
					_t = _retTree;
					_t = __t1855;
					_t = _t.getNextSibling();
					break;
				}
				case COLUMN:
				{
					AST __t1856 = _t;
					AST tmp1219_AST_in = (AST)_t;
					match(_t,COLUMN);
					_t = _t.getFirstChild();
					expression(_t);
					_t = _retTree;
					_t = __t1856;
					_t = _t.getNextSibling();
					break;
				}
				default:
				{
					break _loop1857;
				}
				}
			} while (true);
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1852;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void putscreenstate(AST _t) throws RecognitionException {
		
		AST putscreenstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1859 = _t;
		AST tmp1220_AST_in = (AST)_t;
		match(_t,PUT);
		_t = _t.getFirstChild();
		AST tmp1221_AST_in = (AST)_t;
		match(_t,SCREEN);
		_t = _t.getNextSibling();
		{
		_loop1864:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case ATTRSPACE:
			{
				AST tmp1222_AST_in = (AST)_t;
				match(_t,ATTRSPACE);
				_t = _t.getNextSibling();
				break;
			}
			case NOATTRSPACE:
			{
				AST tmp1223_AST_in = (AST)_t;
				match(_t,NOATTRSPACE);
				_t = _t.getNextSibling();
				break;
			}
			case COLOR:
			{
				AST __t1861 = _t;
				AST tmp1224_AST_in = (AST)_t;
				match(_t,COLOR);
				_t = _t.getFirstChild();
				anyorvalue(_t);
				_t = _retTree;
				_t = __t1861;
				_t = _t.getNextSibling();
				break;
			}
			case COLUMN:
			{
				AST __t1862 = _t;
				AST tmp1225_AST_in = (AST)_t;
				match(_t,COLUMN);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1862;
				_t = _t.getNextSibling();
				break;
			}
			case ROW:
			{
				AST __t1863 = _t;
				AST tmp1226_AST_in = (AST)_t;
				match(_t,ROW);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1863;
				_t = _t.getNextSibling();
				break;
			}
			default:
				if (_t==null) _t=ASTNULL;
				if ((_tokenSet_4.member(_t.getType()))) {
					expression(_t);
					_t = _retTree;
				}
			else {
				break _loop1864;
			}
			}
		} while (true);
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1859;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void putkeyvaluestate(AST _t) throws RecognitionException {
		
		AST putkeyvaluestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1876 = _t;
		AST tmp1227_AST_in = (AST)_t;
		match(_t,PUTKEYVALUE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case SECTION:
		{
			AST tmp1228_AST_in = (AST)_t;
			match(_t,SECTION);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			AST tmp1229_AST_in = (AST)_t;
			match(_t,KEY);
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==DEFAULT)) {
				AST tmp1230_AST_in = (AST)_t;
				match(_t,DEFAULT);
				_t = _t.getNextSibling();
			}
			else if ((_tokenSet_4.member(_t.getType()))) {
				expression(_t);
				_t = _retTree;
			}
			else {
				throw new NoViableAltException(_t);
			}
			
			}
			AST tmp1231_AST_in = (AST)_t;
			match(_t,VALUE);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			break;
		}
		case COLOR:
		case FONT:
		{
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case COLOR:
			{
				AST tmp1232_AST_in = (AST)_t;
				match(_t,COLOR);
				_t = _t.getNextSibling();
				break;
			}
			case FONT:
			{
				AST tmp1233_AST_in = (AST)_t;
				match(_t,FONT);
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			{
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_4.member(_t.getType()))) {
				expression(_t);
				_t = _retTree;
			}
			else if ((_t.getType()==ALL)) {
				AST tmp1234_AST_in = (AST)_t;
				match(_t,ALL);
				_t = _t.getNextSibling();
			}
			else {
				throw new NoViableAltException(_t);
			}
			
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp1235_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1876;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void quitstate(AST _t) throws RecognitionException {
		
		AST quitstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1902 = _t;
		AST tmp1236_AST_in = (AST)_t;
		match(_t,QUIT);
		_t = _t.getFirstChild();
		state_end(_t);
		_t = _retTree;
		_t = __t1902;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void rawtransferstate(AST _t) throws RecognitionException {
		
		AST rawtransferstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1926 = _t;
		AST tmp1237_AST_in = (AST)_t;
		match(_t,RAWTRANSFER);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case BUFFER:
		{
			AST tmp1238_AST_in = (AST)_t;
			match(_t,BUFFER);
			_t = _t.getNextSibling();
			break;
		}
		case FIELD:
		{
			AST tmp1239_AST_in = (AST)_t;
			match(_t,FIELD);
			_t = _t.getNextSibling();
			break;
		}
		case Field_ref:
		case RECORD_NAME:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case RECORD_NAME:
		{
			record_name(_t);
			_t = _retTree;
			break;
		}
		case Field_ref:
		{
			field(_t);
			_t = _retTree;
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp1240_AST_in = (AST)_t;
		match(_t,TO);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case BUFFER:
		{
			AST tmp1241_AST_in = (AST)_t;
			match(_t,BUFFER);
			_t = _t.getNextSibling();
			break;
		}
		case FIELD:
		{
			AST tmp1242_AST_in = (AST)_t;
			match(_t,FIELD);
			_t = _t.getNextSibling();
			break;
		}
		case Field_ref:
		case RECORD_NAME:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case RECORD_NAME:
		{
			record_name(_t);
			_t = _retTree;
			break;
		}
		case Field_ref:
		{
			field(_t);
			_t = _retTree;
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp1243_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1926;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void readkeystate(AST _t) throws RecognitionException {
		
		AST readkeystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1933 = _t;
		AST tmp1244_AST_in = (AST)_t;
		match(_t,READKEY);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case STREAM:
		{
			stream_name(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case PAUSE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case PAUSE:
		{
			AST __t1936 = _t;
			AST tmp1245_AST_in = (AST)_t;
			match(_t,PAUSE);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t1936;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1933;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void releasestate(AST _t) throws RecognitionException {
		
		AST releasestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1977 = _t;
		AST tmp1246_AST_in = (AST)_t;
		match(_t,RELEASE);
		_t = _t.getFirstChild();
		record_name(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp1247_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1977;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void releaseexternalstate(AST _t) throws RecognitionException {
		
		AST releaseexternalstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1980 = _t;
		AST tmp1248_AST_in = (AST)_t;
		match(_t,RELEASE);
		_t = _t.getFirstChild();
		AST tmp1249_AST_in = (AST)_t;
		match(_t,EXTERNAL);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		if ((_t.getType()==PROCEDURE)) {
			AST tmp1250_AST_in = (AST)_t;
			match(_t,PROCEDURE);
			_t = _t.getNextSibling();
		}
		else if ((_tokenSet_4.member(_t.getType()))) {
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		expression(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp1251_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1980;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void releaseobjectstate(AST _t) throws RecognitionException {
		
		AST releaseobjectstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1984 = _t;
		AST tmp1252_AST_in = (AST)_t;
		match(_t,RELEASE);
		_t = _t.getFirstChild();
		AST tmp1253_AST_in = (AST)_t;
		match(_t,OBJECT);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp1254_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1984;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void repositionstate(AST _t) throws RecognitionException {
		
		AST repositionstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1989 = _t;
		AST tmp1255_AST_in = (AST)_t;
		match(_t,REPOSITION);
		_t = _t.getFirstChild();
		AST tmp1256_AST_in = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case TO:
		{
			AST __t1991 = _t;
			AST tmp1257_AST_in = (AST)_t;
			match(_t,TO);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case ROWID:
			{
				AST tmp1258_AST_in = (AST)_t;
				match(_t,ROWID);
				_t = _t.getNextSibling();
				expression(_t);
				_t = _retTree;
				{
				_loop1994:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_t.getType()==COMMA)) {
						AST tmp1259_AST_in = (AST)_t;
						match(_t,COMMA);
						_t = _t.getNextSibling();
						expression(_t);
						_t = _retTree;
					}
					else {
						break _loop1994;
					}
					
				} while (true);
				}
				break;
			}
			case RECID:
			{
				AST tmp1260_AST_in = (AST)_t;
				match(_t,RECID);
				_t = _t.getNextSibling();
				expression(_t);
				_t = _retTree;
				break;
			}
			case ROW:
			{
				AST tmp1261_AST_in = (AST)_t;
				match(_t,ROW);
				_t = _t.getNextSibling();
				expression(_t);
				_t = _retTree;
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t1991;
			_t = _t.getNextSibling();
			break;
		}
		case ROW:
		{
			AST __t1995 = _t;
			AST tmp1262_AST_in = (AST)_t;
			match(_t,ROW);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t1995;
			_t = _t.getNextSibling();
			break;
		}
		case FORWARDS:
		{
			AST __t1996 = _t;
			AST tmp1263_AST_in = (AST)_t;
			match(_t,FORWARDS);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t1996;
			_t = _t.getNextSibling();
			break;
		}
		case BACKWARDS:
		{
			AST __t1997 = _t;
			AST tmp1264_AST_in = (AST)_t;
			match(_t,BACKWARDS);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t1997;
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp1265_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t1989;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void returnstate(AST _t) throws RecognitionException {
		
		AST returnstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2001 = _t;
		AST tmp1266_AST_in = (AST)_t;
		match(_t,RETURN);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		if ((_tokenSet_3.member(_t.getType()))) {
			return_options(_t);
			_t = _retTree;
		}
		else if ((_t.getType()==EOF||_t.getType()==PERIOD)) {
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2001;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void revokestate(AST _t) throws RecognitionException {
		
		AST revokestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2501 = _t;
		AST tmp1267_AST_in = (AST)_t;
		match(_t,REVOKE);
		_t = _t.getFirstChild();
		{
		grant_rev_opt(_t);
		_t = _retTree;
		}
		AST tmp1268_AST_in = (AST)_t;
		match(_t,ON);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case RECORD_NAME:
		{
			record_name(_t);
			_t = _retTree;
			break;
		}
		case ID:
		{
			AST tmp1269_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		grant_rev_to(_t);
		_t = _retTree;
		state_end(_t);
		_t = _retTree;
		_t = __t2501;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void runstate(AST _t) throws RecognitionException {
		
		AST runstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2023 = _t;
		AST tmp1270_AST_in = (AST)_t;
		match(_t,RUN);
		_t = _t.getFirstChild();
		filenameorvalue(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case LEFTANGLE:
		{
			AST tmp1271_AST_in = (AST)_t;
			match(_t,LEFTANGLE);
			_t = _t.getNextSibling();
			AST tmp1272_AST_in = (AST)_t;
			match(_t,LEFTANGLE);
			_t = _t.getNextSibling();
			filenameorvalue(_t);
			_t = _retTree;
			AST tmp1273_AST_in = (AST)_t;
			match(_t,RIGHTANGLE);
			_t = _t.getNextSibling();
			AST tmp1274_AST_in = (AST)_t;
			match(_t,RIGHTANGLE);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case ASYNCHRONOUS:
		case IN_KW:
		case NOERROR_KW:
		case ON:
		case PERSISTENT:
		case SET:
		case VALUE:
		case Parameter_list:
		case TYPELESS_TOKEN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop2045:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case PERSISTENT:
			{
				AST __t2026 = _t;
				AST tmp1275_AST_in = (AST)_t;
				match(_t,PERSISTENT);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case SET:
				{
					AST __t2028 = _t;
					AST tmp1276_AST_in = (AST)_t;
					match(_t,SET);
					_t = _t.getFirstChild();
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case Field_ref:
					{
						field(_t);
						_t = _retTree;
						break;
					}
					case 3:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
					_t = __t2028;
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t2026;
				_t = _t.getNextSibling();
				break;
			}
			case SET:
			{
				AST __t2030 = _t;
				AST tmp1277_AST_in = (AST)_t;
				match(_t,SET);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case Field_ref:
				{
					field(_t);
					_t = _retTree;
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t2030;
				_t = _t.getNextSibling();
				break;
			}
			case ON:
			{
				AST __t2032 = _t;
				AST tmp1278_AST_in = (AST)_t;
				match(_t,ON);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==SERVER)) {
					AST tmp1279_AST_in = (AST)_t;
					match(_t,SERVER);
					_t = _t.getNextSibling();
				}
				else if ((_tokenSet_4.member(_t.getType()))) {
				}
				else {
					throw new NoViableAltException(_t);
				}
				
				}
				expression(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case TRANSACTION:
				{
					AST tmp1280_AST_in = (AST)_t;
					match(_t,TRANSACTION);
					_t = _t.getNextSibling();
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case DISTINCT:
					{
						AST tmp1281_AST_in = (AST)_t;
						match(_t,DISTINCT);
						_t = _t.getNextSibling();
						break;
					}
					case 3:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t2032;
				_t = _t.getNextSibling();
				break;
			}
			case IN_KW:
			{
				AST __t2036 = _t;
				AST tmp1282_AST_in = (AST)_t;
				match(_t,IN_KW);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t2036;
				_t = _t.getNextSibling();
				break;
			}
			case ASYNCHRONOUS:
			{
				AST __t2037 = _t;
				AST tmp1283_AST_in = (AST)_t;
				match(_t,ASYNCHRONOUS);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case SET:
				{
					AST __t2039 = _t;
					AST tmp1284_AST_in = (AST)_t;
					match(_t,SET);
					_t = _t.getFirstChild();
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case Field_ref:
					{
						field(_t);
						_t = _retTree;
						break;
					}
					case 3:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
					_t = __t2039;
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				case EVENTPROCEDURE:
				case IN_KW:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case EVENTPROCEDURE:
				{
					AST __t2042 = _t;
					AST tmp1285_AST_in = (AST)_t;
					match(_t,EVENTPROCEDURE);
					_t = _t.getFirstChild();
					expression(_t);
					_t = _retTree;
					_t = __t2042;
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				case IN_KW:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case IN_KW:
				{
					AST __t2044 = _t;
					AST tmp1286_AST_in = (AST)_t;
					match(_t,IN_KW);
					_t = _t.getFirstChild();
					expression(_t);
					_t = _retTree;
					_t = __t2044;
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t2037;
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				break _loop2045;
			}
			}
		} while (true);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case Parameter_list:
		{
			parameterlist(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		case VALUE:
		case TYPELESS_TOKEN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop2048:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case NOERROR_KW:
			{
				AST tmp1287_AST_in = (AST)_t;
				match(_t,NOERROR_KW);
				_t = _t.getNextSibling();
				break;
			}
			case VALUE:
			case TYPELESS_TOKEN:
			{
				anyorvalue(_t);
				_t = _retTree;
				break;
			}
			default:
			{
				break _loop2048;
			}
			}
		} while (true);
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2023;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void runstoredprocedurestate(AST _t) throws RecognitionException {
		
		AST runstoredprocedurestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2050 = _t;
		AST tmp1288_AST_in = (AST)_t;
		match(_t,RUN);
		_t = _t.getFirstChild();
		AST tmp1289_AST_in = (AST)_t;
		match(_t,STOREDPROCEDURE);
		_t = _t.getNextSibling();
		AST tmp1290_AST_in = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case EQUAL:
		{
			assign_equal(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		case Parameter_list:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp1291_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case Parameter_list:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case Parameter_list:
		{
			parameterlist(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2050;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void runsuperstate(AST _t) throws RecognitionException {
		
		AST runsuperstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2055 = _t;
		AST tmp1292_AST_in = (AST)_t;
		match(_t,RUN);
		_t = _t.getFirstChild();
		AST tmp1293_AST_in = (AST)_t;
		match(_t,SUPER);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case Parameter_list:
		{
			parameterlist(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp1294_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2055;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void savecachestate(AST _t) throws RecognitionException {
		
		AST savecachestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2059 = _t;
		AST tmp1295_AST_in = (AST)_t;
		match(_t,SAVE);
		_t = _t.getFirstChild();
		AST tmp1296_AST_in = (AST)_t;
		match(_t,CACHE);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case CURRENT:
		{
			AST tmp1297_AST_in = (AST)_t;
			match(_t,CURRENT);
			_t = _t.getNextSibling();
			break;
		}
		case COMPLETE:
		{
			AST tmp1298_AST_in = (AST)_t;
			match(_t,COMPLETE);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		anyorvalue(_t);
		_t = _retTree;
		AST tmp1299_AST_in = (AST)_t;
		match(_t,TO);
		_t = _t.getNextSibling();
		filenameorvalue(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp1300_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2059;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void scrollstate(AST _t) throws RecognitionException {
		
		AST scrollstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2064 = _t;
		AST tmp1301_AST_in = (AST)_t;
		match(_t,SCROLL);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case FROMCURRENT:
		{
			AST tmp1302_AST_in = (AST)_t;
			match(_t,FROMCURRENT);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case DOWN:
		case UP:
		case WITH:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case UP:
		{
			AST tmp1303_AST_in = (AST)_t;
			match(_t,UP);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case DOWN:
		case WITH:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case DOWN:
		{
			AST tmp1304_AST_in = (AST)_t;
			match(_t,DOWN);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case WITH:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case WITH:
		{
			framephrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2064;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void seekstate(AST _t) throws RecognitionException {
		
		AST seekstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2077 = _t;
		AST tmp1305_AST_in = (AST)_t;
		match(_t,SEEK);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case INPUT:
		{
			AST tmp1306_AST_in = (AST)_t;
			match(_t,INPUT);
			_t = _t.getNextSibling();
			break;
		}
		case OUTPUT:
		{
			AST tmp1307_AST_in = (AST)_t;
			match(_t,OUTPUT);
			_t = _t.getNextSibling();
			break;
		}
		case STREAM:
		{
			stream_name(_t);
			_t = _retTree;
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp1308_AST_in = (AST)_t;
		match(_t,TO);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		if ((_tokenSet_4.member(_t.getType()))) {
			expression(_t);
			_t = _retTree;
		}
		else if ((_t.getType()==END)) {
			AST tmp1309_AST_in = (AST)_t;
			match(_t,END);
			_t = _t.getNextSibling();
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2077;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void selectstate(AST _t) throws RecognitionException {
		
		AST selectstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		selectstatea(_t);
		_t = _retTree;
		state_end(_t);
		_t = _retTree;
		_retTree = _t;
	}
	
	public final void setstate(AST _t) throws RecognitionException {
		
		AST setstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2095 = _t;
		AST tmp1310_AST_in = (AST)_t;
		match(_t,SET);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case STREAM:
		{
			stream_name(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case EXCEPT:
		case GOON:
		case IN_KW:
		case NOERROR_KW:
		case UNLESSHIDDEN:
		case WITH:
		case Editing_phrase:
		case Form_item:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case UNLESSHIDDEN:
		{
			AST tmp1311_AST_in = (AST)_t;
			match(_t,UNLESSHIDDEN);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case EXCEPT:
		case GOON:
		case IN_KW:
		case NOERROR_KW:
		case WITH:
		case Editing_phrase:
		case Form_item:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		if ( inputState.guessing==0 ) {
			tpSupport.updating(true);
		}
		{
		_loop2099:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==Form_item)) {
				form_item(_t);
				_t = _retTree;
			}
			else {
				break _loop2099;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			tpSupport.updating(false);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case GOON:
		{
			goonphrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case EXCEPT:
		case IN_KW:
		case NOERROR_KW:
		case WITH:
		case Editing_phrase:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case EXCEPT:
		{
			AST __t2102 = _t;
			AST tmp1312_AST_in = (AST)_t;
			match(_t,EXCEPT);
			_t = _t.getFirstChild();
			{
			_loop2104:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==Field_ref)) {
					field(_t);
					_t = _retTree;
				}
				else {
					break _loop2104;
				}
				
			} while (true);
			}
			_t = __t2102;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case IN_KW:
		case NOERROR_KW:
		case WITH:
		case Editing_phrase:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t2106 = _t;
			AST tmp1313_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			AST tmp1314_AST_in = (AST)_t;
			match(_t,WINDOW);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t2106;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		case WITH:
		case Editing_phrase:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case WITH:
		{
			framephrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		case Editing_phrase:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case Editing_phrase:
		{
			editingphrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp1315_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2095;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void showstatsstate(AST _t) throws RecognitionException {
		
		AST showstatsstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2117 = _t;
		AST tmp1316_AST_in = (AST)_t;
		match(_t,SHOWSTATS);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case CLEAR:
		{
			AST tmp1317_AST_in = (AST)_t;
			match(_t,CLEAR);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2117;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void statusstate(AST _t) throws RecognitionException {
		
		AST statusstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2147 = _t;
		AST tmp1318_AST_in = (AST)_t;
		match(_t,STATUS);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case DEFAULT:
		{
			AST __t2149 = _t;
			AST tmp1319_AST_in = (AST)_t;
			match(_t,DEFAULT);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_4.member(_t.getType()))) {
				expression(_t);
				_t = _retTree;
			}
			else if ((_t.getType()==3)) {
			}
			else {
				throw new NoViableAltException(_t);
			}
			
			}
			_t = __t2149;
			_t = _t.getNextSibling();
			break;
		}
		case INPUT:
		{
			AST __t2151 = _t;
			AST tmp1320_AST_in = (AST)_t;
			match(_t,INPUT);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case OFF:
			{
				AST tmp1321_AST_in = (AST)_t;
				match(_t,OFF);
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
				if (_t==null) _t=ASTNULL;
				if ((_tokenSet_4.member(_t.getType()))) {
					expression(_t);
					_t = _retTree;
				}
			else {
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t2151;
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t2154 = _t;
			AST tmp1322_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			AST tmp1323_AST_in = (AST)_t;
			match(_t,WINDOW);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t2154;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2147;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void stopstate(AST _t) throws RecognitionException {
		
		AST stopstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2156 = _t;
		AST tmp1324_AST_in = (AST)_t;
		match(_t,STOP);
		_t = _t.getFirstChild();
		state_end(_t);
		_t = _retTree;
		_t = __t2156;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void subscribestate(AST _t) throws RecognitionException {
		
		AST subscribestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2162 = _t;
		AST tmp1325_AST_in = (AST)_t;
		match(_t,SUBSCRIBE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		if ((_t.getType()==PROCEDURE)) {
			AST __t2164 = _t;
			AST tmp1326_AST_in = (AST)_t;
			match(_t,PROCEDURE);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t2164;
			_t = _t.getNextSibling();
		}
		else if ((_tokenSet_24.member(_t.getType()))) {
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		{
		if (_t==null) _t=ASTNULL;
		if ((_t.getType()==TO)) {
			AST tmp1327_AST_in = (AST)_t;
			match(_t,TO);
			_t = _t.getNextSibling();
		}
		else if ((_tokenSet_4.member(_t.getType()))) {
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		expression(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case ANYWHERE:
		{
			AST tmp1328_AST_in = (AST)_t;
			match(_t,ANYWHERE);
			_t = _t.getNextSibling();
			break;
		}
		case IN_KW:
		{
			AST __t2167 = _t;
			AST tmp1329_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t2167;
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case RUNPROCEDURE:
		{
			AST __t2169 = _t;
			AST tmp1330_AST_in = (AST)_t;
			match(_t,RUNPROCEDURE);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t2169;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp1331_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2162;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void systemdialogcolorstate(AST _t) throws RecognitionException {
		
		AST systemdialogcolorstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2179 = _t;
		AST tmp1332_AST_in = (AST)_t;
		match(_t,SYSTEMDIALOG);
		_t = _t.getFirstChild();
		AST tmp1333_AST_in = (AST)_t;
		match(_t,COLOR);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case UPDATE:
		{
			AST __t2181 = _t;
			AST tmp1334_AST_in = (AST)_t;
			match(_t,UPDATE);
			_t = _t.getFirstChild();
			field(_t);
			_t = _retTree;
			_t = __t2181;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case IN_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t2183 = _t;
			AST tmp1335_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			AST tmp1336_AST_in = (AST)_t;
			match(_t,WINDOW);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t2183;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2179;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void systemdialogfontstate(AST _t) throws RecognitionException {
		
		AST systemdialogfontstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2185 = _t;
		AST tmp1337_AST_in = (AST)_t;
		match(_t,SYSTEMDIALOG);
		_t = _t.getFirstChild();
		AST tmp1338_AST_in = (AST)_t;
		match(_t,FONT);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		{
		_loop2191:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case ANSIONLY:
			{
				AST tmp1339_AST_in = (AST)_t;
				match(_t,ANSIONLY);
				_t = _t.getNextSibling();
				break;
			}
			case FIXEDONLY:
			{
				AST tmp1340_AST_in = (AST)_t;
				match(_t,FIXEDONLY);
				_t = _t.getNextSibling();
				break;
			}
			case MAXSIZE:
			{
				AST __t2187 = _t;
				AST tmp1341_AST_in = (AST)_t;
				match(_t,MAXSIZE);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t2187;
				_t = _t.getNextSibling();
				break;
			}
			case MINSIZE:
			{
				AST __t2188 = _t;
				AST tmp1342_AST_in = (AST)_t;
				match(_t,MINSIZE);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t2188;
				_t = _t.getNextSibling();
				break;
			}
			case UPDATE:
			{
				AST __t2189 = _t;
				AST tmp1343_AST_in = (AST)_t;
				match(_t,UPDATE);
				_t = _t.getFirstChild();
				field(_t);
				_t = _retTree;
				_t = __t2189;
				_t = _t.getNextSibling();
				break;
			}
			case IN_KW:
			{
				AST __t2190 = _t;
				AST tmp1344_AST_in = (AST)_t;
				match(_t,IN_KW);
				_t = _t.getFirstChild();
				AST tmp1345_AST_in = (AST)_t;
				match(_t,WINDOW);
				_t = _t.getNextSibling();
				expression(_t);
				_t = _retTree;
				_t = __t2190;
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				break _loop2191;
			}
			}
		} while (true);
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2185;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void systemdialoggetdirstate(AST _t) throws RecognitionException {
		
		AST systemdialoggetdirstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2193 = _t;
		AST tmp1346_AST_in = (AST)_t;
		match(_t,SYSTEMDIALOG);
		_t = _t.getFirstChild();
		AST tmp1347_AST_in = (AST)_t;
		match(_t,GETDIR);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		{
		_loop2197:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case INITIALDIR:
			{
				AST __t2195 = _t;
				AST tmp1348_AST_in = (AST)_t;
				match(_t,INITIALDIR);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t2195;
				_t = _t.getNextSibling();
				break;
			}
			case RETURNTOSTARTDIR:
			{
				AST tmp1349_AST_in = (AST)_t;
				match(_t,RETURNTOSTARTDIR);
				_t = _t.getNextSibling();
				break;
			}
			case TITLE:
			{
				AST __t2196 = _t;
				AST tmp1350_AST_in = (AST)_t;
				match(_t,TITLE);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t2196;
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				break _loop2197;
			}
			}
		} while (true);
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2193;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void systemdialoggetfilestate(AST _t) throws RecognitionException {
		
		AST systemdialoggetfilestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2199 = _t;
		AST tmp1351_AST_in = (AST)_t;
		match(_t,SYSTEMDIALOG);
		_t = _t.getFirstChild();
		AST tmp1352_AST_in = (AST)_t;
		match(_t,GETFILE);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		{
		_loop2211:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case FILTERS:
			{
				AST __t2201 = _t;
				AST tmp1353_AST_in = (AST)_t;
				match(_t,FILTERS);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				expression(_t);
				_t = _retTree;
				{
				_loop2203:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_t.getType()==COMMA)) {
						AST tmp1354_AST_in = (AST)_t;
						match(_t,COMMA);
						_t = _t.getNextSibling();
						expression(_t);
						_t = _retTree;
						expression(_t);
						_t = _retTree;
					}
					else {
						break _loop2203;
					}
					
				} while (true);
				}
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case INITIALFILTER:
				{
					AST __t2205 = _t;
					AST tmp1355_AST_in = (AST)_t;
					match(_t,INITIALFILTER);
					_t = _t.getFirstChild();
					expression(_t);
					_t = _retTree;
					_t = __t2205;
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t2201;
				_t = _t.getNextSibling();
				break;
			}
			case ASKOVERWRITE:
			{
				AST tmp1356_AST_in = (AST)_t;
				match(_t,ASKOVERWRITE);
				_t = _t.getNextSibling();
				break;
			}
			case CREATETESTFILE:
			{
				AST tmp1357_AST_in = (AST)_t;
				match(_t,CREATETESTFILE);
				_t = _t.getNextSibling();
				break;
			}
			case DEFAULTEXTENSION:
			{
				AST __t2206 = _t;
				AST tmp1358_AST_in = (AST)_t;
				match(_t,DEFAULTEXTENSION);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t2206;
				_t = _t.getNextSibling();
				break;
			}
			case INITIALDIR:
			{
				AST __t2207 = _t;
				AST tmp1359_AST_in = (AST)_t;
				match(_t,INITIALDIR);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t2207;
				_t = _t.getNextSibling();
				break;
			}
			case MUSTEXIST:
			{
				AST tmp1360_AST_in = (AST)_t;
				match(_t,MUSTEXIST);
				_t = _t.getNextSibling();
				break;
			}
			case RETURNTOSTARTDIR:
			{
				AST tmp1361_AST_in = (AST)_t;
				match(_t,RETURNTOSTARTDIR);
				_t = _t.getNextSibling();
				break;
			}
			case SAVEAS:
			{
				AST tmp1362_AST_in = (AST)_t;
				match(_t,SAVEAS);
				_t = _t.getNextSibling();
				break;
			}
			case TITLE:
			{
				AST __t2208 = _t;
				AST tmp1363_AST_in = (AST)_t;
				match(_t,TITLE);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t2208;
				_t = _t.getNextSibling();
				break;
			}
			case USEFILENAME:
			{
				AST tmp1364_AST_in = (AST)_t;
				match(_t,USEFILENAME);
				_t = _t.getNextSibling();
				break;
			}
			case UPDATE:
			{
				AST __t2209 = _t;
				AST tmp1365_AST_in = (AST)_t;
				match(_t,UPDATE);
				_t = _t.getFirstChild();
				field(_t);
				_t = _retTree;
				_t = __t2209;
				_t = _t.getNextSibling();
				break;
			}
			case IN_KW:
			{
				AST __t2210 = _t;
				AST tmp1366_AST_in = (AST)_t;
				match(_t,IN_KW);
				_t = _t.getFirstChild();
				AST tmp1367_AST_in = (AST)_t;
				match(_t,WINDOW);
				_t = _t.getNextSibling();
				expression(_t);
				_t = _retTree;
				_t = __t2210;
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				break _loop2211;
			}
			}
		} while (true);
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2199;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void systemdialogprintersetupstate(AST _t) throws RecognitionException {
		
		AST systemdialogprintersetupstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2213 = _t;
		AST tmp1368_AST_in = (AST)_t;
		match(_t,SYSTEMDIALOG);
		_t = _t.getFirstChild();
		AST tmp1369_AST_in = (AST)_t;
		match(_t,PRINTERSETUP);
		_t = _t.getNextSibling();
		{
		_loop2218:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case NUMCOPIES:
			{
				AST __t2215 = _t;
				AST tmp1370_AST_in = (AST)_t;
				match(_t,NUMCOPIES);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t2215;
				_t = _t.getNextSibling();
				break;
			}
			case UPDATE:
			{
				AST __t2216 = _t;
				AST tmp1371_AST_in = (AST)_t;
				match(_t,UPDATE);
				_t = _t.getFirstChild();
				field(_t);
				_t = _retTree;
				_t = __t2216;
				_t = _t.getNextSibling();
				break;
			}
			case LANDSCAPE:
			{
				AST tmp1372_AST_in = (AST)_t;
				match(_t,LANDSCAPE);
				_t = _t.getNextSibling();
				break;
			}
			case PORTRAIT:
			{
				AST tmp1373_AST_in = (AST)_t;
				match(_t,PORTRAIT);
				_t = _t.getNextSibling();
				break;
			}
			case IN_KW:
			{
				AST __t2217 = _t;
				AST tmp1374_AST_in = (AST)_t;
				match(_t,IN_KW);
				_t = _t.getFirstChild();
				AST tmp1375_AST_in = (AST)_t;
				match(_t,WINDOW);
				_t = _t.getNextSibling();
				expression(_t);
				_t = _retTree;
				_t = __t2217;
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				break _loop2218;
			}
			}
		} while (true);
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2213;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void systemhelpstate(AST _t) throws RecognitionException {
		
		AST systemhelpstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2220 = _t;
		AST tmp1376_AST_in = (AST)_t;
		match(_t,SYSTEMHELP);
		_t = _t.getFirstChild();
		expression(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case WINDOWNAME:
		{
			AST __t2222 = _t;
			AST tmp1377_AST_in = (AST)_t;
			match(_t,WINDOWNAME);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t2222;
			_t = _t.getNextSibling();
			break;
		}
		case ALTERNATEKEY:
		case COMMAND:
		case CONTENTS:
		case CONTEXT:
		case CONTEXTPOPUP:
		case FINDER:
		case FORCEFILE:
		case HELP:
		case HELPTOPIC:
		case KEY:
		case MULTIPLEKEY:
		case PARTIALKEY:
		case POSITION:
		case QUIT:
		case SETCONTENTS:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case ALTERNATEKEY:
		{
			AST __t2224 = _t;
			AST tmp1378_AST_in = (AST)_t;
			match(_t,ALTERNATEKEY);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t2224;
			_t = _t.getNextSibling();
			break;
		}
		case CONTEXT:
		{
			AST __t2225 = _t;
			AST tmp1379_AST_in = (AST)_t;
			match(_t,CONTEXT);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t2225;
			_t = _t.getNextSibling();
			break;
		}
		case CONTENTS:
		{
			AST tmp1380_AST_in = (AST)_t;
			match(_t,CONTENTS);
			_t = _t.getNextSibling();
			break;
		}
		case SETCONTENTS:
		{
			AST __t2226 = _t;
			AST tmp1381_AST_in = (AST)_t;
			match(_t,SETCONTENTS);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t2226;
			_t = _t.getNextSibling();
			break;
		}
		case FINDER:
		{
			AST tmp1382_AST_in = (AST)_t;
			match(_t,FINDER);
			_t = _t.getNextSibling();
			break;
		}
		case CONTEXTPOPUP:
		{
			AST __t2227 = _t;
			AST tmp1383_AST_in = (AST)_t;
			match(_t,CONTEXTPOPUP);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t2227;
			_t = _t.getNextSibling();
			break;
		}
		case HELPTOPIC:
		{
			AST __t2228 = _t;
			AST tmp1384_AST_in = (AST)_t;
			match(_t,HELPTOPIC);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t2228;
			_t = _t.getNextSibling();
			break;
		}
		case KEY:
		{
			AST __t2229 = _t;
			AST tmp1385_AST_in = (AST)_t;
			match(_t,KEY);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t2229;
			_t = _t.getNextSibling();
			break;
		}
		case PARTIALKEY:
		{
			AST __t2230 = _t;
			AST tmp1386_AST_in = (AST)_t;
			match(_t,PARTIALKEY);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_4.member(_t.getType()))) {
				expression(_t);
				_t = _retTree;
			}
			else if ((_t.getType()==3)) {
			}
			else {
				throw new NoViableAltException(_t);
			}
			
			}
			_t = __t2230;
			_t = _t.getNextSibling();
			break;
		}
		case MULTIPLEKEY:
		{
			AST __t2232 = _t;
			AST tmp1387_AST_in = (AST)_t;
			match(_t,MULTIPLEKEY);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			AST tmp1388_AST_in = (AST)_t;
			match(_t,TEXT);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t2232;
			_t = _t.getNextSibling();
			break;
		}
		case COMMAND:
		{
			AST __t2233 = _t;
			AST tmp1389_AST_in = (AST)_t;
			match(_t,COMMAND);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t2233;
			_t = _t.getNextSibling();
			break;
		}
		case POSITION:
		{
			AST __t2234 = _t;
			AST tmp1390_AST_in = (AST)_t;
			match(_t,POSITION);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case MAXIMIZE:
			{
				AST tmp1391_AST_in = (AST)_t;
				match(_t,MAXIMIZE);
				_t = _t.getNextSibling();
				break;
			}
			case X:
			{
				AST tmp1392_AST_in = (AST)_t;
				match(_t,X);
				_t = _t.getNextSibling();
				expression(_t);
				_t = _retTree;
				AST tmp1393_AST_in = (AST)_t;
				match(_t,Y);
				_t = _t.getNextSibling();
				expression(_t);
				_t = _retTree;
				AST tmp1394_AST_in = (AST)_t;
				match(_t,WIDTH);
				_t = _t.getNextSibling();
				expression(_t);
				_t = _retTree;
				AST tmp1395_AST_in = (AST)_t;
				match(_t,HEIGHT);
				_t = _t.getNextSibling();
				expression(_t);
				_t = _retTree;
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t2234;
			_t = _t.getNextSibling();
			break;
		}
		case FORCEFILE:
		{
			AST tmp1396_AST_in = (AST)_t;
			match(_t,FORCEFILE);
			_t = _t.getNextSibling();
			break;
		}
		case HELP:
		{
			AST tmp1397_AST_in = (AST)_t;
			match(_t,HELP);
			_t = _t.getNextSibling();
			break;
		}
		case QUIT:
		{
			AST tmp1398_AST_in = (AST)_t;
			match(_t,QUIT);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2220;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void transactionmodeautomaticstate(AST _t) throws RecognitionException {
		
		AST transactionmodeautomaticstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2263 = _t;
		AST tmp1399_AST_in = (AST)_t;
		match(_t,TRANSACTIONMODE);
		_t = _t.getFirstChild();
		AST tmp1400_AST_in = (AST)_t;
		match(_t,AUTOMATIC);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case CHAINED:
		{
			AST tmp1401_AST_in = (AST)_t;
			match(_t,CHAINED);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2263;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void triggerprocedurestate(AST _t) throws RecognitionException {
		
		AST triggerprocedurestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST id = null;
		AST id2 = null;
		
		AST __t2276 = _t;
		AST tmp1402_AST_in = (AST)_t;
		match(_t,TRIGGER);
		_t = _t.getFirstChild();
		AST tmp1403_AST_in = (AST)_t;
		match(_t,PROCEDURE);
		_t = _t.getNextSibling();
		AST tmp1404_AST_in = (AST)_t;
		match(_t,FOR);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case CREATE:
		case DELETE_KW:
		case FIND:
		case REPLICATIONCREATE:
		case REPLICATIONDELETE:
		{
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case CREATE:
			{
				AST tmp1405_AST_in = (AST)_t;
				match(_t,CREATE);
				_t = _t.getNextSibling();
				break;
			}
			case DELETE_KW:
			{
				AST tmp1406_AST_in = (AST)_t;
				match(_t,DELETE_KW);
				_t = _t.getNextSibling();
				break;
			}
			case FIND:
			{
				AST tmp1407_AST_in = (AST)_t;
				match(_t,FIND);
				_t = _t.getNextSibling();
				break;
			}
			case REPLICATIONCREATE:
			{
				AST tmp1408_AST_in = (AST)_t;
				match(_t,REPLICATIONCREATE);
				_t = _t.getNextSibling();
				break;
			}
			case REPLICATIONDELETE:
			{
				AST tmp1409_AST_in = (AST)_t;
				match(_t,REPLICATIONDELETE);
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp1410_AST_in = (AST)_t;
			match(_t,OF);
			_t = _t.getNextSibling();
			record_name(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case COLUMNLABEL:
			case LABEL:
			{
				label_constant(_t);
				_t = _retTree;
				break;
			}
			case EOF:
			case PERIOD:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			break;
		}
		case REPLICATIONWRITE:
		case WRITE:
		{
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case WRITE:
			{
				AST tmp1411_AST_in = (AST)_t;
				match(_t,WRITE);
				_t = _t.getNextSibling();
				break;
			}
			case REPLICATIONWRITE:
			{
				AST tmp1412_AST_in = (AST)_t;
				match(_t,REPLICATIONWRITE);
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp1413_AST_in = (AST)_t;
			match(_t,OF);
			_t = _t.getNextSibling();
			record_name(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case COLUMNLABEL:
			case LABEL:
			{
				label_constant(_t);
				_t = _retTree;
				break;
			}
			case EOF:
			case PERIOD:
			case NEW:
			case OLD:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case NEW:
			{
				AST tmp1414_AST_in = (AST)_t;
				match(_t,NEW);
				_t = _t.getNextSibling();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case BUFFER:
				{
					AST tmp1415_AST_in = (AST)_t;
					match(_t,BUFFER);
					_t = _t.getNextSibling();
					break;
				}
				case ID:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				AST tmp1416_AST_in = (AST)_t;
				match(_t,ID);
				_t = _t.getNextSibling();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case COLUMNLABEL:
				case LABEL:
				{
					label_constant(_t);
					_t = _retTree;
					break;
				}
				case EOF:
				case PERIOD:
				case OLD:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				break;
			}
			case EOF:
			case PERIOD:
			case OLD:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case OLD:
			{
				AST tmp1417_AST_in = (AST)_t;
				match(_t,OLD);
				_t = _t.getNextSibling();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case BUFFER:
				{
					AST tmp1418_AST_in = (AST)_t;
					match(_t,BUFFER);
					_t = _t.getNextSibling();
					break;
				}
				case ID:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				AST tmp1419_AST_in = (AST)_t;
				match(_t,ID);
				_t = _t.getNextSibling();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case COLUMNLABEL:
				case LABEL:
				{
					label_constant(_t);
					_t = _retTree;
					break;
				}
				case EOF:
				case PERIOD:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				break;
			}
			case EOF:
			case PERIOD:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			break;
		}
		case ASSIGN:
		{
			AST tmp1420_AST_in = (AST)_t;
			match(_t,ASSIGN);
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case OF:
			{
				AST __t2289 = _t;
				AST tmp1421_AST_in = (AST)_t;
				match(_t,OF);
				_t = _t.getFirstChild();
				field(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case TABLE:
				{
					AST __t2291 = _t;
					AST tmp1422_AST_in = (AST)_t;
					match(_t,TABLE);
					_t = _t.getFirstChild();
					AST tmp1423_AST_in = (AST)_t;
					match(_t,LABEL);
					_t = _t.getNextSibling();
					constant(_t);
					_t = _retTree;
					_t = __t2291;
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t2289;
				_t = _t.getNextSibling();
				break;
			}
			case NEW:
			{
				AST __t2292 = _t;
				AST tmp1424_AST_in = (AST)_t;
				match(_t,NEW);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case VALUE:
				{
					AST tmp1425_AST_in = (AST)_t;
					match(_t,VALUE);
					_t = _t.getNextSibling();
					break;
				}
				case ID:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				id = (AST)_t;
				match(_t,ID);
				_t = _t.getNextSibling();
				defineparam_var(_t);
				_t = _retTree;
				_t = __t2292;
				_t = _t.getNextSibling();
				break;
			}
			case EOF:
			case PERIOD:
			case OLD:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case OLD:
			{
				AST __t2295 = _t;
				AST tmp1426_AST_in = (AST)_t;
				match(_t,OLD);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case VALUE:
				{
					AST tmp1427_AST_in = (AST)_t;
					match(_t,VALUE);
					_t = _t.getNextSibling();
					break;
				}
				case ID:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				id2 = (AST)_t;
				match(_t,ID);
				_t = _t.getNextSibling();
				defineparam_var(_t);
				_t = _retTree;
				_t = __t2295;
				_t = _t.getNextSibling();
				break;
			}
			case EOF:
			case PERIOD:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2276;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void underlinestate(AST _t) throws RecognitionException {
		
		AST underlinestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2302 = _t;
		AST tmp1428_AST_in = (AST)_t;
		match(_t,UNDERLINE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case STREAM:
		{
			stream_name(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case WITH:
		case Form_item:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop2307:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==Form_item)) {
				AST __t2305 = _t;
				AST tmp1429_AST_in = (AST)_t;
				match(_t,Form_item);
				_t = _t.getFirstChild();
				field(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case Format_phrase:
				{
					formatphrase(_t);
					_t = _retTree;
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t2305;
				_t = _t.getNextSibling();
			}
			else {
				break _loop2307;
			}
			
		} while (true);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case WITH:
		{
			framephrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2302;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void undostate(AST _t) throws RecognitionException {
		
		AST undostate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST u = null;
		AST bl = null;
		
		AST __t2310 = _t;
		u = _t==ASTNULL ? null :(AST)_t;
		match(_t,UNDO);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case BLOCK_LABEL:
		{
			bl = (AST)_t;
			match(_t,BLOCK_LABEL);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case COMMA:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		if ( inputState.guessing==0 ) {
			tpSupport.undoState(u, bl);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case COMMA:
		{
			AST tmp1430_AST_in = (AST)_t;
			match(_t,COMMA);
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case LEAVE:
			{
				AST __t2314 = _t;
				AST tmp1431_AST_in = (AST)_t;
				match(_t,LEAVE);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case BLOCK_LABEL:
				{
					AST tmp1432_AST_in = (AST)_t;
					match(_t,BLOCK_LABEL);
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t2314;
				_t = _t.getNextSibling();
				break;
			}
			case NEXT:
			{
				AST __t2316 = _t;
				AST tmp1433_AST_in = (AST)_t;
				match(_t,NEXT);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case BLOCK_LABEL:
				{
					AST tmp1434_AST_in = (AST)_t;
					match(_t,BLOCK_LABEL);
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t2316;
				_t = _t.getNextSibling();
				break;
			}
			case RETRY:
			{
				AST __t2318 = _t;
				AST tmp1435_AST_in = (AST)_t;
				match(_t,RETRY);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case BLOCK_LABEL:
				{
					AST tmp1436_AST_in = (AST)_t;
					match(_t,BLOCK_LABEL);
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t2318;
				_t = _t.getNextSibling();
				break;
			}
			case RETURN:
			{
				AST __t2320 = _t;
				AST tmp1437_AST_in = (AST)_t;
				match(_t,RETURN);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				if ((_tokenSet_3.member(_t.getType()))) {
					return_options(_t);
					_t = _retTree;
				}
				else if ((_t.getType()==3)) {
				}
				else {
					throw new NoViableAltException(_t);
				}
				
				}
				_t = __t2320;
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2310;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void unloadstate(AST _t) throws RecognitionException {
		
		AST unloadstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2323 = _t;
		AST tmp1438_AST_in = (AST)_t;
		match(_t,UNLOAD);
		_t = _t.getFirstChild();
		expression(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp1439_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2323;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void unsubscribestate(AST _t) throws RecognitionException {
		
		AST unsubscribestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2326 = _t;
		AST tmp1440_AST_in = (AST)_t;
		match(_t,UNSUBSCRIBE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		if ((_t.getType()==PROCEDURE)) {
			AST __t2328 = _t;
			AST tmp1441_AST_in = (AST)_t;
			match(_t,PROCEDURE);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t2328;
			_t = _t.getNextSibling();
		}
		else if ((_tokenSet_25.member(_t.getType()))) {
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		{
		if (_t==null) _t=ASTNULL;
		if ((_t.getType()==TO)) {
			AST tmp1442_AST_in = (AST)_t;
			match(_t,TO);
			_t = _t.getNextSibling();
		}
		else if ((_tokenSet_26.member(_t.getType()))) {
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		{
		if (_t==null) _t=ASTNULL;
		if ((_tokenSet_4.member(_t.getType()))) {
			expression(_t);
			_t = _retTree;
		}
		else if ((_t.getType()==ALL)) {
			AST tmp1443_AST_in = (AST)_t;
			match(_t,ALL);
			_t = _t.getNextSibling();
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t2332 = _t;
			AST tmp1444_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t2332;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2326;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void upstate(AST _t) throws RecognitionException {
		
		AST upstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2334 = _t;
		AST tmp1445_AST_in = (AST)_t;
		match(_t,UP);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		if ((_t.getType()==STREAM)) {
			stream_name(_t);
			_t = _retTree;
		}
		else if ((_tokenSet_27.member(_t.getType()))) {
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		{
		if (_t==null) _t=ASTNULL;
		if ((_tokenSet_4.member(_t.getType()))) {
			expression(_t);
			_t = _retTree;
		}
		else if ((_tokenSet_28.member(_t.getType()))) {
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case STREAM:
		{
			stream_name(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case WITH:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case WITH:
		{
			framephrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2334;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void updatestatement(AST _t) throws RecognitionException {
		
		AST updatestatement_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		boolean synPredMatched2342 = false;
		if (((_t.getType()==UPDATE))) {
			AST __t2342 = _t;
			synPredMatched2342 = true;
			inputState.guessing++;
			try {
				{
				AST __t2341 = _t;
				AST tmp1446_AST_in = (AST)_t;
				match(_t,UPDATE);
				_t = _t.getFirstChild();
				record_name(_t);
				_t = _retTree;
				AST tmp1447_AST_in = (AST)_t;
				match(_t,SET);
				_t = _t.getNextSibling();
				_t = __t2341;
				_t = _t.getNextSibling();
				}
			}
			catch (RecognitionException pe) {
				synPredMatched2342 = false;
			}
			_t = __t2342;
			inputState.guessing--;
		}
		if ( synPredMatched2342 ) {
			sqlupdatestate(_t);
			_t = _retTree;
		}
		else if ((_t.getType()==UPDATE)) {
			updatestate(_t);
			_t = _retTree;
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		_retTree = _t;
	}
	
	public final void usestate(AST _t) throws RecognitionException {
		
		AST usestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2359 = _t;
		AST tmp1448_AST_in = (AST)_t;
		match(_t,USE);
		_t = _t.getFirstChild();
		expression(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp1449_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2359;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void validatestate(AST _t) throws RecognitionException {
		
		AST validatestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2371 = _t;
		AST tmp1450_AST_in = (AST)_t;
		match(_t,VALIDATE);
		_t = _t.getFirstChild();
		record_name(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp1451_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2371;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void viewstate(AST _t) throws RecognitionException {
		
		AST viewstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2374 = _t;
		AST tmp1452_AST_in = (AST)_t;
		match(_t,VIEW);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case STREAM:
		{
			stream_name(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case IN_KW:
		case Widget_ref:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop2377:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==Widget_ref)) {
				gwidget(_t);
				_t = _retTree;
			}
			else {
				break _loop2377;
			}
			
		} while (true);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t2379 = _t;
			AST tmp1453_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			AST tmp1454_AST_in = (AST)_t;
			match(_t,WINDOW);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t2379;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2374;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void waitforstate(AST _t) throws RecognitionException {
		
		AST waitforstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2384 = _t;
		AST tmp1455_AST_in = (AST)_t;
		match(_t,WAITFOR);
		_t = _t.getFirstChild();
		eventlist(_t);
		_t = _retTree;
		AST tmp1456_AST_in = (AST)_t;
		match(_t,OF);
		_t = _t.getNextSibling();
		widgetlist(_t);
		_t = _retTree;
		{
		_loop2387:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==OR)) {
				AST __t2386 = _t;
				AST tmp1457_AST_in = (AST)_t;
				match(_t,OR);
				_t = _t.getFirstChild();
				eventlist(_t);
				_t = _retTree;
				AST tmp1458_AST_in = (AST)_t;
				match(_t,OF);
				_t = _t.getNextSibling();
				widgetlist(_t);
				_t = _retTree;
				_t = __t2386;
				_t = _t.getNextSibling();
			}
			else {
				break _loop2387;
			}
			
		} while (true);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case FOCUS:
		{
			AST __t2389 = _t;
			AST tmp1459_AST_in = (AST)_t;
			match(_t,FOCUS);
			_t = _t.getFirstChild();
			gwidget(_t);
			_t = _retTree;
			_t = __t2389;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case EXCLUSIVEWEBUSER:
		case PAUSE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case PAUSE:
		{
			AST __t2391 = _t;
			AST tmp1460_AST_in = (AST)_t;
			match(_t,PAUSE);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t2391;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case EXCLUSIVEWEBUSER:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case EXCLUSIVEWEBUSER:
		{
			AST tmp1461_AST_in = (AST)_t;
			match(_t,EXCLUSIVEWEBUSER);
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_4.member(_t.getType()))) {
				expression(_t);
				_t = _retTree;
			}
			else if ((_t.getType()==EOF||_t.getType()==PERIOD)) {
			}
			else {
				throw new NoViableAltException(_t);
			}
			
			}
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2384;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void functioncall(AST _t) throws RecognitionException {
		
		AST functioncall_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case AACBIT:
		{
			aacbitfunc(_t);
			_t = _retTree;
			break;
		}
		case AACONTROL:
		{
			aacontrolfunc(_t);
			_t = _retTree;
			break;
		}
		case AAMSG:
		{
			aamsgfunc(_t);
			_t = _retTree;
			break;
		}
		case AAPCONTROL:
		{
			aapcontrolfunc(_t);
			_t = _retTree;
			break;
		}
		case AASERIAL:
		{
			aaserialfunc(_t);
			_t = _retTree;
			break;
		}
		case ABSOLUTE:
		{
			absolutefunc(_t);
			_t = _retTree;
			break;
		}
		case ACCUMULATE:
		{
			accumfunc(_t);
			_t = _retTree;
			break;
		}
		case ADDINTERVAL:
		{
			addintervalfunc(_t);
			_t = _retTree;
			break;
		}
		case ALIAS:
		{
			aliasfunc(_t);
			_t = _retTree;
			break;
		}
		case AMBIGUOUS:
		{
			ambiguousfunc(_t);
			_t = _retTree;
			break;
		}
		case ASC:
		{
			ascfunc(_t);
			_t = _retTree;
			break;
		}
		case AVAILABLE:
		{
			availablefunc(_t);
			_t = _retTree;
			break;
		}
		case BASE64DECODE:
		{
			base64decodefunc(_t);
			_t = _retTree;
			break;
		}
		case BASE64ENCODE:
		{
			base64encodefunc(_t);
			_t = _retTree;
			break;
		}
		case CANDO:
		{
			candofunc(_t);
			_t = _retTree;
			break;
		}
		case CANFIND:
		{
			canfindfunc(_t);
			_t = _retTree;
			break;
		}
		case CANQUERY:
		{
			canqueryfunc(_t);
			_t = _retTree;
			break;
		}
		case CANSET:
		{
			cansetfunc(_t);
			_t = _retTree;
			break;
		}
		case CAPS:
		{
			capsfunc(_t);
			_t = _retTree;
			break;
		}
		case CHR:
		{
			chrfunc(_t);
			_t = _retTree;
			break;
		}
		case CODEPAGECONVERT:
		{
			codepageconvertfunc(_t);
			_t = _retTree;
			break;
		}
		case COLLATE:
		{
			collatefunc(_t);
			_t = _retTree;
			break;
		}
		case COMPARE:
		{
			comparefunc(_t);
			_t = _retTree;
			break;
		}
		case CONNECTED:
		{
			connectedfunc(_t);
			_t = _retTree;
			break;
		}
		case COUNTOF:
		{
			countoffunc(_t);
			_t = _retTree;
			break;
		}
		case CURRENTCHANGED:
		{
			currentchangedfunc(_t);
			_t = _retTree;
			break;
		}
		case CURRENTLANGUAGE:
		{
			currentlanguagefunc(_t);
			_t = _retTree;
			break;
		}
		case CURRENTRESULTROW:
		{
			currentresultrowfunc(_t);
			_t = _retTree;
			break;
		}
		case CURRENTVALUE:
		{
			currentvaluefunc(_t);
			_t = _retTree;
			break;
		}
		case CURSOR:
		{
			cursorfunc(_t);
			_t = _retTree;
			break;
		}
		case DATASERVERS:
		{
			dataserversfunc(_t);
			_t = _retTree;
			break;
		}
		case DATASOURCEMODIFIED:
		{
			datasourcemodifiedfunc(_t);
			_t = _retTree;
			break;
		}
		case DATE:
		{
			datefunc(_t);
			_t = _retTree;
			break;
		}
		case DATETIME:
		{
			datetimefunc(_t);
			_t = _retTree;
			break;
		}
		case DATETIMETZ:
		{
			datetimetzfunc(_t);
			_t = _retTree;
			break;
		}
		case DAY:
		{
			dayfunc(_t);
			_t = _retTree;
			break;
		}
		case DBCODEPAGE:
		{
			dbcodepagefunc(_t);
			_t = _retTree;
			break;
		}
		case DBCOLLATION:
		{
			dbcollationfunc(_t);
			_t = _retTree;
			break;
		}
		case DBNAME:
		{
			dbnamefunc(_t);
			_t = _retTree;
			break;
		}
		case DBPARAM:
		{
			dbparamfunc(_t);
			_t = _retTree;
			break;
		}
		case DBRESTRICTIONS:
		{
			dbrestrictionsfunc(_t);
			_t = _retTree;
			break;
		}
		case DBTASKID:
		{
			dbtaskidfunc(_t);
			_t = _retTree;
			break;
		}
		case DBTYPE:
		{
			dbtypefunc(_t);
			_t = _retTree;
			break;
		}
		case DBVERSION:
		{
			dbversionfunc(_t);
			_t = _retTree;
			break;
		}
		case DECIMAL:
		{
			decimalfunc(_t);
			_t = _retTree;
			break;
		}
		case DECRYPT:
		{
			decryptfunc(_t);
			_t = _retTree;
			break;
		}
		case DYNAMICCURRENTVALUE:
		{
			dynamiccurrentvaluefunc(_t);
			_t = _retTree;
			break;
		}
		case DYNAMICNEXTVALUE:
		{
			dynamicnextvaluefunc(_t);
			_t = _retTree;
			break;
		}
		case DYNAMICFUNCTION:
		{
			dynamicfuncfunc(_t);
			_t = _retTree;
			break;
		}
		case ENCODE:
		{
			encodefunc(_t);
			_t = _retTree;
			break;
		}
		case ENCRYPT:
		{
			encryptfunc(_t);
			_t = _retTree;
			break;
		}
		case ENTRY:
		{
			entryfunc(_t);
			_t = _retTree;
			break;
		}
		case ERROR:
		{
			errorfunc(_t);
			_t = _retTree;
			break;
		}
		case ETIME_KW:
		{
			etimefunc(_t);
			_t = _retTree;
			break;
		}
		case EXP:
		{
			expfunc(_t);
			_t = _retTree;
			break;
		}
		case EXTENT:
		{
			extentfunc(_t);
			_t = _retTree;
			break;
		}
		case FILL:
		{
			fillfunc(_t);
			_t = _retTree;
			break;
		}
		case FIRST:
		{
			firstfunc(_t);
			_t = _retTree;
			break;
		}
		case FIRSTOF:
		{
			firstoffunc(_t);
			_t = _retTree;
			break;
		}
		case FRAMECOL:
		{
			framecolfunc(_t);
			_t = _retTree;
			break;
		}
		case FRAMEDB:
		{
			framedbfunc(_t);
			_t = _retTree;
			break;
		}
		case FRAMEDOWN:
		{
			framedownfunc(_t);
			_t = _retTree;
			break;
		}
		case FRAMEFIELD:
		{
			framefieldfunc(_t);
			_t = _retTree;
			break;
		}
		case FRAMEFILE:
		{
			framefilefunc(_t);
			_t = _retTree;
			break;
		}
		case FRAMEINDEX:
		{
			frameindexfunc(_t);
			_t = _retTree;
			break;
		}
		case FRAMELINE:
		{
			framelinefunc(_t);
			_t = _retTree;
			break;
		}
		case FRAMENAME:
		{
			framenamefunc(_t);
			_t = _retTree;
			break;
		}
		case FRAMEROW:
		{
			framerowfunc(_t);
			_t = _retTree;
			break;
		}
		case FRAMEVALUE:
		{
			framevaluefunc(_t);
			_t = _retTree;
			break;
		}
		case GENERATEPBEKEY:
		{
			generatepbekeyfunc(_t);
			_t = _retTree;
			break;
		}
		case GENERATEPBESALT:
		{
			generatepbesaltfunc(_t);
			_t = _retTree;
			break;
		}
		case GENERATERANDOMKEY:
		{
			generaterandomkeyfunc(_t);
			_t = _retTree;
			break;
		}
		case GATEWAYS:
		{
			gatewaysfunc(_t);
			_t = _retTree;
			break;
		}
		case GETBITS:
		{
			getbitsfunc(_t);
			_t = _retTree;
			break;
		}
		case GETBYTE:
		{
			getbytefunc(_t);
			_t = _retTree;
			break;
		}
		case GETBYTEORDER:
		{
			getbyteorderfunc(_t);
			_t = _retTree;
			break;
		}
		case GETBYTES:
		{
			getbytesfunc(_t);
			_t = _retTree;
			break;
		}
		case GETCODEPAGES:
		{
			getcodepagesfunc(_t);
			_t = _retTree;
			break;
		}
		case GETCOLLATIONS:
		{
			getcollationsfunc(_t);
			_t = _retTree;
			break;
		}
		case GETDOUBLE:
		{
			getdoublefunc(_t);
			_t = _retTree;
			break;
		}
		case GETFLOAT:
		{
			getfloatfunc(_t);
			_t = _retTree;
			break;
		}
		case GETLICENSE:
		{
			getlicensefunc(_t);
			_t = _retTree;
			break;
		}
		case GETLONG:
		{
			getlongfunc(_t);
			_t = _retTree;
			break;
		}
		case GETPOINTERVALUE:
		{
			getpointervaluefunc(_t);
			_t = _retTree;
			break;
		}
		case GETSHORT:
		{
			getshortfunc(_t);
			_t = _retTree;
			break;
		}
		case GETSIZE:
		{
			getsizefunc(_t);
			_t = _retTree;
			break;
		}
		case GETSTRING:
		{
			getstringfunc(_t);
			_t = _retTree;
			break;
		}
		case GETUNSIGNEDSHORT:
		{
			getunsignedshortfunc(_t);
			_t = _retTree;
			break;
		}
		case GOPENDING:
		{
			gopendingfunc(_t);
			_t = _retTree;
			break;
		}
		case IF:
		{
			iffunc(_t);
			_t = _retTree;
			break;
		}
		case INDEX:
		{
			indexfunc(_t);
			_t = _retTree;
			break;
		}
		case INTEGER:
		{
			integerfunc(_t);
			_t = _retTree;
			break;
		}
		case INTERVAL:
		{
			intervalfunc(_t);
			_t = _retTree;
			break;
		}
		case ISATTRSPACE:
		{
			isattrspacefunc(_t);
			_t = _retTree;
			break;
		}
		case ISCODEPAGEFIXED:
		{
			iscodepagefixedfunc(_t);
			_t = _retTree;
			break;
		}
		case ISCOLUMNCODEPAGE:
		{
			iscolumncodepagefunc(_t);
			_t = _retTree;
			break;
		}
		case ISLEADBYTE:
		{
			isleadbytefunc(_t);
			_t = _retTree;
			break;
		}
		case ISODATE:
		{
			isodatefunc(_t);
			_t = _retTree;
			break;
		}
		case KBLABEL:
		{
			kblabelfunc(_t);
			_t = _retTree;
			break;
		}
		case KEYCODE:
		{
			keycodefunc(_t);
			_t = _retTree;
			break;
		}
		case KEYFUNCTION:
		{
			keyfuncfunc(_t);
			_t = _retTree;
			break;
		}
		case KEYLABEL:
		{
			keylabelfunc(_t);
			_t = _retTree;
			break;
		}
		case KEYWORD:
		{
			keywordfunc(_t);
			_t = _retTree;
			break;
		}
		case KEYWORDALL:
		{
			keywordallfunc(_t);
			_t = _retTree;
			break;
		}
		case LAST:
		{
			lastfunc(_t);
			_t = _retTree;
			break;
		}
		case LASTOF:
		{
			lastoffunc(_t);
			_t = _retTree;
			break;
		}
		case LASTKEY:
		{
			lastkeyfunc(_t);
			_t = _retTree;
			break;
		}
		case LC:
		{
			lcfunc(_t);
			_t = _retTree;
			break;
		}
		case LDBNAME:
		{
			ldbnamefunc(_t);
			_t = _retTree;
			break;
		}
		case LEFTTRIM:
		{
			lefttrimfunc(_t);
			_t = _retTree;
			break;
		}
		case LENGTH:
		{
			lengthfunc(_t);
			_t = _retTree;
			break;
		}
		case LIBRARY:
		{
			libraryfunc(_t);
			_t = _retTree;
			break;
		}
		case LINECOUNTER:
		{
			linecounterfunc(_t);
			_t = _retTree;
			break;
		}
		case LISTEVENTS:
		{
			listeventsfunc(_t);
			_t = _retTree;
			break;
		}
		case LISTQUERYATTRS:
		{
			listqueryattrsfunc(_t);
			_t = _retTree;
			break;
		}
		case LISTSETATTRS:
		{
			listsetattrsfunc(_t);
			_t = _retTree;
			break;
		}
		case LISTWIDGETS:
		{
			listwidgetsfunc(_t);
			_t = _retTree;
			break;
		}
		case LOADPICTURE:
		{
			loadpicturefunc(_t);
			_t = _retTree;
			break;
		}
		case LOCKED:
		{
			lockedfunc(_t);
			_t = _retTree;
			break;
		}
		case LOG:
		{
			logfunc(_t);
			_t = _retTree;
			break;
		}
		case LOGICAL:
		{
			logicalfunc(_t);
			_t = _retTree;
			break;
		}
		case LOOKUP:
		{
			lookupfunc(_t);
			_t = _retTree;
			break;
		}
		case MACHINECLASS:
		{
			machineclassfunc(_t);
			_t = _retTree;
			break;
		}
		case MAXIMUM:
		{
			maximumfunc(_t);
			_t = _retTree;
			break;
		}
		case MD5DIGEST:
		{
			md5digestfunc(_t);
			_t = _retTree;
			break;
		}
		case MEMBER:
		{
			memberfunc(_t);
			_t = _retTree;
			break;
		}
		case MESSAGELINES:
		{
			messagelinesfunc(_t);
			_t = _retTree;
			break;
		}
		case MINIMUM:
		{
			minimumfunc(_t);
			_t = _retTree;
			break;
		}
		case MONTH:
		{
			monthfunc(_t);
			_t = _retTree;
			break;
		}
		case MTIME:
		{
			mtimefunc(_t);
			_t = _retTree;
			break;
		}
		case NEW:
		{
			newfunc(_t);
			_t = _retTree;
			break;
		}
		case NEXTVALUE:
		{
			nextvaluefunc(_t);
			_t = _retTree;
			break;
		}
		case NORMALIZE:
		{
			normalizefunc(_t);
			_t = _retTree;
			break;
		}
		case NOW:
		{
			nowfunc(_t);
			_t = _retTree;
			break;
		}
		case NUMALIASES:
		{
			numaliasesfunc(_t);
			_t = _retTree;
			break;
		}
		case NUMDBS:
		{
			numdbsfunc(_t);
			_t = _retTree;
			break;
		}
		case NUMENTRIES:
		{
			numentriesfunc(_t);
			_t = _retTree;
			break;
		}
		case NUMRESULTS:
		{
			numresultsfunc(_t);
			_t = _retTree;
			break;
		}
		case OPSYS:
		{
			opsysfunc(_t);
			_t = _retTree;
			break;
		}
		case OSDRIVES:
		{
			osdrivesfunc(_t);
			_t = _retTree;
			break;
		}
		case OSERROR:
		{
			oserrorfunc(_t);
			_t = _retTree;
			break;
		}
		case OSGETENV:
		{
			osgetenvfunc(_t);
			_t = _retTree;
			break;
		}
		case PAGENUMBER:
		{
			pagenumberfunc(_t);
			_t = _retTree;
			break;
		}
		case PAGESIZE_KW:
		{
			pagesizefunc(_t);
			_t = _retTree;
			break;
		}
		case PDBNAME:
		{
			pdbnamefunc(_t);
			_t = _retTree;
			break;
		}
		case PROCHANDLE:
		{
			prochandlefunc(_t);
			_t = _retTree;
			break;
		}
		case PROCSTATUS:
		{
			procstatusfunc(_t);
			_t = _retTree;
			break;
		}
		case PROGRAMNAME:
		{
			programnamefunc(_t);
			_t = _retTree;
			break;
		}
		case PROGRESS:
		{
			progressfunc(_t);
			_t = _retTree;
			break;
		}
		case PROMSGS:
		{
			promsgsfunc(_t);
			_t = _retTree;
			break;
		}
		case PROPATH:
		{
			propathfunc(_t);
			_t = _retTree;
			break;
		}
		case PROVERSION:
		{
			proversionfunc(_t);
			_t = _retTree;
			break;
		}
		case QUERYOFFEND:
		{
			queryoffendfunc(_t);
			_t = _retTree;
			break;
		}
		case QUOTER:
		{
			quoterfunc(_t);
			_t = _retTree;
			break;
		}
		case RINDEX:
		{
			rindexfunc(_t);
			_t = _retTree;
			break;
		}
		case RANDOM:
		{
			randomfunc(_t);
			_t = _retTree;
			break;
		}
		case RAW:
		{
			rawfunc(_t);
			_t = _retTree;
			break;
		}
		case RECID:
		{
			recidfunc(_t);
			_t = _retTree;
			break;
		}
		case RECORDLENGTH:
		{
			recordlengthfunc(_t);
			_t = _retTree;
			break;
		}
		case REJECTED:
		{
			rejectedfunc(_t);
			_t = _retTree;
			break;
		}
		case REPLACE:
		{
			replacefunc(_t);
			_t = _retTree;
			break;
		}
		case RETRY:
		{
			retryfunc(_t);
			_t = _retTree;
			break;
		}
		case RETURNVALUE:
		{
			returnvaluefunc(_t);
			_t = _retTree;
			break;
		}
		case RGBVALUE:
		{
			rgbvaluefunc(_t);
			_t = _retTree;
			break;
		}
		case RIGHTTRIM:
		{
			righttrimfunc(_t);
			_t = _retTree;
			break;
		}
		case ROUND:
		{
			roundfunc(_t);
			_t = _retTree;
			break;
		}
		case ROWID:
		{
			rowidfunc(_t);
			_t = _retTree;
			break;
		}
		case ROWSTATE:
		{
			rowstatefunc(_t);
			_t = _retTree;
			break;
		}
		case SCREENLINES:
		{
			screenlinesfunc(_t);
			_t = _retTree;
			break;
		}
		case SDBNAME:
		{
			sdbnamefunc(_t);
			_t = _retTree;
			break;
		}
		case SEARCH:
		{
			searchfunc(_t);
			_t = _retTree;
			break;
		}
		case SEEK:
		{
			seekfunc(_t);
			_t = _retTree;
			break;
		}
		case SETUSERID:
		{
			setuseridfunc(_t);
			_t = _retTree;
			break;
		}
		case SHA1DIGEST:
		{
			sha1digestfunc(_t);
			_t = _retTree;
			break;
		}
		case AVG:
		case COUNT:
		case SUM:
		{
			sqlaggregatefunc(_t);
			_t = _retTree;
			break;
		}
		case SQRT:
		{
			sqrtfunc(_t);
			_t = _retTree;
			break;
		}
		case SSLSERVERNAME:
		{
			sslservernamefunc(_t);
			_t = _retTree;
			break;
		}
		case STRING:
		{
			stringfunc(_t);
			_t = _retTree;
			break;
		}
		case SUBSTITUTE:
		{
			substitutefunc(_t);
			_t = _retTree;
			break;
		}
		case SUBSTRING:
		{
			substringfunc(_t);
			_t = _retTree;
			break;
		}
		case SUPER:
		{
			superfunc(_t);
			_t = _retTree;
			break;
		}
		case TOROWID:
		{
			torowidfunc(_t);
			_t = _retTree;
			break;
		}
		case TERMINAL:
		{
			terminalfunc(_t);
			_t = _retTree;
			break;
		}
		case TIME:
		{
			timefunc(_t);
			_t = _retTree;
			break;
		}
		case TIMEZONE:
		{
			timezonefunc(_t);
			_t = _retTree;
			break;
		}
		case TODAY:
		{
			todayfunc(_t);
			_t = _retTree;
			break;
		}
		case TRANSACTION:
		{
			transactionfunc(_t);
			_t = _retTree;
			break;
		}
		case TRIM:
		{
			trimfunc(_t);
			_t = _retTree;
			break;
		}
		case TRUNCATE:
		{
			truncatefunc(_t);
			_t = _retTree;
			break;
		}
		case USER:
		case USERID:
		{
			useridfunc(_t);
			_t = _retTree;
			break;
		}
		case VALIDEVENT:
		{
			valideventfunc(_t);
			_t = _retTree;
			break;
		}
		case VALIDHANDLE:
		{
			validhandlefunc(_t);
			_t = _retTree;
			break;
		}
		case WEEKDAY:
		{
			weekdayfunc(_t);
			_t = _retTree;
			break;
		}
		case WIDGETHANDLE:
		{
			widgethandlefunc(_t);
			_t = _retTree;
			break;
		}
		case YEAR:
		{
			yearfunc(_t);
			_t = _retTree;
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void aacbitfunc(AST _t) throws RecognitionException {
		
		AST aacbitfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t150 = _t;
		AST tmp1462_AST_in = (AST)_t;
		match(_t,AACBIT);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t150;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void aacontrolfunc(AST _t) throws RecognitionException {
		
		AST aacontrolfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1463_AST_in = (AST)_t;
		match(_t,AACONTROL);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void aamsgfunc(AST _t) throws RecognitionException {
		
		AST aamsgfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t153 = _t;
		AST tmp1464_AST_in = (AST)_t;
		match(_t,AAMSG);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t153;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void aapcontrolfunc(AST _t) throws RecognitionException {
		
		AST aapcontrolfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1465_AST_in = (AST)_t;
		match(_t,AAPCONTROL);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void aaserialfunc(AST _t) throws RecognitionException {
		
		AST aaserialfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1466_AST_in = (AST)_t;
		match(_t,AASERIAL);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void absolutefunc(AST _t) throws RecognitionException {
		
		AST absolutefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t165 = _t;
		AST tmp1467_AST_in = (AST)_t;
		match(_t,ABSOLUTE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t165;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void accumfunc(AST _t) throws RecognitionException {
		
		AST accumfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t168 = _t;
		AST tmp1468_AST_in = (AST)_t;
		match(_t,ACCUMULATE);
		_t = _t.getFirstChild();
		accum_what(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		if ((_t.getType()==BY)) {
			AST __t170 = _t;
			AST tmp1469_AST_in = (AST)_t;
			match(_t,BY);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case DESCENDING:
			{
				AST tmp1470_AST_in = (AST)_t;
				match(_t,DESCENDING);
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t170;
			_t = _t.getNextSibling();
		}
		else if ((_tokenSet_4.member(_t.getType()))) {
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		expression(_t);
		_t = _retTree;
		_t = __t168;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void addintervalfunc(AST _t) throws RecognitionException {
		
		AST addintervalfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t177 = _t;
		AST tmp1471_AST_in = (AST)_t;
		match(_t,ADDINTERVAL);
		_t = _t.getFirstChild();
		AST tmp1472_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		AST tmp1473_AST_in = (AST)_t;
		match(_t,COMMA);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		AST tmp1474_AST_in = (AST)_t;
		match(_t,COMMA);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		AST tmp1475_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_t = __t177;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void aliasfunc(AST _t) throws RecognitionException {
		
		AST aliasfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t208 = _t;
		AST tmp1476_AST_in = (AST)_t;
		match(_t,ALIAS);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t208;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void ambiguousfunc(AST _t) throws RecognitionException {
		
		AST ambiguousfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t210 = _t;
		AST tmp1477_AST_in = (AST)_t;
		match(_t,AMBIGUOUS);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case RECORD_NAME:
		{
			record_name(_t);
			_t = _retTree;
			break;
		}
		case LEFTPAREN:
		{
			AST tmp1478_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getNextSibling();
			record_name(_t);
			_t = _retTree;
			AST tmp1479_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t210;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void ascfunc(AST _t) throws RecognitionException {
		
		AST ascfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t223 = _t;
		AST tmp1480_AST_in = (AST)_t;
		match(_t,ASC);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t223;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void availablefunc(AST _t) throws RecognitionException {
		
		AST availablefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t265 = _t;
		AST tmp1481_AST_in = (AST)_t;
		match(_t,AVAILABLE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case RECORD_NAME:
		{
			record_name(_t);
			_t = _retTree;
			break;
		}
		case LEFTPAREN:
		{
			AST tmp1482_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getNextSibling();
			record_name(_t);
			_t = _retTree;
			AST tmp1483_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t265;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void base64decodefunc(AST _t) throws RecognitionException {
		
		AST base64decodefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t268 = _t;
		AST tmp1484_AST_in = (AST)_t;
		match(_t,BASE64DECODE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t268;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void base64encodefunc(AST _t) throws RecognitionException {
		
		AST base64encodefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t270 = _t;
		AST tmp1485_AST_in = (AST)_t;
		match(_t,BASE64ENCODE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t270;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void candofunc(AST _t) throws RecognitionException {
		
		AST candofunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t316 = _t;
		AST tmp1486_AST_in = (AST)_t;
		match(_t,CANDO);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t316;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void canfindfunc(AST _t) throws RecognitionException {
		
		AST canfindfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t318 = _t;
		AST tmp1487_AST_in = (AST)_t;
		match(_t,CANFIND);
		_t = _t.getFirstChild();
		AST tmp1488_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case CURRENT:
		case EACH:
		case FIRST:
		case LAST:
		case NEXT:
		case PREV:
		{
			findwhich(_t);
			_t = _retTree;
			break;
		}
		case RECORD_NAME:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		recordphrase(_t);
		_t = _retTree;
		AST tmp1489_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_t = __t318;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void canqueryfunc(AST _t) throws RecognitionException {
		
		AST canqueryfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t321 = _t;
		AST tmp1490_AST_in = (AST)_t;
		match(_t,CANQUERY);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t321;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void cansetfunc(AST _t) throws RecognitionException {
		
		AST cansetfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t323 = _t;
		AST tmp1491_AST_in = (AST)_t;
		match(_t,CANSET);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t323;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void capsfunc(AST _t) throws RecognitionException {
		
		AST capsfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t325 = _t;
		AST tmp1492_AST_in = (AST)_t;
		match(_t,CAPS);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t325;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void chrfunc(AST _t) throws RecognitionException {
		
		AST chrfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t360 = _t;
		AST tmp1493_AST_in = (AST)_t;
		match(_t,CHR);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t360;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void codepageconvertfunc(AST _t) throws RecognitionException {
		
		AST codepageconvertfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t376 = _t;
		AST tmp1494_AST_in = (AST)_t;
		match(_t,CODEPAGECONVERT);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t376;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void collatefunc(AST _t) throws RecognitionException {
		
		AST collatefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t378 = _t;
		AST tmp1495_AST_in = (AST)_t;
		match(_t,COLLATE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t378;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void comparefunc(AST _t) throws RecognitionException {
		
		AST comparefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t442 = _t;
		AST tmp1496_AST_in = (AST)_t;
		match(_t,COMPARE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t442;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void connectedfunc(AST _t) throws RecognitionException {
		
		AST connectedfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t506 = _t;
		AST tmp1497_AST_in = (AST)_t;
		match(_t,CONNECTED);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t506;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void countoffunc(AST _t) throws RecognitionException {
		
		AST countoffunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t534 = _t;
		AST tmp1498_AST_in = (AST)_t;
		match(_t,COUNTOF);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t534;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void currentchangedfunc(AST _t) throws RecognitionException {
		
		AST currentchangedfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t644 = _t;
		AST tmp1499_AST_in = (AST)_t;
		match(_t,CURRENTCHANGED);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case RECORD_NAME:
		{
			record_name(_t);
			_t = _retTree;
			break;
		}
		case LEFTPAREN:
		{
			AST tmp1500_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getNextSibling();
			record_name(_t);
			_t = _retTree;
			AST tmp1501_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t644;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void currentlanguagefunc(AST _t) throws RecognitionException {
		
		AST currentlanguagefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1502_AST_in = (AST)_t;
		match(_t,CURRENTLANGUAGE);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void currentresultrowfunc(AST _t) throws RecognitionException {
		
		AST currentresultrowfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t648 = _t;
		AST tmp1503_AST_in = (AST)_t;
		match(_t,CURRENTRESULTROW);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t648;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void cursorfunc(AST _t) throws RecognitionException {
		
		AST cursorfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1504_AST_in = (AST)_t;
		match(_t,CURSOR);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void dataserversfunc(AST _t) throws RecognitionException {
		
		AST dataserversfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1505_AST_in = (AST)_t;
		match(_t,DATASERVERS);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void datasourcemodifiedfunc(AST _t) throws RecognitionException {
		
		AST datasourcemodifiedfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t655 = _t;
		AST tmp1506_AST_in = (AST)_t;
		match(_t,DATASOURCEMODIFIED);
		_t = _t.getFirstChild();
		AST tmp1507_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		record_name(_t);
		_t = _retTree;
		AST tmp1508_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_t = __t655;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void datefunc(AST _t) throws RecognitionException {
		
		AST datefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t663 = _t;
		AST tmp1509_AST_in = (AST)_t;
		match(_t,DATE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t663;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void datetimefunc(AST _t) throws RecognitionException {
		
		AST datetimefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t665 = _t;
		AST tmp1510_AST_in = (AST)_t;
		match(_t,DATETIME);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t665;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void datetimetzfunc(AST _t) throws RecognitionException {
		
		AST datetimetzfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t667 = _t;
		AST tmp1511_AST_in = (AST)_t;
		match(_t,DATETIMETZ);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t667;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void dayfunc(AST _t) throws RecognitionException {
		
		AST dayfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t669 = _t;
		AST tmp1512_AST_in = (AST)_t;
		match(_t,DAY);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t669;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void dbcodepagefunc(AST _t) throws RecognitionException {
		
		AST dbcodepagefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t671 = _t;
		AST tmp1513_AST_in = (AST)_t;
		match(_t,DBCODEPAGE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t671;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void dbcollationfunc(AST _t) throws RecognitionException {
		
		AST dbcollationfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t673 = _t;
		AST tmp1514_AST_in = (AST)_t;
		match(_t,DBCOLLATION);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t673;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void dbnamefunc(AST _t) throws RecognitionException {
		
		AST dbnamefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1515_AST_in = (AST)_t;
		match(_t,DBNAME);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void dbparamfunc(AST _t) throws RecognitionException {
		
		AST dbparamfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t676 = _t;
		AST tmp1516_AST_in = (AST)_t;
		match(_t,DBPARAM);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t676;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void dbrestrictionsfunc(AST _t) throws RecognitionException {
		
		AST dbrestrictionsfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t678 = _t;
		AST tmp1517_AST_in = (AST)_t;
		match(_t,DBRESTRICTIONS);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t678;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void dbtaskidfunc(AST _t) throws RecognitionException {
		
		AST dbtaskidfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t680 = _t;
		AST tmp1518_AST_in = (AST)_t;
		match(_t,DBTASKID);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t680;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void dbtypefunc(AST _t) throws RecognitionException {
		
		AST dbtypefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t682 = _t;
		AST tmp1519_AST_in = (AST)_t;
		match(_t,DBTYPE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t682;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void dbversionfunc(AST _t) throws RecognitionException {
		
		AST dbversionfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t684 = _t;
		AST tmp1520_AST_in = (AST)_t;
		match(_t,DBVERSION);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t684;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void decimalfunc(AST _t) throws RecognitionException {
		
		AST decimalfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t718 = _t;
		AST tmp1521_AST_in = (AST)_t;
		match(_t,DECIMAL);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t718;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void decryptfunc(AST _t) throws RecognitionException {
		
		AST decryptfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t720 = _t;
		AST tmp1522_AST_in = (AST)_t;
		match(_t,DECRYPT);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t720;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void dynamicnextvaluefunc(AST _t) throws RecognitionException {
		
		AST dynamicnextvaluefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1116 = _t;
		AST tmp1523_AST_in = (AST)_t;
		match(_t,DYNAMICNEXTVALUE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1116;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void dynamicfuncfunc(AST _t) throws RecognitionException {
		
		AST dynamicfuncfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1118 = _t;
		AST tmp1524_AST_in = (AST)_t;
		match(_t,DYNAMICFUNCTION);
		_t = _t.getFirstChild();
		AST tmp1525_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t1120 = _t;
			AST tmp1526_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t1120;
			_t = _t.getNextSibling();
			break;
		}
		case COMMA:
		case RIGHTPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop1122:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==COMMA)) {
				AST tmp1527_AST_in = (AST)_t;
				match(_t,COMMA);
				_t = _t.getNextSibling();
				parameter(_t);
				_t = _retTree;
			}
			else {
				break _loop1122;
			}
			
		} while (true);
		}
		AST tmp1528_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp1529_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t1118;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void encodefunc(AST _t) throws RecognitionException {
		
		AST encodefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1156 = _t;
		AST tmp1530_AST_in = (AST)_t;
		match(_t,ENCODE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1156;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void encryptfunc(AST _t) throws RecognitionException {
		
		AST encryptfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1158 = _t;
		AST tmp1531_AST_in = (AST)_t;
		match(_t,ENCRYPT);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1158;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void errorfunc(AST _t) throws RecognitionException {
		
		AST errorfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1165 = _t;
		AST tmp1532_AST_in = (AST)_t;
		match(_t,ERROR);
		_t = _t.getFirstChild();
		AST tmp1533_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		record_name(_t);
		_t = _retTree;
		AST tmp1534_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_t = __t1165;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void etimefunc(AST _t) throws RecognitionException {
		
		AST etimefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1162 = _t;
		AST tmp1535_AST_in = (AST)_t;
		match(_t,ETIME_KW);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case LEFTPAREN:
		{
			funargs(_t);
			_t = _retTree;
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t1162;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void expfunc(AST _t) throws RecognitionException {
		
		AST expfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1167 = _t;
		AST tmp1536_AST_in = (AST)_t;
		match(_t,EXP);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1167;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void extentfunc(AST _t) throws RecognitionException {
		
		AST extentfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1181 = _t;
		AST tmp1537_AST_in = (AST)_t;
		match(_t,EXTENT);
		_t = _t.getFirstChild();
		AST tmp1538_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		AST tmp1539_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_t = __t1181;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void fillfunc(AST _t) throws RecognitionException {
		
		AST fillfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1201 = _t;
		AST tmp1540_AST_in = (AST)_t;
		match(_t,FILL);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1201;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void firstfunc(AST _t) throws RecognitionException {
		
		AST firstfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1208 = _t;
		AST tmp1541_AST_in = (AST)_t;
		match(_t,FIRST);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1208;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void firstoffunc(AST _t) throws RecognitionException {
		
		AST firstoffunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1210 = _t;
		AST tmp1542_AST_in = (AST)_t;
		match(_t,FIRSTOF);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1210;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void framecolfunc(AST _t) throws RecognitionException {
		
		AST framecolfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1296 = _t;
		AST tmp1543_AST_in = (AST)_t;
		match(_t,FRAMECOL);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case LEFTPAREN:
		{
			AST tmp1544_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getNextSibling();
			AST tmp1545_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			AST tmp1546_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t1296;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void framedbfunc(AST _t) throws RecognitionException {
		
		AST framedbfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1547_AST_in = (AST)_t;
		match(_t,FRAMEDB);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void framedownfunc(AST _t) throws RecognitionException {
		
		AST framedownfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1300 = _t;
		AST tmp1548_AST_in = (AST)_t;
		match(_t,FRAMEDOWN);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case LEFTPAREN:
		{
			AST tmp1549_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getNextSibling();
			AST tmp1550_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			AST tmp1551_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t1300;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void framefieldfunc(AST _t) throws RecognitionException {
		
		AST framefieldfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1552_AST_in = (AST)_t;
		match(_t,FRAMEFIELD);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void framefilefunc(AST _t) throws RecognitionException {
		
		AST framefilefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1553_AST_in = (AST)_t;
		match(_t,FRAMEFILE);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void frameindexfunc(AST _t) throws RecognitionException {
		
		AST frameindexfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1554_AST_in = (AST)_t;
		match(_t,FRAMEINDEX);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void framelinefunc(AST _t) throws RecognitionException {
		
		AST framelinefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1306 = _t;
		AST tmp1555_AST_in = (AST)_t;
		match(_t,FRAMELINE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case LEFTPAREN:
		{
			AST tmp1556_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getNextSibling();
			AST tmp1557_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			AST tmp1558_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t1306;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void framenamefunc(AST _t) throws RecognitionException {
		
		AST framenamefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1559_AST_in = (AST)_t;
		match(_t,FRAMENAME);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void framerowfunc(AST _t) throws RecognitionException {
		
		AST framerowfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1310 = _t;
		AST tmp1560_AST_in = (AST)_t;
		match(_t,FRAMEROW);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case LEFTPAREN:
		{
			AST tmp1561_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getNextSibling();
			AST tmp1562_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			AST tmp1563_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t1310;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void framevaluefunc(AST _t) throws RecognitionException {
		
		AST framevaluefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1564_AST_in = (AST)_t;
		match(_t,FRAMEVALUE);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void generatepbekeyfunc(AST _t) throws RecognitionException {
		
		AST generatepbekeyfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1348 = _t;
		AST tmp1565_AST_in = (AST)_t;
		match(_t,GENERATEPBEKEY);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1348;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void generatepbesaltfunc(AST _t) throws RecognitionException {
		
		AST generatepbesaltfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1566_AST_in = (AST)_t;
		match(_t,GENERATEPBESALT);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void generaterandomkeyfunc(AST _t) throws RecognitionException {
		
		AST generaterandomkeyfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1567_AST_in = (AST)_t;
		match(_t,GENERATERANDOMKEY);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void gatewaysfunc(AST _t) throws RecognitionException {
		
		AST gatewaysfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1568_AST_in = (AST)_t;
		match(_t,GATEWAYS);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void getbitsfunc(AST _t) throws RecognitionException {
		
		AST getbitsfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1357 = _t;
		AST tmp1569_AST_in = (AST)_t;
		match(_t,GETBITS);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1357;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void getbytefunc(AST _t) throws RecognitionException {
		
		AST getbytefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1359 = _t;
		AST tmp1570_AST_in = (AST)_t;
		match(_t,GETBYTE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1359;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void getbyteorderfunc(AST _t) throws RecognitionException {
		
		AST getbyteorderfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1361 = _t;
		AST tmp1571_AST_in = (AST)_t;
		match(_t,GETBYTEORDER);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1361;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void getbytesfunc(AST _t) throws RecognitionException {
		
		AST getbytesfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1363 = _t;
		AST tmp1572_AST_in = (AST)_t;
		match(_t,GETBYTES);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1363;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void getcodepagesfunc(AST _t) throws RecognitionException {
		
		AST getcodepagesfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1365 = _t;
		AST tmp1573_AST_in = (AST)_t;
		match(_t,GETCODEPAGES);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case LEFTPAREN:
		{
			funargs(_t);
			_t = _retTree;
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t1365;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void getcollationsfunc(AST _t) throws RecognitionException {
		
		AST getcollationsfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1368 = _t;
		AST tmp1574_AST_in = (AST)_t;
		match(_t,GETCOLLATIONS);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1368;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void getdoublefunc(AST _t) throws RecognitionException {
		
		AST getdoublefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1370 = _t;
		AST tmp1575_AST_in = (AST)_t;
		match(_t,GETDOUBLE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1370;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void getfloatfunc(AST _t) throws RecognitionException {
		
		AST getfloatfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1372 = _t;
		AST tmp1576_AST_in = (AST)_t;
		match(_t,GETFLOAT);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1372;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void getlicensefunc(AST _t) throws RecognitionException {
		
		AST getlicensefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1377 = _t;
		AST tmp1577_AST_in = (AST)_t;
		match(_t,GETLICENSE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1377;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void getlongfunc(AST _t) throws RecognitionException {
		
		AST getlongfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1379 = _t;
		AST tmp1578_AST_in = (AST)_t;
		match(_t,GETLONG);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1379;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void getpointervaluefunc(AST _t) throws RecognitionException {
		
		AST getpointervaluefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1381 = _t;
		AST tmp1579_AST_in = (AST)_t;
		match(_t,GETPOINTERVALUE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1381;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void getshortfunc(AST _t) throws RecognitionException {
		
		AST getshortfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1383 = _t;
		AST tmp1580_AST_in = (AST)_t;
		match(_t,GETSHORT);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1383;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void getsizefunc(AST _t) throws RecognitionException {
		
		AST getsizefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1385 = _t;
		AST tmp1581_AST_in = (AST)_t;
		match(_t,GETSIZE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1385;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void getstringfunc(AST _t) throws RecognitionException {
		
		AST getstringfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1387 = _t;
		AST tmp1582_AST_in = (AST)_t;
		match(_t,GETSTRING);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1387;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void getunsignedshortfunc(AST _t) throws RecognitionException {
		
		AST getunsignedshortfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1389 = _t;
		AST tmp1583_AST_in = (AST)_t;
		match(_t,GETUNSIGNEDSHORT);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1389;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void gopendingfunc(AST _t) throws RecognitionException {
		
		AST gopendingfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1584_AST_in = (AST)_t;
		match(_t,GOPENDING);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void iffunc(AST _t) throws RecognitionException {
		
		AST iffunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1411 = _t;
		AST tmp1585_AST_in = (AST)_t;
		match(_t,IF);
		_t = _t.getFirstChild();
		expression(_t);
		_t = _retTree;
		AST tmp1586_AST_in = (AST)_t;
		match(_t,THEN);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		AST tmp1587_AST_in = (AST)_t;
		match(_t,ELSE);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		_t = __t1411;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void indexfunc(AST _t) throws RecognitionException {
		
		AST indexfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1441 = _t;
		AST tmp1588_AST_in = (AST)_t;
		match(_t,INDEX);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1441;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void integerfunc(AST _t) throws RecognitionException {
		
		AST integerfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1479 = _t;
		AST tmp1589_AST_in = (AST)_t;
		match(_t,INTEGER);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1479;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void intervalfunc(AST _t) throws RecognitionException {
		
		AST intervalfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1481 = _t;
		AST tmp1590_AST_in = (AST)_t;
		match(_t,INTERVAL);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1481;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void isattrspacefunc(AST _t) throws RecognitionException {
		
		AST isattrspacefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1591_AST_in = (AST)_t;
		match(_t,ISATTRSPACE);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void iscodepagefixedfunc(AST _t) throws RecognitionException {
		
		AST iscodepagefixedfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1502 = _t;
		AST tmp1592_AST_in = (AST)_t;
		match(_t,ISCODEPAGEFIXED);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1502;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void iscolumncodepagefunc(AST _t) throws RecognitionException {
		
		AST iscolumncodepagefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1504 = _t;
		AST tmp1593_AST_in = (AST)_t;
		match(_t,ISCOLUMNCODEPAGE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1504;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void isleadbytefunc(AST _t) throws RecognitionException {
		
		AST isleadbytefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1506 = _t;
		AST tmp1594_AST_in = (AST)_t;
		match(_t,ISLEADBYTE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1506;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void isodatefunc(AST _t) throws RecognitionException {
		
		AST isodatefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1508 = _t;
		AST tmp1595_AST_in = (AST)_t;
		match(_t,ISODATE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1508;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void kblabelfunc(AST _t) throws RecognitionException {
		
		AST kblabelfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1510 = _t;
		AST tmp1596_AST_in = (AST)_t;
		match(_t,KBLABEL);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1510;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void keycodefunc(AST _t) throws RecognitionException {
		
		AST keycodefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1512 = _t;
		AST tmp1597_AST_in = (AST)_t;
		match(_t,KEYCODE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1512;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void keyfuncfunc(AST _t) throws RecognitionException {
		
		AST keyfuncfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1514 = _t;
		AST tmp1598_AST_in = (AST)_t;
		match(_t,KEYFUNCTION);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1514;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void keylabelfunc(AST _t) throws RecognitionException {
		
		AST keylabelfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1516 = _t;
		AST tmp1599_AST_in = (AST)_t;
		match(_t,KEYLABEL);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1516;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void keywordfunc(AST _t) throws RecognitionException {
		
		AST keywordfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1518 = _t;
		AST tmp1600_AST_in = (AST)_t;
		match(_t,KEYWORD);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1518;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void keywordallfunc(AST _t) throws RecognitionException {
		
		AST keywordallfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1520 = _t;
		AST tmp1601_AST_in = (AST)_t;
		match(_t,KEYWORDALL);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1520;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void lastfunc(AST _t) throws RecognitionException {
		
		AST lastfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1529 = _t;
		AST tmp1602_AST_in = (AST)_t;
		match(_t,LAST);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1529;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void lastoffunc(AST _t) throws RecognitionException {
		
		AST lastoffunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1531 = _t;
		AST tmp1603_AST_in = (AST)_t;
		match(_t,LASTOF);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1531;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void lastkeyfunc(AST _t) throws RecognitionException {
		
		AST lastkeyfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1604_AST_in = (AST)_t;
		match(_t,LASTKEY);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void lcfunc(AST _t) throws RecognitionException {
		
		AST lcfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1534 = _t;
		AST tmp1605_AST_in = (AST)_t;
		match(_t,LC);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1534;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void ldbnamefunc(AST _t) throws RecognitionException {
		
		AST ldbnamefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1536 = _t;
		AST tmp1606_AST_in = (AST)_t;
		match(_t,LDBNAME);
		_t = _t.getFirstChild();
		AST tmp1607_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		if ((_t.getType()==BUFFER)) {
			AST __t1538 = _t;
			AST tmp1608_AST_in = (AST)_t;
			match(_t,BUFFER);
			_t = _t.getFirstChild();
			record_name(_t);
			_t = _retTree;
			_t = __t1538;
			_t = _t.getNextSibling();
		}
		else if ((_tokenSet_4.member(_t.getType()))) {
			expression(_t);
			_t = _retTree;
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		AST tmp1609_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_t = __t1536;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void lefttrimfunc(AST _t) throws RecognitionException {
		
		AST lefttrimfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1543 = _t;
		AST tmp1610_AST_in = (AST)_t;
		match(_t,LEFTTRIM);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1543;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void libraryfunc(AST _t) throws RecognitionException {
		
		AST libraryfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1547 = _t;
		AST tmp1611_AST_in = (AST)_t;
		match(_t,LIBRARY);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1547;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void linecounterfunc(AST _t) throws RecognitionException {
		
		AST linecounterfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1549 = _t;
		AST tmp1612_AST_in = (AST)_t;
		match(_t,LINECOUNTER);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case LEFTPAREN:
		{
			AST tmp1613_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getNextSibling();
			AST tmp1614_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			AST tmp1615_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t1549;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void listeventsfunc(AST _t) throws RecognitionException {
		
		AST listeventsfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1552 = _t;
		AST tmp1616_AST_in = (AST)_t;
		match(_t,LISTEVENTS);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1552;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void listqueryattrsfunc(AST _t) throws RecognitionException {
		
		AST listqueryattrsfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1554 = _t;
		AST tmp1617_AST_in = (AST)_t;
		match(_t,LISTQUERYATTRS);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1554;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void listsetattrsfunc(AST _t) throws RecognitionException {
		
		AST listsetattrsfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1556 = _t;
		AST tmp1618_AST_in = (AST)_t;
		match(_t,LISTSETATTRS);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1556;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void listwidgetsfunc(AST _t) throws RecognitionException {
		
		AST listwidgetsfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1558 = _t;
		AST tmp1619_AST_in = (AST)_t;
		match(_t,LISTWIDGETS);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1558;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void loadpicturefunc(AST _t) throws RecognitionException {
		
		AST loadpicturefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1566 = _t;
		AST tmp1620_AST_in = (AST)_t;
		match(_t,LOADPICTURE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case LEFTPAREN:
		{
			funargs(_t);
			_t = _retTree;
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t1566;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void lockedfunc(AST _t) throws RecognitionException {
		
		AST lockedfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1569 = _t;
		AST tmp1621_AST_in = (AST)_t;
		match(_t,LOCKED);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case RECORD_NAME:
		{
			record_name(_t);
			_t = _retTree;
			break;
		}
		case LEFTPAREN:
		{
			AST tmp1622_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getNextSibling();
			record_name(_t);
			_t = _retTree;
			AST tmp1623_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t1569;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void logfunc(AST _t) throws RecognitionException {
		
		AST logfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1572 = _t;
		AST tmp1624_AST_in = (AST)_t;
		match(_t,LOG);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1572;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void logicalfunc(AST _t) throws RecognitionException {
		
		AST logicalfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1574 = _t;
		AST tmp1625_AST_in = (AST)_t;
		match(_t,LOGICAL);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1574;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void lookupfunc(AST _t) throws RecognitionException {
		
		AST lookupfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1576 = _t;
		AST tmp1626_AST_in = (AST)_t;
		match(_t,LOOKUP);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1576;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void machineclassfunc(AST _t) throws RecognitionException {
		
		AST machineclassfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1627_AST_in = (AST)_t;
		match(_t,MACHINECLASS);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void maximumfunc(AST _t) throws RecognitionException {
		
		AST maximumfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1579 = _t;
		AST tmp1628_AST_in = (AST)_t;
		match(_t,MAXIMUM);
		_t = _t.getFirstChild();
		{
		boolean synPredMatched1583 = false;
		if (((_t.getType()==LEFTPAREN))) {
			AST __t1583 = _t;
			synPredMatched1583 = true;
			inputState.guessing++;
			try {
				{
				AST tmp1629_AST_in = (AST)_t;
				match(_t,LEFTPAREN);
				_t = _t.getNextSibling();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case DISTINCT:
				{
					AST tmp1630_AST_in = (AST)_t;
					match(_t,DISTINCT);
					_t = _t.getNextSibling();
					break;
				}
				case STAR:
				{
					AST tmp1631_AST_in = (AST)_t;
					match(_t,STAR);
					_t = _t.getNextSibling();
					break;
				}
				case ALL:
				{
					AST tmp1632_AST_in = (AST)_t;
					match(_t,ALL);
					_t = _t.getNextSibling();
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				}
			}
			catch (RecognitionException pe) {
				synPredMatched1583 = false;
			}
			_t = __t1583;
			inputState.guessing--;
		}
		if ( synPredMatched1583 ) {
			sqlaggregatefunc_arg(_t);
			_t = _retTree;
		}
		else if ((_t.getType()==LEFTPAREN)) {
			funargs(_t);
			_t = _retTree;
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		_t = __t1579;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void md5digestfunc(AST _t) throws RecognitionException {
		
		AST md5digestfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1585 = _t;
		AST tmp1633_AST_in = (AST)_t;
		match(_t,MD5DIGEST);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1585;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void memberfunc(AST _t) throws RecognitionException {
		
		AST memberfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1587 = _t;
		AST tmp1634_AST_in = (AST)_t;
		match(_t,MEMBER);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1587;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void messagelinesfunc(AST _t) throws RecognitionException {
		
		AST messagelinesfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1635_AST_in = (AST)_t;
		match(_t,MESSAGELINES);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void minimumfunc(AST _t) throws RecognitionException {
		
		AST minimumfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1612 = _t;
		AST tmp1636_AST_in = (AST)_t;
		match(_t,MINIMUM);
		_t = _t.getFirstChild();
		{
		boolean synPredMatched1616 = false;
		if (((_t.getType()==LEFTPAREN))) {
			AST __t1616 = _t;
			synPredMatched1616 = true;
			inputState.guessing++;
			try {
				{
				AST tmp1637_AST_in = (AST)_t;
				match(_t,LEFTPAREN);
				_t = _t.getNextSibling();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case DISTINCT:
				{
					AST tmp1638_AST_in = (AST)_t;
					match(_t,DISTINCT);
					_t = _t.getNextSibling();
					break;
				}
				case STAR:
				{
					AST tmp1639_AST_in = (AST)_t;
					match(_t,STAR);
					_t = _t.getNextSibling();
					break;
				}
				case ALL:
				{
					AST tmp1640_AST_in = (AST)_t;
					match(_t,ALL);
					_t = _t.getNextSibling();
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				}
			}
			catch (RecognitionException pe) {
				synPredMatched1616 = false;
			}
			_t = __t1616;
			inputState.guessing--;
		}
		if ( synPredMatched1616 ) {
			sqlaggregatefunc_arg(_t);
			_t = _retTree;
		}
		else if ((_t.getType()==LEFTPAREN)) {
			funargs(_t);
			_t = _retTree;
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		_t = __t1612;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void monthfunc(AST _t) throws RecognitionException {
		
		AST monthfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1618 = _t;
		AST tmp1641_AST_in = (AST)_t;
		match(_t,MONTH);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1618;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void mtimefunc(AST _t) throws RecognitionException {
		
		AST mtimefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1620 = _t;
		AST tmp1642_AST_in = (AST)_t;
		match(_t,MTIME);
		_t = _t.getFirstChild();
		AST tmp1643_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		if ((_tokenSet_4.member(_t.getType()))) {
			expression(_t);
			_t = _retTree;
		}
		else if ((_t.getType()==RIGHTPAREN)) {
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		AST tmp1644_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_t = __t1620;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void newfunc(AST _t) throws RecognitionException {
		
		AST newfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1623 = _t;
		AST tmp1645_AST_in = (AST)_t;
		match(_t,NEW);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case LEFTPAREN:
		{
			AST tmp1646_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getNextSibling();
			record_name(_t);
			_t = _retTree;
			AST tmp1647_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			break;
		}
		case RECORD_NAME:
		{
			record_name(_t);
			_t = _retTree;
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t1623;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void normalizefunc(AST _t) throws RecognitionException {
		
		AST normalizefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1636 = _t;
		AST tmp1648_AST_in = (AST)_t;
		match(_t,NORMALIZE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1636;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void nowfunc(AST _t) throws RecognitionException {
		
		AST nowfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1649_AST_in = (AST)_t;
		match(_t,NOW);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void numaliasesfunc(AST _t) throws RecognitionException {
		
		AST numaliasesfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1650_AST_in = (AST)_t;
		match(_t,NUMALIASES);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void numdbsfunc(AST _t) throws RecognitionException {
		
		AST numdbsfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1651_AST_in = (AST)_t;
		match(_t,NUMDBS);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void numentriesfunc(AST _t) throws RecognitionException {
		
		AST numentriesfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1641 = _t;
		AST tmp1652_AST_in = (AST)_t;
		match(_t,NUMENTRIES);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1641;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void numresultsfunc(AST _t) throws RecognitionException {
		
		AST numresultsfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1643 = _t;
		AST tmp1653_AST_in = (AST)_t;
		match(_t,NUMRESULTS);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1643;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void opsysfunc(AST _t) throws RecognitionException {
		
		AST opsysfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1654_AST_in = (AST)_t;
		match(_t,OPSYS);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void osdrivesfunc(AST _t) throws RecognitionException {
		
		AST osdrivesfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1655_AST_in = (AST)_t;
		match(_t,OSDRIVES);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void oserrorfunc(AST _t) throws RecognitionException {
		
		AST oserrorfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1656_AST_in = (AST)_t;
		match(_t,OSERROR);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void osgetenvfunc(AST _t) throws RecognitionException {
		
		AST osgetenvfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1762 = _t;
		AST tmp1657_AST_in = (AST)_t;
		match(_t,OSGETENV);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1762;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void pagenumberfunc(AST _t) throws RecognitionException {
		
		AST pagenumberfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1780 = _t;
		AST tmp1658_AST_in = (AST)_t;
		match(_t,PAGENUMBER);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case LEFTPAREN:
		{
			AST tmp1659_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getNextSibling();
			AST tmp1660_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			AST tmp1661_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t1780;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void pagesizefunc(AST _t) throws RecognitionException {
		
		AST pagesizefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1783 = _t;
		AST tmp1662_AST_in = (AST)_t;
		match(_t,PAGESIZE_KW);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case LEFTPAREN:
		{
			AST tmp1663_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getNextSibling();
			AST tmp1664_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			AST tmp1665_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t1783;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void pdbnamefunc(AST _t) throws RecognitionException {
		
		AST pdbnamefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1793 = _t;
		AST tmp1666_AST_in = (AST)_t;
		match(_t,PDBNAME);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1793;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void prochandlefunc(AST _t) throws RecognitionException {
		
		AST prochandlefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1667_AST_in = (AST)_t;
		match(_t,PROCHANDLE);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void procstatusfunc(AST _t) throws RecognitionException {
		
		AST procstatusfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1668_AST_in = (AST)_t;
		match(_t,PROCSTATUS);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void programnamefunc(AST _t) throws RecognitionException {
		
		AST programnamefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1809 = _t;
		AST tmp1669_AST_in = (AST)_t;
		match(_t,PROGRAMNAME);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1809;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void progressfunc(AST _t) throws RecognitionException {
		
		AST progressfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1670_AST_in = (AST)_t;
		match(_t,PROGRESS);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void promsgsfunc(AST _t) throws RecognitionException {
		
		AST promsgsfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1671_AST_in = (AST)_t;
		match(_t,PROMSGS);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void propathfunc(AST _t) throws RecognitionException {
		
		AST propathfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1672_AST_in = (AST)_t;
		match(_t,PROPATH);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void proversionfunc(AST _t) throws RecognitionException {
		
		AST proversionfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1673_AST_in = (AST)_t;
		match(_t,PROVERSION);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void queryoffendfunc(AST _t) throws RecognitionException {
		
		AST queryoffendfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1900 = _t;
		AST tmp1674_AST_in = (AST)_t;
		match(_t,QUERYOFFEND);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1900;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void quoterfunc(AST _t) throws RecognitionException {
		
		AST quoterfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1904 = _t;
		AST tmp1675_AST_in = (AST)_t;
		match(_t,QUOTER);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1904;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void rindexfunc(AST _t) throws RecognitionException {
		
		AST rindexfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1906 = _t;
		AST tmp1676_AST_in = (AST)_t;
		match(_t,RINDEX);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1906;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void randomfunc(AST _t) throws RecognitionException {
		
		AST randomfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1922 = _t;
		AST tmp1677_AST_in = (AST)_t;
		match(_t,RANDOM);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1922;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void recidfunc(AST _t) throws RecognitionException {
		
		AST recidfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1944 = _t;
		AST tmp1678_AST_in = (AST)_t;
		match(_t,RECID);
		_t = _t.getFirstChild();
		AST tmp1679_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		record_name(_t);
		_t = _retTree;
		AST tmp1680_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_t = __t1944;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void recordlengthfunc(AST _t) throws RecognitionException {
		
		AST recordlengthfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1973 = _t;
		AST tmp1681_AST_in = (AST)_t;
		match(_t,RECORDLENGTH);
		_t = _t.getFirstChild();
		AST tmp1682_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		record_name(_t);
		_t = _retTree;
		AST tmp1683_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_t = __t1973;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void rejectedfunc(AST _t) throws RecognitionException {
		
		AST rejectedfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1975 = _t;
		AST tmp1684_AST_in = (AST)_t;
		match(_t,REJECTED);
		_t = _t.getFirstChild();
		AST tmp1685_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		record_name(_t);
		_t = _retTree;
		AST tmp1686_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_t = __t1975;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void replacefunc(AST _t) throws RecognitionException {
		
		AST replacefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1987 = _t;
		AST tmp1687_AST_in = (AST)_t;
		match(_t,REPLACE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t1987;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void retryfunc(AST _t) throws RecognitionException {
		
		AST retryfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1688_AST_in = (AST)_t;
		match(_t,RETRY);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void returnvaluefunc(AST _t) throws RecognitionException {
		
		AST returnvaluefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1689_AST_in = (AST)_t;
		match(_t,RETURNVALUE);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void rgbvaluefunc(AST _t) throws RecognitionException {
		
		AST rgbvaluefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2013 = _t;
		AST tmp1690_AST_in = (AST)_t;
		match(_t,RGBVALUE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t2013;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void righttrimfunc(AST _t) throws RecognitionException {
		
		AST righttrimfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2015 = _t;
		AST tmp1691_AST_in = (AST)_t;
		match(_t,RIGHTTRIM);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t2015;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void roundfunc(AST _t) throws RecognitionException {
		
		AST roundfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2017 = _t;
		AST tmp1692_AST_in = (AST)_t;
		match(_t,ROUND);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t2017;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void rowidfunc(AST _t) throws RecognitionException {
		
		AST rowidfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2019 = _t;
		AST tmp1693_AST_in = (AST)_t;
		match(_t,ROWID);
		_t = _t.getFirstChild();
		AST tmp1694_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		record_name(_t);
		_t = _retTree;
		AST tmp1695_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_t = __t2019;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void rowstatefunc(AST _t) throws RecognitionException {
		
		AST rowstatefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2021 = _t;
		AST tmp1696_AST_in = (AST)_t;
		match(_t,ROWSTATE);
		_t = _t.getFirstChild();
		AST tmp1697_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		record_name(_t);
		_t = _retTree;
		AST tmp1698_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_t = __t2021;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void screenlinesfunc(AST _t) throws RecognitionException {
		
		AST screenlinesfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1699_AST_in = (AST)_t;
		match(_t,SCREENLINES);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void sdbnamefunc(AST _t) throws RecognitionException {
		
		AST sdbnamefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2070 = _t;
		AST tmp1700_AST_in = (AST)_t;
		match(_t,SDBNAME);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t2070;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void searchfunc(AST _t) throws RecognitionException {
		
		AST searchfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2072 = _t;
		AST tmp1701_AST_in = (AST)_t;
		match(_t,SEARCH);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t2072;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void seekfunc(AST _t) throws RecognitionException {
		
		AST seekfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2074 = _t;
		AST tmp1702_AST_in = (AST)_t;
		match(_t,SEEK);
		_t = _t.getFirstChild();
		AST tmp1703_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case INPUT:
		{
			AST tmp1704_AST_in = (AST)_t;
			match(_t,INPUT);
			_t = _t.getNextSibling();
			break;
		}
		case OUTPUT:
		{
			AST tmp1705_AST_in = (AST)_t;
			match(_t,OUTPUT);
			_t = _t.getNextSibling();
			break;
		}
		case ID:
		{
			AST tmp1706_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp1707_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_t = __t2074;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void setuseridfunc(AST _t) throws RecognitionException {
		
		AST setuseridfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2115 = _t;
		AST tmp1708_AST_in = (AST)_t;
		match(_t,SETUSERID);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t2115;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void sha1digestfunc(AST _t) throws RecognitionException {
		
		AST sha1digestfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2120 = _t;
		AST tmp1709_AST_in = (AST)_t;
		match(_t,SHA1DIGEST);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t2120;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void sqlaggregatefunc(AST _t) throws RecognitionException {
		
		AST sqlaggregatefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case AVG:
		{
			AST __t2578 = _t;
			AST tmp1710_AST_in = (AST)_t;
			match(_t,AVG);
			_t = _t.getFirstChild();
			sqlaggregatefunc_arg(_t);
			_t = _retTree;
			_t = __t2578;
			_t = _t.getNextSibling();
			break;
		}
		case COUNT:
		{
			AST __t2579 = _t;
			AST tmp1711_AST_in = (AST)_t;
			match(_t,COUNT);
			_t = _t.getFirstChild();
			sqlaggregatefunc_arg(_t);
			_t = _retTree;
			_t = __t2579;
			_t = _t.getNextSibling();
			break;
		}
		case SUM:
		{
			AST __t2580 = _t;
			AST tmp1712_AST_in = (AST)_t;
			match(_t,SUM);
			_t = _t.getFirstChild();
			sqlaggregatefunc_arg(_t);
			_t = _retTree;
			_t = __t2580;
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void sqrtfunc(AST _t) throws RecognitionException {
		
		AST sqrtfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2142 = _t;
		AST tmp1713_AST_in = (AST)_t;
		match(_t,SQRT);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t2142;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void sslservernamefunc(AST _t) throws RecognitionException {
		
		AST sslservernamefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2144 = _t;
		AST tmp1714_AST_in = (AST)_t;
		match(_t,SSLSERVERNAME);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t2144;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void stringfunc(AST _t) throws RecognitionException {
		
		AST stringfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2160 = _t;
		AST tmp1715_AST_in = (AST)_t;
		match(_t,STRING);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t2160;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void substitutefunc(AST _t) throws RecognitionException {
		
		AST substitutefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2172 = _t;
		AST tmp1716_AST_in = (AST)_t;
		match(_t,SUBSTITUTE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t2172;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void superfunc(AST _t) throws RecognitionException {
		
		AST superfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2176 = _t;
		AST tmp1717_AST_in = (AST)_t;
		match(_t,SUPER);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case Parameter_list:
		{
			parameterlist(_t);
			_t = _retTree;
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t2176;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void torowidfunc(AST _t) throws RecognitionException {
		
		AST torowidfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2260 = _t;
		AST tmp1718_AST_in = (AST)_t;
		match(_t,TOROWID);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t2260;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void terminalfunc(AST _t) throws RecognitionException {
		
		AST terminalfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1719_AST_in = (AST)_t;
		match(_t,TERMINAL);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void timefunc(AST _t) throws RecognitionException {
		
		AST timefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1720_AST_in = (AST)_t;
		match(_t,TIME);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void timezonefunc(AST _t) throws RecognitionException {
		
		AST timezonefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2243 = _t;
		AST tmp1721_AST_in = (AST)_t;
		match(_t,TIMEZONE);
		_t = _t.getFirstChild();
		AST tmp1722_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		if ((_tokenSet_4.member(_t.getType()))) {
			expression(_t);
			_t = _retTree;
		}
		else if ((_t.getType()==RIGHTPAREN)) {
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		AST tmp1723_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_t = __t2243;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void todayfunc(AST _t) throws RecognitionException {
		
		AST todayfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1724_AST_in = (AST)_t;
		match(_t,TODAY);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void transactionfunc(AST _t) throws RecognitionException {
		
		AST transactionfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1725_AST_in = (AST)_t;
		match(_t,TRANSACTION);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void trimfunc(AST _t) throws RecognitionException {
		
		AST trimfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2298 = _t;
		AST tmp1726_AST_in = (AST)_t;
		match(_t,TRIM);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t2298;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void truncatefunc(AST _t) throws RecognitionException {
		
		AST truncatefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2300 = _t;
		AST tmp1727_AST_in = (AST)_t;
		match(_t,TRUNCATE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t2300;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void useridfunc(AST _t) throws RecognitionException {
		
		AST useridfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case USERID:
		{
			AST __t2362 = _t;
			AST tmp1728_AST_in = (AST)_t;
			match(_t,USERID);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case LEFTPAREN:
			{
				funargs(_t);
				_t = _retTree;
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t2362;
			_t = _t.getNextSibling();
			break;
		}
		case USER:
		{
			AST __t2364 = _t;
			AST tmp1729_AST_in = (AST)_t;
			match(_t,USER);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case LEFTPAREN:
			{
				funargs(_t);
				_t = _retTree;
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t2364;
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void valideventfunc(AST _t) throws RecognitionException {
		
		AST valideventfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2367 = _t;
		AST tmp1730_AST_in = (AST)_t;
		match(_t,VALIDEVENT);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t2367;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void validhandlefunc(AST _t) throws RecognitionException {
		
		AST validhandlefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2369 = _t;
		AST tmp1731_AST_in = (AST)_t;
		match(_t,VALIDHANDLE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t2369;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void weekdayfunc(AST _t) throws RecognitionException {
		
		AST weekdayfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2395 = _t;
		AST tmp1732_AST_in = (AST)_t;
		match(_t,WEEKDAY);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t2395;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void widgethandlefunc(AST _t) throws RecognitionException {
		
		AST widgethandlefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2397 = _t;
		AST tmp1733_AST_in = (AST)_t;
		match(_t,WIDGETHANDLE);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t2397;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void yearfunc(AST _t) throws RecognitionException {
		
		AST yearfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2399 = _t;
		AST tmp1734_AST_in = (AST)_t;
		match(_t,YEAR);
		_t = _t.getFirstChild();
		funargs(_t);
		_t = _retTree;
		_t = __t2399;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void parameter(AST _t) throws RecognitionException {
		
		AST parameter_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case BUFFER:
		{
			AST __t39 = _t;
			AST tmp1735_AST_in = (AST)_t;
			match(_t,BUFFER);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case RECORD_NAME:
			{
				record_name(_t);
				_t = _retTree;
				break;
			}
			case ID:
			{
				AST tmp1736_AST_in = (AST)_t;
				match(_t,ID);
				_t = _t.getNextSibling();
				AST tmp1737_AST_in = (AST)_t;
				match(_t,FOR);
				_t = _t.getNextSibling();
				record_name(_t);
				_t = _retTree;
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t39;
			_t = _t.getNextSibling();
			break;
		}
		case PARAM:
		{
			AST __t41 = _t;
			AST tmp1738_AST_in = (AST)_t;
			match(_t,PARAM);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			AST tmp1739_AST_in = (AST)_t;
			match(_t,EQUAL);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t41;
			_t = _t.getNextSibling();
			break;
		}
		case OUTPUT:
		{
			AST __t42 = _t;
			AST tmp1740_AST_in = (AST)_t;
			match(_t,OUTPUT);
			_t = _t.getFirstChild();
			if ( inputState.guessing==0 ) {
				tpSupport.updating(true);
			}
			parameter_arg(_t);
			_t = _retTree;
			if ( inputState.guessing==0 ) {
				tpSupport.updating(false);
			}
			_t = __t42;
			_t = _t.getNextSibling();
			break;
		}
		case INPUTOUTPUT:
		{
			AST __t43 = _t;
			AST tmp1741_AST_in = (AST)_t;
			match(_t,INPUTOUTPUT);
			_t = _t.getFirstChild();
			if ( inputState.guessing==0 ) {
				tpSupport.updating(true);
			}
			parameter_arg(_t);
			_t = _retTree;
			if ( inputState.guessing==0 ) {
				tpSupport.updating(false);
			}
			_t = __t43;
			_t = _t.getNextSibling();
			break;
		}
		case INPUT:
		{
			AST __t44 = _t;
			AST tmp1742_AST_in = (AST)_t;
			match(_t,INPUT);
			_t = _t.getFirstChild();
			parameter_arg(_t);
			_t = _retTree;
			_t = __t44;
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void parameter_arg(AST _t) throws RecognitionException {
		
		AST parameter_arg_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case TABLEHANDLE:
		{
			AST tmp1743_AST_in = (AST)_t;
			match(_t,TABLEHANDLE);
			_t = _t.getNextSibling();
			field(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case APPEND:
			{
				AST tmp1744_AST_in = (AST)_t;
				match(_t,APPEND);
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			break;
		}
		case TABLE:
		{
			AST tmp1745_AST_in = (AST)_t;
			match(_t,TABLE);
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case FOR:
			{
				AST tmp1746_AST_in = (AST)_t;
				match(_t,FOR);
				_t = _t.getNextSibling();
				break;
			}
			case RECORD_NAME:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			record_name(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case APPEND:
			{
				AST tmp1747_AST_in = (AST)_t;
				match(_t,APPEND);
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			break;
		}
		case DATASET:
		{
			AST tmp1748_AST_in = (AST)_t;
			match(_t,DATASET);
			_t = _t.getNextSibling();
			AST tmp1749_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case APPEND:
			{
				AST tmp1750_AST_in = (AST)_t;
				match(_t,APPEND);
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			case BYVALUE:
			case BYREFERENCE:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case BYVALUE:
			{
				AST tmp1751_AST_in = (AST)_t;
				match(_t,BYVALUE);
				_t = _t.getNextSibling();
				break;
			}
			case BYREFERENCE:
			{
				AST tmp1752_AST_in = (AST)_t;
				match(_t,BYREFERENCE);
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			break;
		}
		case DATASETHANDLE:
		{
			AST tmp1753_AST_in = (AST)_t;
			match(_t,DATASETHANDLE);
			_t = _t.getNextSibling();
			AST tmp1754_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case APPEND:
			{
				AST tmp1755_AST_in = (AST)_t;
				match(_t,APPEND);
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			case BYVALUE:
			case BYREFERENCE:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case BYVALUE:
			{
				AST tmp1756_AST_in = (AST)_t;
				match(_t,BYVALUE);
				_t = _t.getNextSibling();
				break;
			}
			case BYREFERENCE:
			{
				AST tmp1757_AST_in = (AST)_t;
				match(_t,BYREFERENCE);
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			break;
		}
		case ID:
		{
			AST tmp1758_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			AST tmp1759_AST_in = (AST)_t;
			match(_t,AS);
			_t = _t.getNextSibling();
			{
			datatype_var(_t);
			_t = _retTree;
			}
			break;
		}
		default:
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_4.member(_t.getType()))) {
				expression(_t);
				_t = _retTree;
			}
		else {
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void datatype_var(AST _t) throws RecognitionException {
		
		AST datatype_var_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case CHARACTER:
		{
			AST tmp1760_AST_in = (AST)_t;
			match(_t,CHARACTER);
			_t = _t.getNextSibling();
			break;
		}
		case COMHANDLE:
		{
			AST tmp1761_AST_in = (AST)_t;
			match(_t,COMHANDLE);
			_t = _t.getNextSibling();
			break;
		}
		case DATE:
		{
			AST tmp1762_AST_in = (AST)_t;
			match(_t,DATE);
			_t = _t.getNextSibling();
			break;
		}
		case DATETIME:
		{
			AST tmp1763_AST_in = (AST)_t;
			match(_t,DATETIME);
			_t = _t.getNextSibling();
			break;
		}
		case DATETIMETZ:
		{
			AST tmp1764_AST_in = (AST)_t;
			match(_t,DATETIMETZ);
			_t = _t.getNextSibling();
			break;
		}
		case DECIMAL:
		{
			AST tmp1765_AST_in = (AST)_t;
			match(_t,DECIMAL);
			_t = _t.getNextSibling();
			break;
		}
		case HANDLE:
		{
			AST tmp1766_AST_in = (AST)_t;
			match(_t,HANDLE);
			_t = _t.getNextSibling();
			break;
		}
		case INTEGER:
		{
			AST tmp1767_AST_in = (AST)_t;
			match(_t,INTEGER);
			_t = _t.getNextSibling();
			break;
		}
		case LOGICAL:
		{
			AST tmp1768_AST_in = (AST)_t;
			match(_t,LOGICAL);
			_t = _t.getNextSibling();
			break;
		}
		case LONGCHAR:
		{
			AST tmp1769_AST_in = (AST)_t;
			match(_t,LONGCHAR);
			_t = _t.getNextSibling();
			break;
		}
		case MEMPTR:
		{
			AST tmp1770_AST_in = (AST)_t;
			match(_t,MEMPTR);
			_t = _t.getNextSibling();
			break;
		}
		case RAW:
		{
			AST tmp1771_AST_in = (AST)_t;
			match(_t,RAW);
			_t = _t.getNextSibling();
			break;
		}
		case RECID:
		{
			AST tmp1772_AST_in = (AST)_t;
			match(_t,RECID);
			_t = _t.getNextSibling();
			break;
		}
		case ROWID:
		{
			AST tmp1773_AST_in = (AST)_t;
			match(_t,ROWID);
			_t = _t.getNextSibling();
			break;
		}
		case WIDGETHANDLE:
		{
			AST tmp1774_AST_in = (AST)_t;
			match(_t,WIDGETHANDLE);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void parameterlist(AST _t) throws RecognitionException {
		
		AST parameterlist_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t55 = _t;
		AST tmp1775_AST_in = (AST)_t;
		match(_t,Parameter_list);
		_t = _t.getFirstChild();
		parameterlist_noroot(_t);
		_t = _retTree;
		_t = __t55;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void parameterlist_noroot(AST _t) throws RecognitionException {
		
		AST parameterlist_noroot_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1776_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case BUFFER:
		case INPUT:
		case INPUTOUTPUT:
		case OUTPUT:
		case PARAM:
		{
			parameter(_t);
			_t = _retTree;
			break;
		}
		case COMMA:
		case RIGHTPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop59:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==COMMA)) {
				AST tmp1777_AST_in = (AST)_t;
				match(_t,COMMA);
				_t = _t.getNextSibling();
				parameter(_t);
				_t = _retTree;
			}
			else {
				break _loop59;
			}
			
		} while (true);
		}
		AST tmp1778_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void eventlist(AST _t) throws RecognitionException {
		
		AST eventlist_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t61 = _t;
		AST tmp1779_AST_in = (AST)_t;
		match(_t,Event_list);
		_t = _t.getFirstChild();
		AST tmp1780_AST_in = (AST)_t;
		if ( _t==null ) throw new MismatchedTokenException();
		_t = _t.getNextSibling();
		{
		_loop63:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==COMMA)) {
				AST tmp1781_AST_in = (AST)_t;
				match(_t,COMMA);
				_t = _t.getNextSibling();
				AST tmp1782_AST_in = (AST)_t;
				if ( _t==null ) throw new MismatchedTokenException();
				_t = _t.getNextSibling();
			}
			else {
				break _loop63;
			}
			
		} while (true);
		}
		_t = __t61;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void funargs(AST _t) throws RecognitionException {
		
		AST funargs_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp1783_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		{
		_loop66:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==COMMA)) {
				AST tmp1784_AST_in = (AST)_t;
				match(_t,COMMA);
				_t = _t.getNextSibling();
				expression(_t);
				_t = _retTree;
			}
			else {
				break _loop66;
			}
			
		} while (true);
		}
		AST tmp1785_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void anyorvalue(AST _t) throws RecognitionException {
		
		AST anyorvalue_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case VALUE:
		{
			AST __t68 = _t;
			AST tmp1786_AST_in = (AST)_t;
			match(_t,VALUE);
			_t = _t.getFirstChild();
			AST tmp1787_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			AST tmp1788_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			_t = __t68;
			_t = _t.getNextSibling();
			break;
		}
		case TYPELESS_TOKEN:
		{
			AST tmp1789_AST_in = (AST)_t;
			match(_t,TYPELESS_TOKEN);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void filenameorvalue(AST _t) throws RecognitionException {
		
		AST filenameorvalue_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case VALUE:
		{
			AST __t70 = _t;
			AST tmp1790_AST_in = (AST)_t;
			match(_t,VALUE);
			_t = _t.getFirstChild();
			AST tmp1791_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			AST tmp1792_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			_t = __t70;
			_t = _t.getNextSibling();
			break;
		}
		case FILENAME:
		{
			AST tmp1793_AST_in = (AST)_t;
			match(_t,FILENAME);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void valueexpression(AST _t) throws RecognitionException {
		
		AST valueexpression_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t72 = _t;
		AST tmp1794_AST_in = (AST)_t;
		match(_t,VALUE);
		_t = _t.getFirstChild();
		AST tmp1795_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		AST tmp1796_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_t = __t72;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void expressionorvalue(AST _t) throws RecognitionException {
		
		AST expressionorvalue_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		if ((_t.getType()==VALUE)) {
			AST __t74 = _t;
			AST tmp1797_AST_in = (AST)_t;
			match(_t,VALUE);
			_t = _t.getFirstChild();
			AST tmp1798_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			AST tmp1799_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			_t = __t74;
			_t = _t.getNextSibling();
		}
		else if ((_tokenSet_4.member(_t.getType()))) {
			expression(_t);
			_t = _retTree;
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		_retTree = _t;
	}
	
	public final void findwhich(AST _t) throws RecognitionException {
		
		AST findwhich_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case CURRENT:
		{
			AST tmp1800_AST_in = (AST)_t;
			match(_t,CURRENT);
			_t = _t.getNextSibling();
			break;
		}
		case EACH:
		{
			AST tmp1801_AST_in = (AST)_t;
			match(_t,EACH);
			_t = _t.getNextSibling();
			break;
		}
		case FIRST:
		{
			AST tmp1802_AST_in = (AST)_t;
			match(_t,FIRST);
			_t = _t.getNextSibling();
			break;
		}
		case LAST:
		{
			AST tmp1803_AST_in = (AST)_t;
			match(_t,LAST);
			_t = _t.getNextSibling();
			break;
		}
		case NEXT:
		{
			AST tmp1804_AST_in = (AST)_t;
			match(_t,NEXT);
			_t = _t.getNextSibling();
			break;
		}
		case PREV:
		{
			AST tmp1805_AST_in = (AST)_t;
			match(_t,PREV);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void lockhow(AST _t) throws RecognitionException {
		
		AST lockhow_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case SHARELOCK:
		{
			AST tmp1806_AST_in = (AST)_t;
			match(_t,SHARELOCK);
			_t = _t.getNextSibling();
			break;
		}
		case EXCLUSIVELOCK:
		{
			AST tmp1807_AST_in = (AST)_t;
			match(_t,EXCLUSIVELOCK);
			_t = _t.getNextSibling();
			break;
		}
		case NOLOCK:
		{
			AST tmp1808_AST_in = (AST)_t;
			match(_t,NOLOCK);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void exprt(AST _t) throws RecognitionException {
		
		AST exprt_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case LEXDATE:
		case NUMBER:
		case QSTRING:
		case BIGENDIAN:
		case EXCLUSIVELOCK:
		case FALSE_KW:
		case FINDCASESENSITIVE:
		case FINDGLOBAL:
		case FINDNEXTOCCURRENCE:
		case FINDPREVOCCURRENCE:
		case FINDSELECT:
		case FINDWRAPAROUND:
		case HOSTBYTEORDER:
		case LITTLEENDIAN:
		case NO:
		case NOLOCK:
		case NOWAIT:
		case NULL_KW:
		case READAVAILABLE:
		case READEXACTNUM:
		case SEARCHSELF:
		case SEARCHTARGET:
		case SHARELOCK:
		case TRUE_KW:
		case WINDOWDELAYEDMINIMIZE:
		case WINDOWMAXIMIZED:
		case WINDOWMINIMIZED:
		case WINDOWNORMAL:
		case YES:
		case UNKNOWNVALUE:
		case FUNCTIONCALLTYPE:
		case GETATTRCALLTYPE:
		case PROCEDURECALLTYPE:
		case SAXCOMPLETE:
		case SAXPARSERERROR:
		case SAXRUNNING:
		case SAXUNINITIALIZED:
		case SETATTRCALLTYPE:
		case ROWUNMODIFIED:
		case ROWDELETED:
		case ROWMODIFIED:
		case ROWCREATED:
		{
			constant(_t);
			_t = _retTree;
			break;
		}
		case USER_FUNC:
		{
			AST __t98 = _t;
			AST tmp1809_AST_in = (AST)_t;
			match(_t,USER_FUNC);
			_t = _t.getFirstChild();
			parameterlist_noroot(_t);
			_t = _retTree;
			_t = __t98;
			_t = _t.getNextSibling();
			break;
		}
		case AAMEMORY:
		case ACTIVEWINDOW:
		case CLIPBOARD:
		case CODEBASELOCATOR:
		case COLORTABLE:
		case COMPILER:
		case COMSELF:
		case CURRENTWINDOW:
		case DEBUGGER:
		case DEFAULTWINDOW:
		case ERRORSTATUS:
		case FILEINFORMATION:
		case FOCUS:
		case FONTTABLE:
		case LASTEVENT:
		case MOUSE:
		case PROFILER:
		case RCODEINFORMATION:
		case SELF:
		case SESSION:
		case SOURCEPROCEDURE:
		case TARGETPROCEDURE:
		case TEXTCURSOR:
		case THISPROCEDURE:
		case WEBCONTEXT:
		case LOGMANAGER:
		case SECURITYPOLICY:
		{
			systemhandlename(_t);
			_t = _retTree;
			break;
		}
		case Widget_ref:
		{
			widattr(_t);
			_t = _retTree;
			break;
		}
		case Field_ref:
		{
			field(_t);
			_t = _retTree;
			break;
		}
		case Entered_func:
		{
			AST __t99 = _t;
			AST tmp1810_AST_in = (AST)_t;
			match(_t,Entered_func);
			_t = _t.getFirstChild();
			field(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case NOT:
			{
				AST tmp1811_AST_in = (AST)_t;
				match(_t,NOT);
				_t = _t.getNextSibling();
				break;
			}
			case ENTERED:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp1812_AST_in = (AST)_t;
			match(_t,ENTERED);
			_t = _t.getNextSibling();
			_t = __t99;
			_t = _t.getNextSibling();
			break;
		}
		case LEFTPAREN:
		{
			AST __t101 = _t;
			AST tmp1813_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			AST tmp1814_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			_t = __t101;
			_t = _t.getNextSibling();
			break;
		}
		case RECORD_NAME:
		{
			record_name(_t);
			_t = _retTree;
			break;
		}
		default:
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_29.member(_t.getType()))) {
				functioncall(_t);
				_t = _retTree;
			}
		else {
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void systemhandlename(AST _t) throws RecognitionException {
		
		AST systemhandlename_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case AAMEMORY:
		{
			AST tmp1815_AST_in = (AST)_t;
			match(_t,AAMEMORY);
			_t = _t.getNextSibling();
			break;
		}
		case ACTIVEWINDOW:
		{
			AST tmp1816_AST_in = (AST)_t;
			match(_t,ACTIVEWINDOW);
			_t = _t.getNextSibling();
			break;
		}
		case CLIPBOARD:
		{
			AST tmp1817_AST_in = (AST)_t;
			match(_t,CLIPBOARD);
			_t = _t.getNextSibling();
			break;
		}
		case CODEBASELOCATOR:
		{
			AST tmp1818_AST_in = (AST)_t;
			match(_t,CODEBASELOCATOR);
			_t = _t.getNextSibling();
			break;
		}
		case COLORTABLE:
		{
			AST tmp1819_AST_in = (AST)_t;
			match(_t,COLORTABLE);
			_t = _t.getNextSibling();
			break;
		}
		case COMPILER:
		{
			AST tmp1820_AST_in = (AST)_t;
			match(_t,COMPILER);
			_t = _t.getNextSibling();
			break;
		}
		case COMSELF:
		{
			AST tmp1821_AST_in = (AST)_t;
			match(_t,COMSELF);
			_t = _t.getNextSibling();
			break;
		}
		case CURRENTWINDOW:
		{
			AST tmp1822_AST_in = (AST)_t;
			match(_t,CURRENTWINDOW);
			_t = _t.getNextSibling();
			break;
		}
		case DEBUGGER:
		{
			AST tmp1823_AST_in = (AST)_t;
			match(_t,DEBUGGER);
			_t = _t.getNextSibling();
			break;
		}
		case DEFAULTWINDOW:
		{
			AST tmp1824_AST_in = (AST)_t;
			match(_t,DEFAULTWINDOW);
			_t = _t.getNextSibling();
			break;
		}
		case ERRORSTATUS:
		{
			AST tmp1825_AST_in = (AST)_t;
			match(_t,ERRORSTATUS);
			_t = _t.getNextSibling();
			break;
		}
		case FILEINFORMATION:
		{
			AST tmp1826_AST_in = (AST)_t;
			match(_t,FILEINFORMATION);
			_t = _t.getNextSibling();
			break;
		}
		case FOCUS:
		{
			AST tmp1827_AST_in = (AST)_t;
			match(_t,FOCUS);
			_t = _t.getNextSibling();
			break;
		}
		case FONTTABLE:
		{
			AST tmp1828_AST_in = (AST)_t;
			match(_t,FONTTABLE);
			_t = _t.getNextSibling();
			break;
		}
		case LASTEVENT:
		{
			AST tmp1829_AST_in = (AST)_t;
			match(_t,LASTEVENT);
			_t = _t.getNextSibling();
			break;
		}
		case LOGMANAGER:
		{
			AST tmp1830_AST_in = (AST)_t;
			match(_t,LOGMANAGER);
			_t = _t.getNextSibling();
			break;
		}
		case MOUSE:
		{
			AST tmp1831_AST_in = (AST)_t;
			match(_t,MOUSE);
			_t = _t.getNextSibling();
			break;
		}
		case PROFILER:
		{
			AST tmp1832_AST_in = (AST)_t;
			match(_t,PROFILER);
			_t = _t.getNextSibling();
			break;
		}
		case RCODEINFORMATION:
		{
			AST tmp1833_AST_in = (AST)_t;
			match(_t,RCODEINFORMATION);
			_t = _t.getNextSibling();
			break;
		}
		case SECURITYPOLICY:
		{
			AST tmp1834_AST_in = (AST)_t;
			match(_t,SECURITYPOLICY);
			_t = _t.getNextSibling();
			break;
		}
		case SELF:
		{
			AST tmp1835_AST_in = (AST)_t;
			match(_t,SELF);
			_t = _t.getNextSibling();
			break;
		}
		case SESSION:
		{
			AST tmp1836_AST_in = (AST)_t;
			match(_t,SESSION);
			_t = _t.getNextSibling();
			break;
		}
		case SOURCEPROCEDURE:
		{
			AST tmp1837_AST_in = (AST)_t;
			match(_t,SOURCEPROCEDURE);
			_t = _t.getNextSibling();
			break;
		}
		case TARGETPROCEDURE:
		{
			AST tmp1838_AST_in = (AST)_t;
			match(_t,TARGETPROCEDURE);
			_t = _t.getNextSibling();
			break;
		}
		case TEXTCURSOR:
		{
			AST tmp1839_AST_in = (AST)_t;
			match(_t,TEXTCURSOR);
			_t = _t.getNextSibling();
			break;
		}
		case THISPROCEDURE:
		{
			AST tmp1840_AST_in = (AST)_t;
			match(_t,THISPROCEDURE);
			_t = _t.getNextSibling();
			break;
		}
		case WEBCONTEXT:
		{
			AST tmp1841_AST_in = (AST)_t;
			match(_t,WEBCONTEXT);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void s_widget(AST _t) throws RecognitionException {
		
		AST s_widget_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case AAMEMORY:
		case ACTIVEWINDOW:
		case BROWSE:
		case BUFFER:
		case CLIPBOARD:
		case CODEBASELOCATOR:
		case COLORTABLE:
		case COMPILER:
		case COMSELF:
		case CURRENTWINDOW:
		case DEBUGGER:
		case DEFAULTWINDOW:
		case ERRORSTATUS:
		case FILEINFORMATION:
		case FOCUS:
		case FONTTABLE:
		case FRAME:
		case LASTEVENT:
		case MENU:
		case MENUITEM:
		case MOUSE:
		case PROFILER:
		case QUERY:
		case RCODEINFORMATION:
		case SELF:
		case SESSION:
		case SOCKET:
		case SOURCEPROCEDURE:
		case SUBMENU:
		case TARGETPROCEDURE:
		case TEMPTABLE:
		case TEXTCURSOR:
		case THISPROCEDURE:
		case WEBCONTEXT:
		case XDOCUMENT:
		case XNODEREF:
		case DATASOURCE:
		case DATASET:
		case LOGMANAGER:
		case SECURITYPOLICY:
		{
			widname(_t);
			_t = _retTree;
			break;
		}
		case FIELD:
		case Field_ref:
		{
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case FIELD:
			{
				AST tmp1842_AST_in = (AST)_t;
				match(_t,FIELD);
				_t = _t.getNextSibling();
				break;
			}
			case Field_ref:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			field(_t);
			_t = _retTree;
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void array_subscript(AST _t) throws RecognitionException {
		
		AST array_subscript_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t133 = _t;
		AST tmp1843_AST_in = (AST)_t;
		match(_t,Array_subscript);
		_t = _t.getFirstChild();
		AST tmp1844_AST_in = (AST)_t;
		match(_t,LEFTBRACE);
		_t = _t.getNextSibling();
		expression(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case FOR:
		{
			AST tmp1845_AST_in = (AST)_t;
			match(_t,FOR);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			break;
		}
		case RIGHTBRACE:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp1846_AST_in = (AST)_t;
		match(_t,RIGHTBRACE);
		_t = _t.getNextSibling();
		_t = __t133;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void method_param_list(AST _t) throws RecognitionException {
		
		AST method_param_list_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t136 = _t;
		AST tmp1847_AST_in = (AST)_t;
		match(_t,Method_param_list);
		_t = _t.getFirstChild();
		AST tmp1848_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case Method_parameter:
		{
			method_parameter(_t);
			_t = _retTree;
			break;
		}
		case COMMA:
		case RIGHTPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop140:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==COMMA)) {
				AST tmp1849_AST_in = (AST)_t;
				match(_t,COMMA);
				_t = _t.getNextSibling();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case Method_parameter:
				{
					method_parameter(_t);
					_t = _retTree;
					break;
				}
				case COMMA:
				case RIGHTPAREN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
			}
			else {
				break _loop140;
			}
			
		} while (true);
		}
		AST tmp1850_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_t = __t136;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void gwidget(AST _t) throws RecognitionException {
		
		AST gwidget_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t114 = _t;
		AST tmp1851_AST_in = (AST)_t;
		match(_t,Widget_ref);
		_t = _t.getFirstChild();
		s_widget(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t116 = _t;
			AST tmp1852_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case MENU:
			{
				AST tmp1853_AST_in = (AST)_t;
				match(_t,MENU);
				_t = _t.getNextSibling();
				break;
			}
			case FRAME:
			{
				AST tmp1854_AST_in = (AST)_t;
				match(_t,FRAME);
				_t = _t.getNextSibling();
				break;
			}
			case BROWSE:
			{
				AST tmp1855_AST_in = (AST)_t;
				match(_t,BROWSE);
				_t = _t.getNextSibling();
				break;
			}
			case SUBMENU:
			{
				AST tmp1856_AST_in = (AST)_t;
				match(_t,SUBMENU);
				_t = _t.getNextSibling();
				break;
			}
			case BUFFER:
			{
				AST tmp1857_AST_in = (AST)_t;
				match(_t,BUFFER);
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp1858_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			_t = __t116;
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t114;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void widgetlist(AST _t) throws RecognitionException {
		
		AST widgetlist_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		gwidget(_t);
		_t = _retTree;
		{
		_loop120:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==COMMA)) {
				AST tmp1859_AST_in = (AST)_t;
				match(_t,COMMA);
				_t = _t.getNextSibling();
				gwidget(_t);
				_t = _retTree;
			}
			else {
				break _loop120;
			}
			
		} while (true);
		}
		_retTree = _t;
	}
	
	public final void widname(AST _t) throws RecognitionException {
		
		AST widname_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case AAMEMORY:
		case ACTIVEWINDOW:
		case CLIPBOARD:
		case CODEBASELOCATOR:
		case COLORTABLE:
		case COMPILER:
		case COMSELF:
		case CURRENTWINDOW:
		case DEBUGGER:
		case DEFAULTWINDOW:
		case ERRORSTATUS:
		case FILEINFORMATION:
		case FOCUS:
		case FONTTABLE:
		case LASTEVENT:
		case MOUSE:
		case PROFILER:
		case RCODEINFORMATION:
		case SELF:
		case SESSION:
		case SOURCEPROCEDURE:
		case TARGETPROCEDURE:
		case TEXTCURSOR:
		case THISPROCEDURE:
		case WEBCONTEXT:
		case LOGMANAGER:
		case SECURITYPOLICY:
		{
			systemhandlename(_t);
			_t = _retTree;
			break;
		}
		case DATASET:
		{
			AST tmp1860_AST_in = (AST)_t;
			match(_t,DATASET);
			_t = _t.getNextSibling();
			AST tmp1861_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			break;
		}
		case DATASOURCE:
		{
			AST tmp1862_AST_in = (AST)_t;
			match(_t,DATASOURCE);
			_t = _t.getNextSibling();
			AST tmp1863_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			break;
		}
		case FRAME:
		{
			AST tmp1864_AST_in = (AST)_t;
			match(_t,FRAME);
			_t = _t.getNextSibling();
			AST tmp1865_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			break;
		}
		case MENU:
		{
			AST tmp1866_AST_in = (AST)_t;
			match(_t,MENU);
			_t = _t.getNextSibling();
			AST tmp1867_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			break;
		}
		case SUBMENU:
		{
			AST tmp1868_AST_in = (AST)_t;
			match(_t,SUBMENU);
			_t = _t.getNextSibling();
			AST tmp1869_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			break;
		}
		case MENUITEM:
		{
			AST tmp1870_AST_in = (AST)_t;
			match(_t,MENUITEM);
			_t = _t.getNextSibling();
			AST tmp1871_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			break;
		}
		case BROWSE:
		{
			AST tmp1872_AST_in = (AST)_t;
			match(_t,BROWSE);
			_t = _t.getNextSibling();
			AST tmp1873_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			break;
		}
		case QUERY:
		{
			AST tmp1874_AST_in = (AST)_t;
			match(_t,QUERY);
			_t = _t.getNextSibling();
			AST tmp1875_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			break;
		}
		case TEMPTABLE:
		{
			AST tmp1876_AST_in = (AST)_t;
			match(_t,TEMPTABLE);
			_t = _t.getNextSibling();
			AST tmp1877_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			break;
		}
		case BUFFER:
		{
			AST tmp1878_AST_in = (AST)_t;
			match(_t,BUFFER);
			_t = _t.getNextSibling();
			AST tmp1879_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			break;
		}
		case XDOCUMENT:
		{
			AST tmp1880_AST_in = (AST)_t;
			match(_t,XDOCUMENT);
			_t = _t.getNextSibling();
			AST tmp1881_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			break;
		}
		case XNODEREF:
		{
			AST tmp1882_AST_in = (AST)_t;
			match(_t,XNODEREF);
			_t = _t.getNextSibling();
			AST tmp1883_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			break;
		}
		case SOCKET:
		{
			AST tmp1884_AST_in = (AST)_t;
			match(_t,SOCKET);
			_t = _t.getNextSibling();
			AST tmp1885_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void method_parameter(AST _t) throws RecognitionException {
		
		AST method_parameter_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t142 = _t;
		AST tmp1886_AST_in = (AST)_t;
		match(_t,Method_parameter);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case OUTPUT:
		{
			AST tmp1887_AST_in = (AST)_t;
			match(_t,OUTPUT);
			_t = _t.getNextSibling();
			if ( inputState.guessing==0 ) {
				tpSupport.updating(true);
			}
			break;
		}
		case INPUTOUTPUT:
		{
			AST tmp1888_AST_in = (AST)_t;
			match(_t,INPUTOUTPUT);
			_t = _t.getNextSibling();
			if ( inputState.guessing==0 ) {
				tpSupport.updating(true);
			}
			break;
		}
		default:
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_4.member(_t.getType()))) {
			}
		else {
			throw new NoViableAltException(_t);
		}
		}
		}
		expression(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case AS:
		{
			AST tmp1889_AST_in = (AST)_t;
			match(_t,AS);
			_t = _t.getNextSibling();
			datatype_com(_t);
			_t = _retTree;
			break;
		}
		case 3:
		case BYPOINTER:
		case BYVARIANTPOINTER:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		if ( inputState.guessing==0 ) {
			tpSupport.updating(false);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case BYPOINTER:
		{
			AST tmp1890_AST_in = (AST)_t;
			match(_t,BYPOINTER);
			_t = _t.getNextSibling();
			break;
		}
		case BYVARIANTPOINTER:
		{
			AST tmp1891_AST_in = (AST)_t;
			match(_t,BYVARIANTPOINTER);
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t142;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void datatype_com(AST _t) throws RecognitionException {
		
		AST datatype_com_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case SHORT:
		{
			AST tmp1892_AST_in = (AST)_t;
			match(_t,SHORT);
			_t = _t.getNextSibling();
			break;
		}
		case FLOAT:
		{
			AST tmp1893_AST_in = (AST)_t;
			match(_t,FLOAT);
			_t = _t.getNextSibling();
			break;
		}
		case CURRENCY:
		{
			AST tmp1894_AST_in = (AST)_t;
			match(_t,CURRENCY);
			_t = _t.getNextSibling();
			break;
		}
		case UNSIGNEDBYTE:
		{
			AST tmp1895_AST_in = (AST)_t;
			match(_t,UNSIGNEDBYTE);
			_t = _t.getNextSibling();
			break;
		}
		case ERRORCODE:
		{
			AST tmp1896_AST_in = (AST)_t;
			match(_t,ERRORCODE);
			_t = _t.getNextSibling();
			break;
		}
		case IUNKNOWN:
		{
			AST tmp1897_AST_in = (AST)_t;
			match(_t,IUNKNOWN);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void widgettype(AST _t) throws RecognitionException {
		
		AST widgettype_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case BROWSE:
		{
			AST tmp1898_AST_in = (AST)_t;
			match(_t,BROWSE);
			_t = _t.getNextSibling();
			break;
		}
		case BUFFER:
		{
			AST tmp1899_AST_in = (AST)_t;
			match(_t,BUFFER);
			_t = _t.getNextSibling();
			break;
		}
		case BUTTON:
		{
			AST tmp1900_AST_in = (AST)_t;
			match(_t,BUTTON);
			_t = _t.getNextSibling();
			break;
		}
		case COMBOBOX:
		{
			AST tmp1901_AST_in = (AST)_t;
			match(_t,COMBOBOX);
			_t = _t.getNextSibling();
			break;
		}
		case CONTROLFRAME:
		{
			AST tmp1902_AST_in = (AST)_t;
			match(_t,CONTROLFRAME);
			_t = _t.getNextSibling();
			break;
		}
		case DIALOGBOX:
		{
			AST tmp1903_AST_in = (AST)_t;
			match(_t,DIALOGBOX);
			_t = _t.getNextSibling();
			break;
		}
		case EDITOR:
		{
			AST tmp1904_AST_in = (AST)_t;
			match(_t,EDITOR);
			_t = _t.getNextSibling();
			break;
		}
		case FIELD:
		{
			AST tmp1905_AST_in = (AST)_t;
			match(_t,FIELD);
			_t = _t.getNextSibling();
			break;
		}
		case FILLIN:
		{
			AST tmp1906_AST_in = (AST)_t;
			match(_t,FILLIN);
			_t = _t.getNextSibling();
			break;
		}
		case FRAME:
		{
			AST tmp1907_AST_in = (AST)_t;
			match(_t,FRAME);
			_t = _t.getNextSibling();
			break;
		}
		case IMAGE:
		{
			AST tmp1908_AST_in = (AST)_t;
			match(_t,IMAGE);
			_t = _t.getNextSibling();
			break;
		}
		case MENU:
		{
			AST tmp1909_AST_in = (AST)_t;
			match(_t,MENU);
			_t = _t.getNextSibling();
			break;
		}
		case MENUITEM:
		{
			AST tmp1910_AST_in = (AST)_t;
			match(_t,MENUITEM);
			_t = _t.getNextSibling();
			break;
		}
		case QUERY:
		{
			AST tmp1911_AST_in = (AST)_t;
			match(_t,QUERY);
			_t = _t.getNextSibling();
			break;
		}
		case RADIOSET:
		{
			AST tmp1912_AST_in = (AST)_t;
			match(_t,RADIOSET);
			_t = _t.getNextSibling();
			break;
		}
		case RECTANGLE:
		{
			AST tmp1913_AST_in = (AST)_t;
			match(_t,RECTANGLE);
			_t = _t.getNextSibling();
			break;
		}
		case SELECTIONLIST:
		{
			AST tmp1914_AST_in = (AST)_t;
			match(_t,SELECTIONLIST);
			_t = _t.getNextSibling();
			break;
		}
		case SLIDER:
		{
			AST tmp1915_AST_in = (AST)_t;
			match(_t,SLIDER);
			_t = _t.getNextSibling();
			break;
		}
		case SOCKET:
		{
			AST tmp1916_AST_in = (AST)_t;
			match(_t,SOCKET);
			_t = _t.getNextSibling();
			break;
		}
		case SUBMENU:
		{
			AST tmp1917_AST_in = (AST)_t;
			match(_t,SUBMENU);
			_t = _t.getNextSibling();
			break;
		}
		case TEMPTABLE:
		{
			AST tmp1918_AST_in = (AST)_t;
			match(_t,TEMPTABLE);
			_t = _t.getNextSibling();
			break;
		}
		case TEXT:
		{
			AST tmp1919_AST_in = (AST)_t;
			match(_t,TEXT);
			_t = _t.getNextSibling();
			break;
		}
		case TOGGLEBOX:
		{
			AST tmp1920_AST_in = (AST)_t;
			match(_t,TOGGLEBOX);
			_t = _t.getNextSibling();
			break;
		}
		case WINDOW:
		{
			AST tmp1921_AST_in = (AST)_t;
			match(_t,WINDOW);
			_t = _t.getNextSibling();
			break;
		}
		case XDOCUMENT:
		{
			AST tmp1922_AST_in = (AST)_t;
			match(_t,XDOCUMENT);
			_t = _t.getNextSibling();
			break;
		}
		case XNODEREF:
		{
			AST tmp1923_AST_in = (AST)_t;
			match(_t,XNODEREF);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void stream_name(AST _t) throws RecognitionException {
		
		AST stream_name_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2158 = _t;
		AST tmp1924_AST_in = (AST)_t;
		match(_t,STREAM);
		_t = _t.getFirstChild();
		AST tmp1925_AST_in = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		_t = __t2158;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void io_phrase(AST _t) throws RecognitionException {
		
		AST io_phrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case OSDIR:
		{
			AST __t1484 = _t;
			AST tmp1926_AST_in = (AST)_t;
			match(_t,OSDIR);
			_t = _t.getFirstChild();
			AST tmp1927_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			AST tmp1928_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case NOATTRLIST:
			{
				AST tmp1929_AST_in = (AST)_t;
				match(_t,NOATTRLIST);
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t1484;
			_t = _t.getNextSibling();
			break;
		}
		case PRINTER:
		{
			AST __t1486 = _t;
			AST tmp1930_AST_in = (AST)_t;
			match(_t,PRINTER);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			if (((_t.getType() >= LEXDATE && _t.getType() <= PARAM))) {
				AST tmp1931_AST_in = (AST)_t;
				if ( _t==null ) throw new MismatchedTokenException();
				_t = _t.getNextSibling();
			}
			else if ((_t.getType()==3)) {
			}
			else {
				throw new NoViableAltException(_t);
			}
			
			}
			_t = __t1486;
			_t = _t.getNextSibling();
			break;
		}
		case TERMINAL:
		{
			AST tmp1932_AST_in = (AST)_t;
			match(_t,TERMINAL);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case APPEND:
		case BINARY:
		case COLLATE:
		case CONVERT:
		case ECHO:
		case FILENAME:
		case KEEPMESSAGES:
		case LANDSCAPE:
		case MAP:
		case NOCONVERT:
		case NOECHO:
		case NOMAP:
		case NUMCOPIES:
		case PAGESIZE_KW:
		case PAGED:
		case PORTRAIT:
		case UNBUFFERED:
		case VALUE:
		case LOBDIR:
		{
			{
			_loop1489:
			do {
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case VALUE:
				{
					valueexpression(_t);
					_t = _retTree;
					break;
				}
				case FILENAME:
				{
					AST tmp1933_AST_in = (AST)_t;
					match(_t,FILENAME);
					_t = _t.getNextSibling();
					break;
				}
				default:
				{
					break _loop1489;
				}
				}
			} while (true);
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop1499:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case APPEND:
			{
				AST tmp1934_AST_in = (AST)_t;
				match(_t,APPEND);
				_t = _t.getNextSibling();
				break;
			}
			case BINARY:
			{
				AST tmp1935_AST_in = (AST)_t;
				match(_t,BINARY);
				_t = _t.getNextSibling();
				break;
			}
			case COLLATE:
			{
				AST tmp1936_AST_in = (AST)_t;
				match(_t,COLLATE);
				_t = _t.getNextSibling();
				break;
			}
			case CONVERT:
			{
				AST __t1491 = _t;
				AST tmp1937_AST_in = (AST)_t;
				match(_t,CONVERT);
				_t = _t.getFirstChild();
				{
				_loop1494:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_t.getType()==SOURCE||_t.getType()==TARGET)) {
						{
						if (_t==null) _t=ASTNULL;
						switch ( _t.getType()) {
						case SOURCE:
						{
							AST tmp1938_AST_in = (AST)_t;
							match(_t,SOURCE);
							_t = _t.getNextSibling();
							break;
						}
						case TARGET:
						{
							AST tmp1939_AST_in = (AST)_t;
							match(_t,TARGET);
							_t = _t.getNextSibling();
							break;
						}
						default:
						{
							throw new NoViableAltException(_t);
						}
						}
						}
						expression(_t);
						_t = _retTree;
					}
					else {
						break _loop1494;
					}
					
				} while (true);
				}
				_t = __t1491;
				_t = _t.getNextSibling();
				break;
			}
			case NOCONVERT:
			{
				AST tmp1940_AST_in = (AST)_t;
				match(_t,NOCONVERT);
				_t = _t.getNextSibling();
				break;
			}
			case ECHO:
			{
				AST tmp1941_AST_in = (AST)_t;
				match(_t,ECHO);
				_t = _t.getNextSibling();
				break;
			}
			case NOECHO:
			{
				AST tmp1942_AST_in = (AST)_t;
				match(_t,NOECHO);
				_t = _t.getNextSibling();
				break;
			}
			case KEEPMESSAGES:
			{
				AST tmp1943_AST_in = (AST)_t;
				match(_t,KEEPMESSAGES);
				_t = _t.getNextSibling();
				break;
			}
			case LANDSCAPE:
			{
				AST tmp1944_AST_in = (AST)_t;
				match(_t,LANDSCAPE);
				_t = _t.getNextSibling();
				break;
			}
			case LOBDIR:
			{
				AST __t1495 = _t;
				AST tmp1945_AST_in = (AST)_t;
				match(_t,LOBDIR);
				_t = _t.getFirstChild();
				filenameorvalue(_t);
				_t = _retTree;
				_t = __t1495;
				_t = _t.getNextSibling();
				break;
			}
			case MAP:
			{
				AST __t1496 = _t;
				AST tmp1946_AST_in = (AST)_t;
				match(_t,MAP);
				_t = _t.getFirstChild();
				anyorvalue(_t);
				_t = _retTree;
				_t = __t1496;
				_t = _t.getNextSibling();
				break;
			}
			case NOMAP:
			{
				AST tmp1947_AST_in = (AST)_t;
				match(_t,NOMAP);
				_t = _t.getNextSibling();
				break;
			}
			case NUMCOPIES:
			{
				AST __t1497 = _t;
				AST tmp1948_AST_in = (AST)_t;
				match(_t,NUMCOPIES);
				_t = _t.getFirstChild();
				anyorvalue(_t);
				_t = _retTree;
				_t = __t1497;
				_t = _t.getNextSibling();
				break;
			}
			case PAGED:
			{
				AST tmp1949_AST_in = (AST)_t;
				match(_t,PAGED);
				_t = _t.getNextSibling();
				break;
			}
			case PAGESIZE_KW:
			{
				AST __t1498 = _t;
				AST tmp1950_AST_in = (AST)_t;
				match(_t,PAGESIZE_KW);
				_t = _t.getFirstChild();
				anyorvalue(_t);
				_t = _retTree;
				_t = __t1498;
				_t = _t.getNextSibling();
				break;
			}
			case PORTRAIT:
			{
				AST tmp1951_AST_in = (AST)_t;
				match(_t,PORTRAIT);
				_t = _t.getNextSibling();
				break;
			}
			case UNBUFFERED:
			{
				AST tmp1952_AST_in = (AST)_t;
				match(_t,UNBUFFERED);
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				break _loop1499;
			}
			}
		} while (true);
		}
		_retTree = _t;
	}
	
	public final void accum_what(AST _t) throws RecognitionException {
		
		AST accum_what_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case AVERAGE:
		{
			AST tmp1953_AST_in = (AST)_t;
			match(_t,AVERAGE);
			_t = _t.getNextSibling();
			break;
		}
		case COUNT:
		{
			AST tmp1954_AST_in = (AST)_t;
			match(_t,COUNT);
			_t = _t.getNextSibling();
			break;
		}
		case MAXIMUM:
		{
			AST tmp1955_AST_in = (AST)_t;
			match(_t,MAXIMUM);
			_t = _t.getNextSibling();
			break;
		}
		case MINIMUM:
		{
			AST tmp1956_AST_in = (AST)_t;
			match(_t,MINIMUM);
			_t = _t.getNextSibling();
			break;
		}
		case TOTAL:
		{
			AST tmp1957_AST_in = (AST)_t;
			match(_t,TOTAL);
			_t = _t.getNextSibling();
			break;
		}
		case SUBAVERAGE:
		{
			AST tmp1958_AST_in = (AST)_t;
			match(_t,SUBAVERAGE);
			_t = _t.getNextSibling();
			break;
		}
		case SUBCOUNT:
		{
			AST tmp1959_AST_in = (AST)_t;
			match(_t,SUBCOUNT);
			_t = _t.getNextSibling();
			break;
		}
		case SUBMAXIMUM:
		{
			AST tmp1960_AST_in = (AST)_t;
			match(_t,SUBMAXIMUM);
			_t = _t.getNextSibling();
			break;
		}
		case SUBMINIMUM:
		{
			AST tmp1961_AST_in = (AST)_t;
			match(_t,SUBMINIMUM);
			_t = _t.getNextSibling();
			break;
		}
		case SUBTOTAL:
		{
			AST tmp1962_AST_in = (AST)_t;
			match(_t,SUBTOTAL);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void display_item(AST _t) throws RecognitionException {
		
		AST display_item_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1089 = _t;
		AST tmp1963_AST_in = (AST)_t;
		match(_t,Form_item);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case SKIP:
		{
			skipphrase(_t);
			_t = _retTree;
			break;
		}
		case SPACE:
		{
			spacephrase(_t);
			_t = _retTree;
			break;
		}
		default:
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_30.member(_t.getType()))) {
				{
				if (_t==null) _t=ASTNULL;
				if ((_tokenSet_4.member(_t.getType()))) {
					expression(_t);
					_t = _retTree;
				}
				else if ((_t.getType()==ID)) {
					AST tmp1964_AST_in = (AST)_t;
					match(_t,ID);
					_t = _t.getNextSibling();
				}
				else {
					throw new NoViableAltException(_t);
				}
				
				}
				{
				_loop1093:
				do {
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case Aggregate_phrase:
					{
						aggregatephrase(_t);
						_t = _retTree;
						break;
					}
					case Format_phrase:
					{
						formatphrase(_t);
						_t = _retTree;
						break;
					}
					default:
					{
						break _loop1093;
					}
					}
				} while (true);
				}
			}
		else {
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t1089;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void aggregatephrase(AST _t) throws RecognitionException {
		
		AST aggregatephrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t179 = _t;
		AST tmp1965_AST_in = (AST)_t;
		match(_t,Aggregate_phrase);
		_t = _t.getFirstChild();
		AST tmp1966_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		{
		int _cnt181=0;
		_loop181:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_31.member(_t.getType()))) {
				aggregate_opt(_t);
				_t = _retTree;
			}
			else {
				if ( _cnt181>=1 ) { break _loop181; } else {throw new NoViableAltException(_t);}
			}
			
			_cnt181++;
		} while (true);
		}
		{
		_loop185:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==BY)) {
				AST __t183 = _t;
				AST tmp1967_AST_in = (AST)_t;
				match(_t,BY);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case DESCENDING:
				{
					AST tmp1968_AST_in = (AST)_t;
					match(_t,DESCENDING);
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t183;
				_t = _t.getNextSibling();
			}
			else {
				break _loop185;
			}
			
		} while (true);
		}
		AST tmp1969_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_t = __t179;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void aggregate_opt(AST _t) throws RecognitionException {
		
		AST aggregate_opt_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case AVERAGE:
		{
			AST __t187 = _t;
			AST tmp1970_AST_in = (AST)_t;
			match(_t,AVERAGE);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case COLUMNLABEL:
			case LABEL:
			{
				label_constant(_t);
				_t = _retTree;
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t187;
			_t = _t.getNextSibling();
			break;
		}
		case COUNT:
		{
			AST __t189 = _t;
			AST tmp1971_AST_in = (AST)_t;
			match(_t,COUNT);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case COLUMNLABEL:
			case LABEL:
			{
				label_constant(_t);
				_t = _retTree;
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t189;
			_t = _t.getNextSibling();
			break;
		}
		case MAXIMUM:
		{
			AST __t191 = _t;
			AST tmp1972_AST_in = (AST)_t;
			match(_t,MAXIMUM);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case COLUMNLABEL:
			case LABEL:
			{
				label_constant(_t);
				_t = _retTree;
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t191;
			_t = _t.getNextSibling();
			break;
		}
		case MINIMUM:
		{
			AST __t193 = _t;
			AST tmp1973_AST_in = (AST)_t;
			match(_t,MINIMUM);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case COLUMNLABEL:
			case LABEL:
			{
				label_constant(_t);
				_t = _retTree;
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t193;
			_t = _t.getNextSibling();
			break;
		}
		case TOTAL:
		{
			AST __t195 = _t;
			AST tmp1974_AST_in = (AST)_t;
			match(_t,TOTAL);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case COLUMNLABEL:
			case LABEL:
			{
				label_constant(_t);
				_t = _retTree;
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t195;
			_t = _t.getNextSibling();
			break;
		}
		case SUBAVERAGE:
		{
			AST __t197 = _t;
			AST tmp1975_AST_in = (AST)_t;
			match(_t,SUBAVERAGE);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case COLUMNLABEL:
			case LABEL:
			{
				label_constant(_t);
				_t = _retTree;
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t197;
			_t = _t.getNextSibling();
			break;
		}
		case SUBCOUNT:
		{
			AST __t199 = _t;
			AST tmp1976_AST_in = (AST)_t;
			match(_t,SUBCOUNT);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case COLUMNLABEL:
			case LABEL:
			{
				label_constant(_t);
				_t = _retTree;
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t199;
			_t = _t.getNextSibling();
			break;
		}
		case SUBMAXIMUM:
		{
			AST __t201 = _t;
			AST tmp1977_AST_in = (AST)_t;
			match(_t,SUBMAXIMUM);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case COLUMNLABEL:
			case LABEL:
			{
				label_constant(_t);
				_t = _retTree;
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t201;
			_t = _t.getNextSibling();
			break;
		}
		case SUBMINIMUM:
		{
			AST __t203 = _t;
			AST tmp1978_AST_in = (AST)_t;
			match(_t,SUBMINIMUM);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case COLUMNLABEL:
			case LABEL:
			{
				label_constant(_t);
				_t = _retTree;
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t203;
			_t = _t.getNextSibling();
			break;
		}
		case SUBTOTAL:
		{
			AST __t205 = _t;
			AST tmp1979_AST_in = (AST)_t;
			match(_t,SUBTOTAL);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case COLUMNLABEL:
			case LABEL:
			{
				label_constant(_t);
				_t = _retTree;
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t205;
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void label_constant(AST _t) throws RecognitionException {
		
		AST label_constant_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case COLUMNLABEL:
		{
			AST __t1522 = _t;
			AST tmp1980_AST_in = (AST)_t;
			match(_t,COLUMNLABEL);
			_t = _t.getFirstChild();
			constant(_t);
			_t = _retTree;
			{
			_loop1524:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==COMMA)) {
					AST tmp1981_AST_in = (AST)_t;
					match(_t,COMMA);
					_t = _t.getNextSibling();
					constant(_t);
					_t = _retTree;
				}
				else {
					break _loop1524;
				}
				
			} while (true);
			}
			_t = __t1522;
			_t = _t.getNextSibling();
			break;
		}
		case LABEL:
		{
			AST __t1525 = _t;
			AST tmp1982_AST_in = (AST)_t;
			match(_t,LABEL);
			_t = _t.getFirstChild();
			constant(_t);
			_t = _retTree;
			{
			_loop1527:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==COMMA)) {
					AST tmp1983_AST_in = (AST)_t;
					match(_t,COMMA);
					_t = _t.getNextSibling();
					constant(_t);
					_t = _retTree;
				}
				else {
					break _loop1527;
				}
				
			} while (true);
			}
			_t = __t1525;
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void assign_opt(AST _t) throws RecognitionException {
		
		AST assign_opt_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t225 = _t;
		AST tmp1984_AST_in = (AST)_t;
		match(_t,ASSIGN);
		_t = _t.getFirstChild();
		{
		int _cnt229=0;
		_loop229:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==EQUAL)) {
				AST __t227 = _t;
				AST tmp1985_AST_in = (AST)_t;
				match(_t,EQUAL);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==ID)) {
					AST tmp1986_AST_in = (AST)_t;
					match(_t,ID);
					_t = _t.getNextSibling();
				}
				else if ((_tokenSet_19.member(_t.getType()))) {
					keyword(_t);
					_t = _retTree;
				}
				else {
					throw new NoViableAltException(_t);
				}
				
				}
				expression(_t);
				_t = _retTree;
				_t = __t227;
				_t = _t.getNextSibling();
			}
			else {
				if ( _cnt229>=1 ) { break _loop229; } else {throw new NoViableAltException(_t);}
			}
			
			_cnt229++;
		} while (true);
		}
		_t = __t225;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void keyword(AST _t) throws RecognitionException {
		
		AST keyword_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case AACBIT:
		{
			AST tmp1987_AST_in = (AST)_t;
			match(_t,AACBIT);
			_t = _t.getNextSibling();
			break;
		}
		case AACONTROL:
		{
			AST tmp1988_AST_in = (AST)_t;
			match(_t,AACONTROL);
			_t = _t.getNextSibling();
			break;
		}
		case AALIST:
		{
			AST tmp1989_AST_in = (AST)_t;
			match(_t,AALIST);
			_t = _t.getNextSibling();
			break;
		}
		case AAMEMORY:
		{
			AST tmp1990_AST_in = (AST)_t;
			match(_t,AAMEMORY);
			_t = _t.getNextSibling();
			break;
		}
		case AAMSG:
		{
			AST tmp1991_AST_in = (AST)_t;
			match(_t,AAMSG);
			_t = _t.getNextSibling();
			break;
		}
		case AAPCONTROL:
		{
			AST tmp1992_AST_in = (AST)_t;
			match(_t,AAPCONTROL);
			_t = _t.getNextSibling();
			break;
		}
		case AASERIAL:
		{
			AST tmp1993_AST_in = (AST)_t;
			match(_t,AASERIAL);
			_t = _t.getNextSibling();
			break;
		}
		case AATRACE:
		{
			AST tmp1994_AST_in = (AST)_t;
			match(_t,AATRACE);
			_t = _t.getNextSibling();
			break;
		}
		case ABSOLUTE:
		{
			AST tmp1995_AST_in = (AST)_t;
			match(_t,ABSOLUTE);
			_t = _t.getNextSibling();
			break;
		}
		case ACCELERATOR:
		{
			AST tmp1996_AST_in = (AST)_t;
			match(_t,ACCELERATOR);
			_t = _t.getNextSibling();
			break;
		}
		case ACCUMULATE:
		{
			AST tmp1997_AST_in = (AST)_t;
			match(_t,ACCUMULATE);
			_t = _t.getNextSibling();
			break;
		}
		case ACTIVEWINDOW:
		{
			AST tmp1998_AST_in = (AST)_t;
			match(_t,ACTIVEWINDOW);
			_t = _t.getNextSibling();
			break;
		}
		case ADD:
		{
			AST tmp1999_AST_in = (AST)_t;
			match(_t,ADD);
			_t = _t.getNextSibling();
			break;
		}
		case ADDINTERVAL:
		{
			AST tmp2000_AST_in = (AST)_t;
			match(_t,ADDINTERVAL);
			_t = _t.getNextSibling();
			break;
		}
		case ADVISE:
		{
			AST tmp2001_AST_in = (AST)_t;
			match(_t,ADVISE);
			_t = _t.getNextSibling();
			break;
		}
		case ALERTBOX:
		{
			AST tmp2002_AST_in = (AST)_t;
			match(_t,ALERTBOX);
			_t = _t.getNextSibling();
			break;
		}
		case ALIAS:
		{
			AST tmp2003_AST_in = (AST)_t;
			match(_t,ALIAS);
			_t = _t.getNextSibling();
			break;
		}
		case ALL:
		{
			AST tmp2004_AST_in = (AST)_t;
			match(_t,ALL);
			_t = _t.getNextSibling();
			break;
		}
		case ALLOWREPLICATION:
		{
			AST tmp2005_AST_in = (AST)_t;
			match(_t,ALLOWREPLICATION);
			_t = _t.getNextSibling();
			break;
		}
		case ALTER:
		{
			AST tmp2006_AST_in = (AST)_t;
			match(_t,ALTER);
			_t = _t.getNextSibling();
			break;
		}
		case ALTERNATEKEY:
		{
			AST tmp2007_AST_in = (AST)_t;
			match(_t,ALTERNATEKEY);
			_t = _t.getNextSibling();
			break;
		}
		case AMBIGUOUS:
		{
			AST tmp2008_AST_in = (AST)_t;
			match(_t,AMBIGUOUS);
			_t = _t.getNextSibling();
			break;
		}
		case ANALYZE:
		{
			AST tmp2009_AST_in = (AST)_t;
			match(_t,ANALYZE);
			_t = _t.getNextSibling();
			break;
		}
		case AND:
		{
			AST tmp2010_AST_in = (AST)_t;
			match(_t,AND);
			_t = _t.getNextSibling();
			break;
		}
		case ANSIONLY:
		{
			AST tmp2011_AST_in = (AST)_t;
			match(_t,ANSIONLY);
			_t = _t.getNextSibling();
			break;
		}
		case ANY:
		{
			AST tmp2012_AST_in = (AST)_t;
			match(_t,ANY);
			_t = _t.getNextSibling();
			break;
		}
		case ANYWHERE:
		{
			AST tmp2013_AST_in = (AST)_t;
			match(_t,ANYWHERE);
			_t = _t.getNextSibling();
			break;
		}
		case APPEND:
		{
			AST tmp2014_AST_in = (AST)_t;
			match(_t,APPEND);
			_t = _t.getNextSibling();
			break;
		}
		case APPLICATION:
		{
			AST tmp2015_AST_in = (AST)_t;
			match(_t,APPLICATION);
			_t = _t.getNextSibling();
			break;
		}
		case APPLY:
		{
			AST tmp2016_AST_in = (AST)_t;
			match(_t,APPLY);
			_t = _t.getNextSibling();
			break;
		}
		case ARRAYMESSAGE:
		{
			AST tmp2017_AST_in = (AST)_t;
			match(_t,ARRAYMESSAGE);
			_t = _t.getNextSibling();
			break;
		}
		case AS:
		{
			AST tmp2018_AST_in = (AST)_t;
			match(_t,AS);
			_t = _t.getNextSibling();
			break;
		}
		case ASC:
		{
			AST tmp2019_AST_in = (AST)_t;
			match(_t,ASC);
			_t = _t.getNextSibling();
			break;
		}
		case ASCENDING:
		{
			AST tmp2020_AST_in = (AST)_t;
			match(_t,ASCENDING);
			_t = _t.getNextSibling();
			break;
		}
		case ASKOVERWRITE:
		{
			AST tmp2021_AST_in = (AST)_t;
			match(_t,ASKOVERWRITE);
			_t = _t.getNextSibling();
			break;
		}
		case ASSIGN:
		{
			AST tmp2022_AST_in = (AST)_t;
			match(_t,ASSIGN);
			_t = _t.getNextSibling();
			break;
		}
		case ASYNCHRONOUS:
		{
			AST tmp2023_AST_in = (AST)_t;
			match(_t,ASYNCHRONOUS);
			_t = _t.getNextSibling();
			break;
		}
		case AT:
		{
			AST tmp2024_AST_in = (AST)_t;
			match(_t,AT);
			_t = _t.getNextSibling();
			break;
		}
		case ATTACHMENT:
		{
			AST tmp2025_AST_in = (AST)_t;
			match(_t,ATTACHMENT);
			_t = _t.getNextSibling();
			break;
		}
		case ATTRSPACE:
		{
			AST tmp2026_AST_in = (AST)_t;
			match(_t,ATTRSPACE);
			_t = _t.getNextSibling();
			break;
		}
		case AUTHORIZATION:
		{
			AST tmp2027_AST_in = (AST)_t;
			match(_t,AUTHORIZATION);
			_t = _t.getNextSibling();
			break;
		}
		case AUTOCOMPLETION:
		{
			AST tmp2028_AST_in = (AST)_t;
			match(_t,AUTOCOMPLETION);
			_t = _t.getNextSibling();
			break;
		}
		case AUTOENDKEY:
		{
			AST tmp2029_AST_in = (AST)_t;
			match(_t,AUTOENDKEY);
			_t = _t.getNextSibling();
			break;
		}
		case AUTOGO:
		{
			AST tmp2030_AST_in = (AST)_t;
			match(_t,AUTOGO);
			_t = _t.getNextSibling();
			break;
		}
		case AUTOMATIC:
		{
			AST tmp2031_AST_in = (AST)_t;
			match(_t,AUTOMATIC);
			_t = _t.getNextSibling();
			break;
		}
		case AUTORETURN:
		{
			AST tmp2032_AST_in = (AST)_t;
			match(_t,AUTORETURN);
			_t = _t.getNextSibling();
			break;
		}
		case AVAILABLE:
		{
			AST tmp2033_AST_in = (AST)_t;
			match(_t,AVAILABLE);
			_t = _t.getNextSibling();
			break;
		}
		case AVERAGE:
		{
			AST tmp2034_AST_in = (AST)_t;
			match(_t,AVERAGE);
			_t = _t.getNextSibling();
			break;
		}
		case AVG:
		{
			AST tmp2035_AST_in = (AST)_t;
			match(_t,AVG);
			_t = _t.getNextSibling();
			break;
		}
		case BACKGROUND:
		{
			AST tmp2036_AST_in = (AST)_t;
			match(_t,BACKGROUND);
			_t = _t.getNextSibling();
			break;
		}
		case BACKWARDS:
		{
			AST tmp2037_AST_in = (AST)_t;
			match(_t,BACKWARDS);
			_t = _t.getNextSibling();
			break;
		}
		case BASE64:
		{
			AST tmp2038_AST_in = (AST)_t;
			match(_t,BASE64);
			_t = _t.getNextSibling();
			break;
		}
		case BASEKEY:
		{
			AST tmp2039_AST_in = (AST)_t;
			match(_t,BASEKEY);
			_t = _t.getNextSibling();
			break;
		}
		case BEFOREHIDE:
		{
			AST tmp2040_AST_in = (AST)_t;
			match(_t,BEFOREHIDE);
			_t = _t.getNextSibling();
			break;
		}
		case BEGINS:
		{
			AST tmp2041_AST_in = (AST)_t;
			match(_t,BEGINS);
			_t = _t.getNextSibling();
			break;
		}
		case BELL:
		{
			AST tmp2042_AST_in = (AST)_t;
			match(_t,BELL);
			_t = _t.getNextSibling();
			break;
		}
		case BETWEEN:
		{
			AST tmp2043_AST_in = (AST)_t;
			match(_t,BETWEEN);
			_t = _t.getNextSibling();
			break;
		}
		case BGCOLOR:
		{
			AST tmp2044_AST_in = (AST)_t;
			match(_t,BGCOLOR);
			_t = _t.getNextSibling();
			break;
		}
		case BIGENDIAN:
		{
			AST tmp2045_AST_in = (AST)_t;
			match(_t,BIGENDIAN);
			_t = _t.getNextSibling();
			break;
		}
		case BINARY:
		{
			AST tmp2046_AST_in = (AST)_t;
			match(_t,BINARY);
			_t = _t.getNextSibling();
			break;
		}
		case BINDWHERE:
		{
			AST tmp2047_AST_in = (AST)_t;
			match(_t,BINDWHERE);
			_t = _t.getNextSibling();
			break;
		}
		case BLANK:
		{
			AST tmp2048_AST_in = (AST)_t;
			match(_t,BLANK);
			_t = _t.getNextSibling();
			break;
		}
		case BLOB:
		{
			AST tmp2049_AST_in = (AST)_t;
			match(_t,BLOB);
			_t = _t.getNextSibling();
			break;
		}
		case BOTH:
		{
			AST tmp2050_AST_in = (AST)_t;
			match(_t,BOTH);
			_t = _t.getNextSibling();
			break;
		}
		case BOTTOM:
		{
			AST tmp2051_AST_in = (AST)_t;
			match(_t,BOTTOM);
			_t = _t.getNextSibling();
			break;
		}
		case BREAK:
		{
			AST tmp2052_AST_in = (AST)_t;
			match(_t,BREAK);
			_t = _t.getNextSibling();
			break;
		}
		case BROWSE:
		{
			AST tmp2053_AST_in = (AST)_t;
			match(_t,BROWSE);
			_t = _t.getNextSibling();
			break;
		}
		case BTOS:
		{
			AST tmp2054_AST_in = (AST)_t;
			match(_t,BTOS);
			_t = _t.getNextSibling();
			break;
		}
		case BUFFER:
		{
			AST tmp2055_AST_in = (AST)_t;
			match(_t,BUFFER);
			_t = _t.getNextSibling();
			break;
		}
		case BUFFERCHARS:
		{
			AST tmp2056_AST_in = (AST)_t;
			match(_t,BUFFERCHARS);
			_t = _t.getNextSibling();
			break;
		}
		case BUFFERCOMPARE:
		{
			AST tmp2057_AST_in = (AST)_t;
			match(_t,BUFFERCOMPARE);
			_t = _t.getNextSibling();
			break;
		}
		case BUFFERCOPY:
		{
			AST tmp2058_AST_in = (AST)_t;
			match(_t,BUFFERCOPY);
			_t = _t.getNextSibling();
			break;
		}
		case BUFFERLINES:
		{
			AST tmp2059_AST_in = (AST)_t;
			match(_t,BUFFERLINES);
			_t = _t.getNextSibling();
			break;
		}
		case BUFFERNAME:
		{
			AST tmp2060_AST_in = (AST)_t;
			match(_t,BUFFERNAME);
			_t = _t.getNextSibling();
			break;
		}
		case BUTTON:
		{
			AST tmp2061_AST_in = (AST)_t;
			match(_t,BUTTON);
			_t = _t.getNextSibling();
			break;
		}
		case BUTTONS:
		{
			AST tmp2062_AST_in = (AST)_t;
			match(_t,BUTTONS);
			_t = _t.getNextSibling();
			break;
		}
		case BY:
		{
			AST tmp2063_AST_in = (AST)_t;
			match(_t,BY);
			_t = _t.getNextSibling();
			break;
		}
		case BYPOINTER:
		{
			AST tmp2064_AST_in = (AST)_t;
			match(_t,BYPOINTER);
			_t = _t.getNextSibling();
			break;
		}
		case BYREFERENCE:
		{
			AST tmp2065_AST_in = (AST)_t;
			match(_t,BYREFERENCE);
			_t = _t.getNextSibling();
			break;
		}
		case BYTE:
		{
			AST tmp2066_AST_in = (AST)_t;
			match(_t,BYTE);
			_t = _t.getNextSibling();
			break;
		}
		case BYVALUE:
		{
			AST tmp2067_AST_in = (AST)_t;
			match(_t,BYVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case BYVARIANTPOINTER:
		{
			AST tmp2068_AST_in = (AST)_t;
			match(_t,BYVARIANTPOINTER);
			_t = _t.getNextSibling();
			break;
		}
		case CACHE:
		{
			AST tmp2069_AST_in = (AST)_t;
			match(_t,CACHE);
			_t = _t.getNextSibling();
			break;
		}
		case CACHESIZE:
		{
			AST tmp2070_AST_in = (AST)_t;
			match(_t,CACHESIZE);
			_t = _t.getNextSibling();
			break;
		}
		case CALL:
		{
			AST tmp2071_AST_in = (AST)_t;
			match(_t,CALL);
			_t = _t.getNextSibling();
			break;
		}
		case CANDO:
		{
			AST tmp2072_AST_in = (AST)_t;
			match(_t,CANDO);
			_t = _t.getNextSibling();
			break;
		}
		case CANFIND:
		{
			AST tmp2073_AST_in = (AST)_t;
			match(_t,CANFIND);
			_t = _t.getNextSibling();
			break;
		}
		case CANQUERY:
		{
			AST tmp2074_AST_in = (AST)_t;
			match(_t,CANQUERY);
			_t = _t.getNextSibling();
			break;
		}
		case CANSET:
		{
			AST tmp2075_AST_in = (AST)_t;
			match(_t,CANSET);
			_t = _t.getNextSibling();
			break;
		}
		case CANCELBUTTON:
		{
			AST tmp2076_AST_in = (AST)_t;
			match(_t,CANCELBUTTON);
			_t = _t.getNextSibling();
			break;
		}
		case CAPS:
		{
			AST tmp2077_AST_in = (AST)_t;
			match(_t,CAPS);
			_t = _t.getNextSibling();
			break;
		}
		case CASE:
		{
			AST tmp2078_AST_in = (AST)_t;
			match(_t,CASE);
			_t = _t.getNextSibling();
			break;
		}
		case CASESENSITIVE:
		{
			AST tmp2079_AST_in = (AST)_t;
			match(_t,CASESENSITIVE);
			_t = _t.getNextSibling();
			break;
		}
		case CDECL_KW:
		{
			AST tmp2080_AST_in = (AST)_t;
			match(_t,CDECL_KW);
			_t = _t.getNextSibling();
			break;
		}
		case CENTERED:
		{
			AST tmp2081_AST_in = (AST)_t;
			match(_t,CENTERED);
			_t = _t.getNextSibling();
			break;
		}
		case CHAINED:
		{
			AST tmp2082_AST_in = (AST)_t;
			match(_t,CHAINED);
			_t = _t.getNextSibling();
			break;
		}
		case CHARACTER:
		{
			AST tmp2083_AST_in = (AST)_t;
			match(_t,CHARACTER);
			_t = _t.getNextSibling();
			break;
		}
		case CHARACTERLENGTH:
		{
			AST tmp2084_AST_in = (AST)_t;
			match(_t,CHARACTERLENGTH);
			_t = _t.getNextSibling();
			break;
		}
		case CHECK:
		{
			AST tmp2085_AST_in = (AST)_t;
			match(_t,CHECK);
			_t = _t.getNextSibling();
			break;
		}
		case CHOOSE:
		{
			AST tmp2086_AST_in = (AST)_t;
			match(_t,CHOOSE);
			_t = _t.getNextSibling();
			break;
		}
		case CHR:
		{
			AST tmp2087_AST_in = (AST)_t;
			match(_t,CHR);
			_t = _t.getNextSibling();
			break;
		}
		case CLEAR:
		{
			AST tmp2088_AST_in = (AST)_t;
			match(_t,CLEAR);
			_t = _t.getNextSibling();
			break;
		}
		case CLIPBOARD:
		{
			AST tmp2089_AST_in = (AST)_t;
			match(_t,CLIPBOARD);
			_t = _t.getNextSibling();
			break;
		}
		case CLOSE:
		{
			AST tmp2090_AST_in = (AST)_t;
			match(_t,CLOSE);
			_t = _t.getNextSibling();
			break;
		}
		case CLOB:
		{
			AST tmp2091_AST_in = (AST)_t;
			match(_t,CLOB);
			_t = _t.getNextSibling();
			break;
		}
		case CODEBASELOCATOR:
		{
			AST tmp2092_AST_in = (AST)_t;
			match(_t,CODEBASELOCATOR);
			_t = _t.getNextSibling();
			break;
		}
		case CODEPAGE:
		{
			AST tmp2093_AST_in = (AST)_t;
			match(_t,CODEPAGE);
			_t = _t.getNextSibling();
			break;
		}
		case CODEPAGECONVERT:
		{
			AST tmp2094_AST_in = (AST)_t;
			match(_t,CODEPAGECONVERT);
			_t = _t.getNextSibling();
			break;
		}
		case COLLATE:
		{
			AST tmp2095_AST_in = (AST)_t;
			match(_t,COLLATE);
			_t = _t.getNextSibling();
			break;
		}
		case COLOF:
		{
			AST tmp2096_AST_in = (AST)_t;
			match(_t,COLOF);
			_t = _t.getNextSibling();
			break;
		}
		case COLON:
		{
			AST tmp2097_AST_in = (AST)_t;
			match(_t,COLON);
			_t = _t.getNextSibling();
			break;
		}
		case COLONALIGNED:
		{
			AST tmp2098_AST_in = (AST)_t;
			match(_t,COLONALIGNED);
			_t = _t.getNextSibling();
			break;
		}
		case COLOR:
		{
			AST tmp2099_AST_in = (AST)_t;
			match(_t,COLOR);
			_t = _t.getNextSibling();
			break;
		}
		case COLORTABLE:
		{
			AST tmp2100_AST_in = (AST)_t;
			match(_t,COLORTABLE);
			_t = _t.getNextSibling();
			break;
		}
		case COLUMN:
		{
			AST tmp2101_AST_in = (AST)_t;
			match(_t,COLUMN);
			_t = _t.getNextSibling();
			break;
		}
		case COLUMNBGCOLOR:
		{
			AST tmp2102_AST_in = (AST)_t;
			match(_t,COLUMNBGCOLOR);
			_t = _t.getNextSibling();
			break;
		}
		case COLUMNCODEPAGE:
		{
			AST tmp2103_AST_in = (AST)_t;
			match(_t,COLUMNCODEPAGE);
			_t = _t.getNextSibling();
			break;
		}
		case COLUMNDCOLOR:
		{
			AST tmp2104_AST_in = (AST)_t;
			match(_t,COLUMNDCOLOR);
			_t = _t.getNextSibling();
			break;
		}
		case COLUMNFGCOLOR:
		{
			AST tmp2105_AST_in = (AST)_t;
			match(_t,COLUMNFGCOLOR);
			_t = _t.getNextSibling();
			break;
		}
		case COLUMNFONT:
		{
			AST tmp2106_AST_in = (AST)_t;
			match(_t,COLUMNFONT);
			_t = _t.getNextSibling();
			break;
		}
		case COLUMNLABEL:
		{
			AST tmp2107_AST_in = (AST)_t;
			match(_t,COLUMNLABEL);
			_t = _t.getNextSibling();
			break;
		}
		case COLUMNOF:
		{
			AST tmp2108_AST_in = (AST)_t;
			match(_t,COLUMNOF);
			_t = _t.getNextSibling();
			break;
		}
		case COLUMNPFCOLOR:
		{
			AST tmp2109_AST_in = (AST)_t;
			match(_t,COLUMNPFCOLOR);
			_t = _t.getNextSibling();
			break;
		}
		case COLUMNS:
		{
			AST tmp2110_AST_in = (AST)_t;
			match(_t,COLUMNS);
			_t = _t.getNextSibling();
			break;
		}
		case COMHANDLE:
		{
			AST tmp2111_AST_in = (AST)_t;
			match(_t,COMHANDLE);
			_t = _t.getNextSibling();
			break;
		}
		case COMBOBOX:
		{
			AST tmp2112_AST_in = (AST)_t;
			match(_t,COMBOBOX);
			_t = _t.getNextSibling();
			break;
		}
		case COMMAND:
		{
			AST tmp2113_AST_in = (AST)_t;
			match(_t,COMMAND);
			_t = _t.getNextSibling();
			break;
		}
		case COMPARES:
		{
			AST tmp2114_AST_in = (AST)_t;
			match(_t,COMPARES);
			_t = _t.getNextSibling();
			break;
		}
		case COMPLETE:
		{
			AST tmp2115_AST_in = (AST)_t;
			match(_t,COMPLETE);
			_t = _t.getNextSibling();
			break;
		}
		case COMPILE:
		{
			AST tmp2116_AST_in = (AST)_t;
			match(_t,COMPILE);
			_t = _t.getNextSibling();
			break;
		}
		case COMPILER:
		{
			AST tmp2117_AST_in = (AST)_t;
			match(_t,COMPILER);
			_t = _t.getNextSibling();
			break;
		}
		case COMSELF:
		{
			AST tmp2118_AST_in = (AST)_t;
			match(_t,COMSELF);
			_t = _t.getNextSibling();
			break;
		}
		case CONFIGNAME:
		{
			AST tmp2119_AST_in = (AST)_t;
			match(_t,CONFIGNAME);
			_t = _t.getNextSibling();
			break;
		}
		case CONNECT:
		{
			AST tmp2120_AST_in = (AST)_t;
			match(_t,CONNECT);
			_t = _t.getNextSibling();
			break;
		}
		case CONNECTED:
		{
			AST tmp2121_AST_in = (AST)_t;
			match(_t,CONNECTED);
			_t = _t.getNextSibling();
			break;
		}
		case CONTAINS:
		{
			AST tmp2122_AST_in = (AST)_t;
			match(_t,CONTAINS);
			_t = _t.getNextSibling();
			break;
		}
		case CONTENTS:
		{
			AST tmp2123_AST_in = (AST)_t;
			match(_t,CONTENTS);
			_t = _t.getNextSibling();
			break;
		}
		case CONTEXT:
		{
			AST tmp2124_AST_in = (AST)_t;
			match(_t,CONTEXT);
			_t = _t.getNextSibling();
			break;
		}
		case CONTEXTHELP:
		{
			AST tmp2125_AST_in = (AST)_t;
			match(_t,CONTEXTHELP);
			_t = _t.getNextSibling();
			break;
		}
		case CONTEXTHELPFILE:
		{
			AST tmp2126_AST_in = (AST)_t;
			match(_t,CONTEXTHELPFILE);
			_t = _t.getNextSibling();
			break;
		}
		case CONTEXTHELPID:
		{
			AST tmp2127_AST_in = (AST)_t;
			match(_t,CONTEXTHELPID);
			_t = _t.getNextSibling();
			break;
		}
		case CONTEXTPOPUP:
		{
			AST tmp2128_AST_in = (AST)_t;
			match(_t,CONTEXTPOPUP);
			_t = _t.getNextSibling();
			break;
		}
		case CONTROL:
		{
			AST tmp2129_AST_in = (AST)_t;
			match(_t,CONTROL);
			_t = _t.getNextSibling();
			break;
		}
		case CONTROLFRAME:
		{
			AST tmp2130_AST_in = (AST)_t;
			match(_t,CONTROLFRAME);
			_t = _t.getNextSibling();
			break;
		}
		case CONVERT:
		{
			AST tmp2131_AST_in = (AST)_t;
			match(_t,CONVERT);
			_t = _t.getNextSibling();
			break;
		}
		case CONVERT3DCOLORS:
		{
			AST tmp2132_AST_in = (AST)_t;
			match(_t,CONVERT3DCOLORS);
			_t = _t.getNextSibling();
			break;
		}
		case COPYLOB:
		{
			AST tmp2133_AST_in = (AST)_t;
			match(_t,COPYLOB);
			_t = _t.getNextSibling();
			break;
		}
		case COUNT:
		{
			AST tmp2134_AST_in = (AST)_t;
			match(_t,COUNT);
			_t = _t.getNextSibling();
			break;
		}
		case COUNTOF:
		{
			AST tmp2135_AST_in = (AST)_t;
			match(_t,COUNTOF);
			_t = _t.getNextSibling();
			break;
		}
		case CREATE:
		{
			AST tmp2136_AST_in = (AST)_t;
			match(_t,CREATE);
			_t = _t.getNextSibling();
			break;
		}
		case CREATETESTFILE:
		{
			AST tmp2137_AST_in = (AST)_t;
			match(_t,CREATETESTFILE);
			_t = _t.getNextSibling();
			break;
		}
		case CURRENCY:
		{
			AST tmp2138_AST_in = (AST)_t;
			match(_t,CURRENCY);
			_t = _t.getNextSibling();
			break;
		}
		case CURRENT:
		{
			AST tmp2139_AST_in = (AST)_t;
			match(_t,CURRENT);
			_t = _t.getNextSibling();
			break;
		}
		case CURRENTCHANGED:
		{
			AST tmp2140_AST_in = (AST)_t;
			match(_t,CURRENTCHANGED);
			_t = _t.getNextSibling();
			break;
		}
		case CURRENTENVIRONMENT:
		{
			AST tmp2141_AST_in = (AST)_t;
			match(_t,CURRENTENVIRONMENT);
			_t = _t.getNextSibling();
			break;
		}
		case CURRENTLANGUAGE:
		{
			AST tmp2142_AST_in = (AST)_t;
			match(_t,CURRENTLANGUAGE);
			_t = _t.getNextSibling();
			break;
		}
		case CURRENTRESULTROW:
		{
			AST tmp2143_AST_in = (AST)_t;
			match(_t,CURRENTRESULTROW);
			_t = _t.getNextSibling();
			break;
		}
		case CURRENTVALUE:
		{
			AST tmp2144_AST_in = (AST)_t;
			match(_t,CURRENTVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case CURRENTWINDOW:
		{
			AST tmp2145_AST_in = (AST)_t;
			match(_t,CURRENTWINDOW);
			_t = _t.getNextSibling();
			break;
		}
		case CURSOR:
		{
			AST tmp2146_AST_in = (AST)_t;
			match(_t,CURSOR);
			_t = _t.getNextSibling();
			break;
		}
		case DATABASE:
		{
			AST tmp2147_AST_in = (AST)_t;
			match(_t,DATABASE);
			_t = _t.getNextSibling();
			break;
		}
		case DATABIND:
		{
			AST tmp2148_AST_in = (AST)_t;
			match(_t,DATABIND);
			_t = _t.getNextSibling();
			break;
		}
		case DATARELATION:
		{
			AST tmp2149_AST_in = (AST)_t;
			match(_t,DATARELATION);
			_t = _t.getNextSibling();
			break;
		}
		case DATASERVERS:
		{
			AST tmp2150_AST_in = (AST)_t;
			match(_t,DATASERVERS);
			_t = _t.getNextSibling();
			break;
		}
		case DATASET:
		{
			AST tmp2151_AST_in = (AST)_t;
			match(_t,DATASET);
			_t = _t.getNextSibling();
			break;
		}
		case DATASETHANDLE:
		{
			AST tmp2152_AST_in = (AST)_t;
			match(_t,DATASETHANDLE);
			_t = _t.getNextSibling();
			break;
		}
		case DATASOURCE:
		{
			AST tmp2153_AST_in = (AST)_t;
			match(_t,DATASOURCE);
			_t = _t.getNextSibling();
			break;
		}
		case DATE:
		{
			AST tmp2154_AST_in = (AST)_t;
			match(_t,DATE);
			_t = _t.getNextSibling();
			break;
		}
		case DATETIME:
		{
			AST tmp2155_AST_in = (AST)_t;
			match(_t,DATETIME);
			_t = _t.getNextSibling();
			break;
		}
		case DATETIMETZ:
		{
			AST tmp2156_AST_in = (AST)_t;
			match(_t,DATETIMETZ);
			_t = _t.getNextSibling();
			break;
		}
		case DAY:
		{
			AST tmp2157_AST_in = (AST)_t;
			match(_t,DAY);
			_t = _t.getNextSibling();
			break;
		}
		case DBCODEPAGE:
		{
			AST tmp2158_AST_in = (AST)_t;
			match(_t,DBCODEPAGE);
			_t = _t.getNextSibling();
			break;
		}
		case DBCOLLATION:
		{
			AST tmp2159_AST_in = (AST)_t;
			match(_t,DBCOLLATION);
			_t = _t.getNextSibling();
			break;
		}
		case DBIMS:
		{
			AST tmp2160_AST_in = (AST)_t;
			match(_t,DBIMS);
			_t = _t.getNextSibling();
			break;
		}
		case DBNAME:
		{
			AST tmp2161_AST_in = (AST)_t;
			match(_t,DBNAME);
			_t = _t.getNextSibling();
			break;
		}
		case DBPARAM:
		{
			AST tmp2162_AST_in = (AST)_t;
			match(_t,DBPARAM);
			_t = _t.getNextSibling();
			break;
		}
		case DBRESTRICTIONS:
		{
			AST tmp2163_AST_in = (AST)_t;
			match(_t,DBRESTRICTIONS);
			_t = _t.getNextSibling();
			break;
		}
		case DBTASKID:
		{
			AST tmp2164_AST_in = (AST)_t;
			match(_t,DBTASKID);
			_t = _t.getNextSibling();
			break;
		}
		case DBTYPE:
		{
			AST tmp2165_AST_in = (AST)_t;
			match(_t,DBTYPE);
			_t = _t.getNextSibling();
			break;
		}
		case DBVERSION:
		{
			AST tmp2166_AST_in = (AST)_t;
			match(_t,DBVERSION);
			_t = _t.getNextSibling();
			break;
		}
		case DCOLOR:
		{
			AST tmp2167_AST_in = (AST)_t;
			match(_t,DCOLOR);
			_t = _t.getNextSibling();
			break;
		}
		case DDE:
		{
			AST tmp2168_AST_in = (AST)_t;
			match(_t,DDE);
			_t = _t.getNextSibling();
			break;
		}
		case DEBLANK:
		{
			AST tmp2169_AST_in = (AST)_t;
			match(_t,DEBLANK);
			_t = _t.getNextSibling();
			break;
		}
		case DEBUG:
		{
			AST tmp2170_AST_in = (AST)_t;
			match(_t,DEBUG);
			_t = _t.getNextSibling();
			break;
		}
		case DEBUGLIST:
		{
			AST tmp2171_AST_in = (AST)_t;
			match(_t,DEBUGLIST);
			_t = _t.getNextSibling();
			break;
		}
		case DEBUGGER:
		{
			AST tmp2172_AST_in = (AST)_t;
			match(_t,DEBUGGER);
			_t = _t.getNextSibling();
			break;
		}
		case DECIMAL:
		{
			AST tmp2173_AST_in = (AST)_t;
			match(_t,DECIMAL);
			_t = _t.getNextSibling();
			break;
		}
		case DECIMALS:
		{
			AST tmp2174_AST_in = (AST)_t;
			match(_t,DECIMALS);
			_t = _t.getNextSibling();
			break;
		}
		case DECLARE:
		{
			AST tmp2175_AST_in = (AST)_t;
			match(_t,DECLARE);
			_t = _t.getNextSibling();
			break;
		}
		case DEFAULT:
		{
			AST tmp2176_AST_in = (AST)_t;
			match(_t,DEFAULT);
			_t = _t.getNextSibling();
			break;
		}
		case DEFAULTBUTTON:
		{
			AST tmp2177_AST_in = (AST)_t;
			match(_t,DEFAULTBUTTON);
			_t = _t.getNextSibling();
			break;
		}
		case DEFAULTEXTENSION:
		{
			AST tmp2178_AST_in = (AST)_t;
			match(_t,DEFAULTEXTENSION);
			_t = _t.getNextSibling();
			break;
		}
		case DEFAULTNOXLATE:
		{
			AST tmp2179_AST_in = (AST)_t;
			match(_t,DEFAULTNOXLATE);
			_t = _t.getNextSibling();
			break;
		}
		case DEFAULTWINDOW:
		{
			AST tmp2180_AST_in = (AST)_t;
			match(_t,DEFAULTWINDOW);
			_t = _t.getNextSibling();
			break;
		}
		case DEFERLOBFETCH:
		{
			AST tmp2181_AST_in = (AST)_t;
			match(_t,DEFERLOBFETCH);
			_t = _t.getNextSibling();
			break;
		}
		case DEFINE:
		{
			AST tmp2182_AST_in = (AST)_t;
			match(_t,DEFINE);
			_t = _t.getNextSibling();
			break;
		}
		case DEFINED:
		{
			AST tmp2183_AST_in = (AST)_t;
			match(_t,DEFINED);
			_t = _t.getNextSibling();
			break;
		}
		case DELETE_KW:
		{
			AST tmp2184_AST_in = (AST)_t;
			match(_t,DELETE_KW);
			_t = _t.getNextSibling();
			break;
		}
		case DELETERESULTLISTENTRY:
		{
			AST tmp2185_AST_in = (AST)_t;
			match(_t,DELETERESULTLISTENTRY);
			_t = _t.getNextSibling();
			break;
		}
		case DELIMITER:
		{
			AST tmp2186_AST_in = (AST)_t;
			match(_t,DELIMITER);
			_t = _t.getNextSibling();
			break;
		}
		case DESC:
		{
			AST tmp2187_AST_in = (AST)_t;
			match(_t,DESC);
			_t = _t.getNextSibling();
			break;
		}
		case DESCENDING:
		{
			AST tmp2188_AST_in = (AST)_t;
			match(_t,DESCENDING);
			_t = _t.getNextSibling();
			break;
		}
		case DESELECTION:
		{
			AST tmp2189_AST_in = (AST)_t;
			match(_t,DESELECTION);
			_t = _t.getNextSibling();
			break;
		}
		case DIALOGBOX:
		{
			AST tmp2190_AST_in = (AST)_t;
			match(_t,DIALOGBOX);
			_t = _t.getNextSibling();
			break;
		}
		case DIALOGHELP:
		{
			AST tmp2191_AST_in = (AST)_t;
			match(_t,DIALOGHELP);
			_t = _t.getNextSibling();
			break;
		}
		case DICTIONARY:
		{
			AST tmp2192_AST_in = (AST)_t;
			match(_t,DICTIONARY);
			_t = _t.getNextSibling();
			break;
		}
		case DIR:
		{
			AST tmp2193_AST_in = (AST)_t;
			match(_t,DIR);
			_t = _t.getNextSibling();
			break;
		}
		case DISABLE:
		{
			AST tmp2194_AST_in = (AST)_t;
			match(_t,DISABLE);
			_t = _t.getNextSibling();
			break;
		}
		case DISABLEAUTOZAP:
		{
			AST tmp2195_AST_in = (AST)_t;
			match(_t,DISABLEAUTOZAP);
			_t = _t.getNextSibling();
			break;
		}
		case DISABLED:
		{
			AST tmp2196_AST_in = (AST)_t;
			match(_t,DISABLED);
			_t = _t.getNextSibling();
			break;
		}
		case DISCONNECT:
		{
			AST tmp2197_AST_in = (AST)_t;
			match(_t,DISCONNECT);
			_t = _t.getNextSibling();
			break;
		}
		case DISPLAY:
		{
			AST tmp2198_AST_in = (AST)_t;
			match(_t,DISPLAY);
			_t = _t.getNextSibling();
			break;
		}
		case DISTINCT:
		{
			AST tmp2199_AST_in = (AST)_t;
			match(_t,DISTINCT);
			_t = _t.getNextSibling();
			break;
		}
		case DO:
		{
			AST tmp2200_AST_in = (AST)_t;
			match(_t,DO);
			_t = _t.getNextSibling();
			break;
		}
		case DOS:
		{
			AST tmp2201_AST_in = (AST)_t;
			match(_t,DOS);
			_t = _t.getNextSibling();
			break;
		}
		case DOUBLE:
		{
			AST tmp2202_AST_in = (AST)_t;
			match(_t,DOUBLE);
			_t = _t.getNextSibling();
			break;
		}
		case DOWN:
		{
			AST tmp2203_AST_in = (AST)_t;
			match(_t,DOWN);
			_t = _t.getNextSibling();
			break;
		}
		case DROP:
		{
			AST tmp2204_AST_in = (AST)_t;
			match(_t,DROP);
			_t = _t.getNextSibling();
			break;
		}
		case DROPDOWN:
		{
			AST tmp2205_AST_in = (AST)_t;
			match(_t,DROPDOWN);
			_t = _t.getNextSibling();
			break;
		}
		case DROPDOWNLIST:
		{
			AST tmp2206_AST_in = (AST)_t;
			match(_t,DROPDOWNLIST);
			_t = _t.getNextSibling();
			break;
		}
		case DROPFILENOTIFY:
		{
			AST tmp2207_AST_in = (AST)_t;
			match(_t,DROPFILENOTIFY);
			_t = _t.getNextSibling();
			break;
		}
		case DROPTARGET:
		{
			AST tmp2208_AST_in = (AST)_t;
			match(_t,DROPTARGET);
			_t = _t.getNextSibling();
			break;
		}
		case DUMP:
		{
			AST tmp2209_AST_in = (AST)_t;
			match(_t,DUMP);
			_t = _t.getNextSibling();
			break;
		}
		case DYNAMIC:
		{
			AST tmp2210_AST_in = (AST)_t;
			match(_t,DYNAMIC);
			_t = _t.getNextSibling();
			break;
		}
		case DYNAMICCURRENTVALUE:
		{
			AST tmp2211_AST_in = (AST)_t;
			match(_t,DYNAMICCURRENTVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case DYNAMICNEXTVALUE:
		{
			AST tmp2212_AST_in = (AST)_t;
			match(_t,DYNAMICNEXTVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case DYNAMICFUNCTION:
		{
			AST tmp2213_AST_in = (AST)_t;
			match(_t,DYNAMICFUNCTION);
			_t = _t.getNextSibling();
			break;
		}
		case EACH:
		{
			AST tmp2214_AST_in = (AST)_t;
			match(_t,EACH);
			_t = _t.getNextSibling();
			break;
		}
		case ECHO:
		{
			AST tmp2215_AST_in = (AST)_t;
			match(_t,ECHO);
			_t = _t.getNextSibling();
			break;
		}
		case EDGECHARS:
		{
			AST tmp2216_AST_in = (AST)_t;
			match(_t,EDGECHARS);
			_t = _t.getNextSibling();
			break;
		}
		case EDGEPIXELS:
		{
			AST tmp2217_AST_in = (AST)_t;
			match(_t,EDGEPIXELS);
			_t = _t.getNextSibling();
			break;
		}
		case EDITUNDO:
		{
			AST tmp2218_AST_in = (AST)_t;
			match(_t,EDITUNDO);
			_t = _t.getNextSibling();
			break;
		}
		case EDITING:
		{
			AST tmp2219_AST_in = (AST)_t;
			match(_t,EDITING);
			_t = _t.getNextSibling();
			break;
		}
		case EDITOR:
		{
			AST tmp2220_AST_in = (AST)_t;
			match(_t,EDITOR);
			_t = _t.getNextSibling();
			break;
		}
		case ELSE:
		{
			AST tmp2221_AST_in = (AST)_t;
			match(_t,ELSE);
			_t = _t.getNextSibling();
			break;
		}
		case EMPTY:
		{
			AST tmp2222_AST_in = (AST)_t;
			match(_t,EMPTY);
			_t = _t.getNextSibling();
			break;
		}
		case ENABLE:
		{
			AST tmp2223_AST_in = (AST)_t;
			match(_t,ENABLE);
			_t = _t.getNextSibling();
			break;
		}
		case ENCODE:
		{
			AST tmp2224_AST_in = (AST)_t;
			match(_t,ENCODE);
			_t = _t.getNextSibling();
			break;
		}
		case END:
		{
			AST tmp2225_AST_in = (AST)_t;
			match(_t,END);
			_t = _t.getNextSibling();
			break;
		}
		case ENDMOVE:
		{
			AST tmp2226_AST_in = (AST)_t;
			match(_t,ENDMOVE);
			_t = _t.getNextSibling();
			break;
		}
		case ENDRESIZE:
		{
			AST tmp2227_AST_in = (AST)_t;
			match(_t,ENDRESIZE);
			_t = _t.getNextSibling();
			break;
		}
		case ENDROWRESIZE:
		{
			AST tmp2228_AST_in = (AST)_t;
			match(_t,ENDROWRESIZE);
			_t = _t.getNextSibling();
			break;
		}
		case ENDKEY:
		{
			AST tmp2229_AST_in = (AST)_t;
			match(_t,ENDKEY);
			_t = _t.getNextSibling();
			break;
		}
		case ENTERED:
		{
			AST tmp2230_AST_in = (AST)_t;
			match(_t,ENTERED);
			_t = _t.getNextSibling();
			break;
		}
		case ENTRY:
		{
			AST tmp2231_AST_in = (AST)_t;
			match(_t,ENTRY);
			_t = _t.getNextSibling();
			break;
		}
		case EQ:
		{
			AST tmp2232_AST_in = (AST)_t;
			match(_t,EQ);
			_t = _t.getNextSibling();
			break;
		}
		case ERROR:
		{
			AST tmp2233_AST_in = (AST)_t;
			match(_t,ERROR);
			_t = _t.getNextSibling();
			break;
		}
		case ERRORCODE:
		{
			AST tmp2234_AST_in = (AST)_t;
			match(_t,ERRORCODE);
			_t = _t.getNextSibling();
			break;
		}
		case ERRORSTATUS:
		{
			AST tmp2235_AST_in = (AST)_t;
			match(_t,ERRORSTATUS);
			_t = _t.getNextSibling();
			break;
		}
		case ESCAPE:
		{
			AST tmp2236_AST_in = (AST)_t;
			match(_t,ESCAPE);
			_t = _t.getNextSibling();
			break;
		}
		case ETIME_KW:
		{
			AST tmp2237_AST_in = (AST)_t;
			match(_t,ETIME_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EVENTPROCEDURE:
		{
			AST tmp2238_AST_in = (AST)_t;
			match(_t,EVENTPROCEDURE);
			_t = _t.getNextSibling();
			break;
		}
		case EVENTS:
		{
			AST tmp2239_AST_in = (AST)_t;
			match(_t,EVENTS);
			_t = _t.getNextSibling();
			break;
		}
		case EXCEPT:
		{
			AST tmp2240_AST_in = (AST)_t;
			match(_t,EXCEPT);
			_t = _t.getNextSibling();
			break;
		}
		case EXCLUSIVEID:
		{
			AST tmp2241_AST_in = (AST)_t;
			match(_t,EXCLUSIVEID);
			_t = _t.getNextSibling();
			break;
		}
		case EXCLUSIVELOCK:
		{
			AST tmp2242_AST_in = (AST)_t;
			match(_t,EXCLUSIVELOCK);
			_t = _t.getNextSibling();
			break;
		}
		case EXCLUSIVEWEBUSER:
		{
			AST tmp2243_AST_in = (AST)_t;
			match(_t,EXCLUSIVEWEBUSER);
			_t = _t.getNextSibling();
			break;
		}
		case EXECUTE:
		{
			AST tmp2244_AST_in = (AST)_t;
			match(_t,EXECUTE);
			_t = _t.getNextSibling();
			break;
		}
		case EXISTS:
		{
			AST tmp2245_AST_in = (AST)_t;
			match(_t,EXISTS);
			_t = _t.getNextSibling();
			break;
		}
		case EXP:
		{
			AST tmp2246_AST_in = (AST)_t;
			match(_t,EXP);
			_t = _t.getNextSibling();
			break;
		}
		case EXPAND:
		{
			AST tmp2247_AST_in = (AST)_t;
			match(_t,EXPAND);
			_t = _t.getNextSibling();
			break;
		}
		case EXPANDABLE:
		{
			AST tmp2248_AST_in = (AST)_t;
			match(_t,EXPANDABLE);
			_t = _t.getNextSibling();
			break;
		}
		case EXPLICIT:
		{
			AST tmp2249_AST_in = (AST)_t;
			match(_t,EXPLICIT);
			_t = _t.getNextSibling();
			break;
		}
		case EXPORT:
		{
			AST tmp2250_AST_in = (AST)_t;
			match(_t,EXPORT);
			_t = _t.getNextSibling();
			break;
		}
		case EXTENDED:
		{
			AST tmp2251_AST_in = (AST)_t;
			match(_t,EXTENDED);
			_t = _t.getNextSibling();
			break;
		}
		case EXTENT:
		{
			AST tmp2252_AST_in = (AST)_t;
			match(_t,EXTENT);
			_t = _t.getNextSibling();
			break;
		}
		case EXTERNAL:
		{
			AST tmp2253_AST_in = (AST)_t;
			match(_t,EXTERNAL);
			_t = _t.getNextSibling();
			break;
		}
		case FALSE_KW:
		{
			AST tmp2254_AST_in = (AST)_t;
			match(_t,FALSE_KW);
			_t = _t.getNextSibling();
			break;
		}
		case FETCH:
		{
			AST tmp2255_AST_in = (AST)_t;
			match(_t,FETCH);
			_t = _t.getNextSibling();
			break;
		}
		case FGCOLOR:
		{
			AST tmp2256_AST_in = (AST)_t;
			match(_t,FGCOLOR);
			_t = _t.getNextSibling();
			break;
		}
		case FIELD:
		{
			AST tmp2257_AST_in = (AST)_t;
			match(_t,FIELD);
			_t = _t.getNextSibling();
			break;
		}
		case FIELDS:
		{
			AST tmp2258_AST_in = (AST)_t;
			match(_t,FIELDS);
			_t = _t.getNextSibling();
			break;
		}
		case FILE:
		{
			AST tmp2259_AST_in = (AST)_t;
			match(_t,FILE);
			_t = _t.getNextSibling();
			break;
		}
		case FILEINFORMATION:
		{
			AST tmp2260_AST_in = (AST)_t;
			match(_t,FILEINFORMATION);
			_t = _t.getNextSibling();
			break;
		}
		case FILL:
		{
			AST tmp2261_AST_in = (AST)_t;
			match(_t,FILL);
			_t = _t.getNextSibling();
			break;
		}
		case FILLIN:
		{
			AST tmp2262_AST_in = (AST)_t;
			match(_t,FILLIN);
			_t = _t.getNextSibling();
			break;
		}
		case FILTERS:
		{
			AST tmp2263_AST_in = (AST)_t;
			match(_t,FILTERS);
			_t = _t.getNextSibling();
			break;
		}
		case FIND:
		{
			AST tmp2264_AST_in = (AST)_t;
			match(_t,FIND);
			_t = _t.getNextSibling();
			break;
		}
		case FINDCASESENSITIVE:
		{
			AST tmp2265_AST_in = (AST)_t;
			match(_t,FINDCASESENSITIVE);
			_t = _t.getNextSibling();
			break;
		}
		case FINDER:
		{
			AST tmp2266_AST_in = (AST)_t;
			match(_t,FINDER);
			_t = _t.getNextSibling();
			break;
		}
		case FINDGLOBAL:
		{
			AST tmp2267_AST_in = (AST)_t;
			match(_t,FINDGLOBAL);
			_t = _t.getNextSibling();
			break;
		}
		case FINDNEXTOCCURRENCE:
		{
			AST tmp2268_AST_in = (AST)_t;
			match(_t,FINDNEXTOCCURRENCE);
			_t = _t.getNextSibling();
			break;
		}
		case FINDPREVOCCURRENCE:
		{
			AST tmp2269_AST_in = (AST)_t;
			match(_t,FINDPREVOCCURRENCE);
			_t = _t.getNextSibling();
			break;
		}
		case FINDSELECT:
		{
			AST tmp2270_AST_in = (AST)_t;
			match(_t,FINDSELECT);
			_t = _t.getNextSibling();
			break;
		}
		case FINDWRAPAROUND:
		{
			AST tmp2271_AST_in = (AST)_t;
			match(_t,FINDWRAPAROUND);
			_t = _t.getNextSibling();
			break;
		}
		case FIRST:
		{
			AST tmp2272_AST_in = (AST)_t;
			match(_t,FIRST);
			_t = _t.getNextSibling();
			break;
		}
		case FIRSTOF:
		{
			AST tmp2273_AST_in = (AST)_t;
			match(_t,FIRSTOF);
			_t = _t.getNextSibling();
			break;
		}
		case FITLASTCOLUMN:
		{
			AST tmp2274_AST_in = (AST)_t;
			match(_t,FITLASTCOLUMN);
			_t = _t.getNextSibling();
			break;
		}
		case FIXCODEPAGE:
		{
			AST tmp2275_AST_in = (AST)_t;
			match(_t,FIXCODEPAGE);
			_t = _t.getNextSibling();
			break;
		}
		case FIXEDONLY:
		{
			AST tmp2276_AST_in = (AST)_t;
			match(_t,FIXEDONLY);
			_t = _t.getNextSibling();
			break;
		}
		case FLATBUTTON:
		{
			AST tmp2277_AST_in = (AST)_t;
			match(_t,FLATBUTTON);
			_t = _t.getNextSibling();
			break;
		}
		case FLOAT:
		{
			AST tmp2278_AST_in = (AST)_t;
			match(_t,FLOAT);
			_t = _t.getNextSibling();
			break;
		}
		case FOCUS:
		{
			AST tmp2279_AST_in = (AST)_t;
			match(_t,FOCUS);
			_t = _t.getNextSibling();
			break;
		}
		case FONT:
		{
			AST tmp2280_AST_in = (AST)_t;
			match(_t,FONT);
			_t = _t.getNextSibling();
			break;
		}
		case FONTTABLE:
		{
			AST tmp2281_AST_in = (AST)_t;
			match(_t,FONTTABLE);
			_t = _t.getNextSibling();
			break;
		}
		case FOR:
		{
			AST tmp2282_AST_in = (AST)_t;
			match(_t,FOR);
			_t = _t.getNextSibling();
			break;
		}
		case FORCEFILE:
		{
			AST tmp2283_AST_in = (AST)_t;
			match(_t,FORCEFILE);
			_t = _t.getNextSibling();
			break;
		}
		case FORMINPUT:
		{
			AST tmp2284_AST_in = (AST)_t;
			match(_t,FORMINPUT);
			_t = _t.getNextSibling();
			break;
		}
		case FORMAT:
		{
			AST tmp2285_AST_in = (AST)_t;
			match(_t,FORMAT);
			_t = _t.getNextSibling();
			break;
		}
		case FORWARDS:
		{
			AST tmp2286_AST_in = (AST)_t;
			match(_t,FORWARDS);
			_t = _t.getNextSibling();
			break;
		}
		case FRAME:
		{
			AST tmp2287_AST_in = (AST)_t;
			match(_t,FRAME);
			_t = _t.getNextSibling();
			break;
		}
		case FRAMECOL:
		{
			AST tmp2288_AST_in = (AST)_t;
			match(_t,FRAMECOL);
			_t = _t.getNextSibling();
			break;
		}
		case FRAMEDB:
		{
			AST tmp2289_AST_in = (AST)_t;
			match(_t,FRAMEDB);
			_t = _t.getNextSibling();
			break;
		}
		case FRAMEDOWN:
		{
			AST tmp2290_AST_in = (AST)_t;
			match(_t,FRAMEDOWN);
			_t = _t.getNextSibling();
			break;
		}
		case FRAMEFIELD:
		{
			AST tmp2291_AST_in = (AST)_t;
			match(_t,FRAMEFIELD);
			_t = _t.getNextSibling();
			break;
		}
		case FRAMEFILE:
		{
			AST tmp2292_AST_in = (AST)_t;
			match(_t,FRAMEFILE);
			_t = _t.getNextSibling();
			break;
		}
		case FRAMEINDEX:
		{
			AST tmp2293_AST_in = (AST)_t;
			match(_t,FRAMEINDEX);
			_t = _t.getNextSibling();
			break;
		}
		case FRAMELINE:
		{
			AST tmp2294_AST_in = (AST)_t;
			match(_t,FRAMELINE);
			_t = _t.getNextSibling();
			break;
		}
		case FRAMENAME:
		{
			AST tmp2295_AST_in = (AST)_t;
			match(_t,FRAMENAME);
			_t = _t.getNextSibling();
			break;
		}
		case FRAMEROW:
		{
			AST tmp2296_AST_in = (AST)_t;
			match(_t,FRAMEROW);
			_t = _t.getNextSibling();
			break;
		}
		case FRAMEVALUE:
		{
			AST tmp2297_AST_in = (AST)_t;
			match(_t,FRAMEVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case FREQUENCY:
		{
			AST tmp2298_AST_in = (AST)_t;
			match(_t,FREQUENCY);
			_t = _t.getNextSibling();
			break;
		}
		case FROM:
		{
			AST tmp2299_AST_in = (AST)_t;
			match(_t,FROM);
			_t = _t.getNextSibling();
			break;
		}
		case FROMCURRENT:
		{
			AST tmp2300_AST_in = (AST)_t;
			match(_t,FROMCURRENT);
			_t = _t.getNextSibling();
			break;
		}
		case FUNCTION:
		{
			AST tmp2301_AST_in = (AST)_t;
			match(_t,FUNCTION);
			_t = _t.getNextSibling();
			break;
		}
		case FUNCTIONCALLTYPE:
		{
			AST tmp2302_AST_in = (AST)_t;
			match(_t,FUNCTIONCALLTYPE);
			_t = _t.getNextSibling();
			break;
		}
		case GE:
		{
			AST tmp2303_AST_in = (AST)_t;
			match(_t,GE);
			_t = _t.getNextSibling();
			break;
		}
		case GENERATEMD5:
		{
			AST tmp2304_AST_in = (AST)_t;
			match(_t,GENERATEMD5);
			_t = _t.getNextSibling();
			break;
		}
		case GET:
		{
			AST tmp2305_AST_in = (AST)_t;
			match(_t,GET);
			_t = _t.getNextSibling();
			break;
		}
		case GETATTRCALLTYPE:
		{
			AST tmp2306_AST_in = (AST)_t;
			match(_t,GETATTRCALLTYPE);
			_t = _t.getNextSibling();
			break;
		}
		case GETBITS:
		{
			AST tmp2307_AST_in = (AST)_t;
			match(_t,GETBITS);
			_t = _t.getNextSibling();
			break;
		}
		case GETBUFFERHANDLE:
		{
			AST tmp2308_AST_in = (AST)_t;
			match(_t,GETBUFFERHANDLE);
			_t = _t.getNextSibling();
			break;
		}
		case GETBYTE:
		{
			AST tmp2309_AST_in = (AST)_t;
			match(_t,GETBYTE);
			_t = _t.getNextSibling();
			break;
		}
		case GETBYTES:
		{
			AST tmp2310_AST_in = (AST)_t;
			match(_t,GETBYTES);
			_t = _t.getNextSibling();
			break;
		}
		case GETBYTEORDER:
		{
			AST tmp2311_AST_in = (AST)_t;
			match(_t,GETBYTEORDER);
			_t = _t.getNextSibling();
			break;
		}
		case GETCGILIST:
		{
			AST tmp2312_AST_in = (AST)_t;
			match(_t,GETCGILIST);
			_t = _t.getNextSibling();
			break;
		}
		case GETCGIVALUE:
		{
			AST tmp2313_AST_in = (AST)_t;
			match(_t,GETCGIVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case GETCODEPAGES:
		{
			AST tmp2314_AST_in = (AST)_t;
			match(_t,GETCODEPAGES);
			_t = _t.getNextSibling();
			break;
		}
		case GETCOLLATIONS:
		{
			AST tmp2315_AST_in = (AST)_t;
			match(_t,GETCOLLATIONS);
			_t = _t.getNextSibling();
			break;
		}
		case GETCONFIGVALUE:
		{
			AST tmp2316_AST_in = (AST)_t;
			match(_t,GETCONFIGVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case GETDIR:
		{
			AST tmp2317_AST_in = (AST)_t;
			match(_t,GETDIR);
			_t = _t.getNextSibling();
			break;
		}
		case GETDOUBLE:
		{
			AST tmp2318_AST_in = (AST)_t;
			match(_t,GETDOUBLE);
			_t = _t.getNextSibling();
			break;
		}
		case GETFILE:
		{
			AST tmp2319_AST_in = (AST)_t;
			match(_t,GETFILE);
			_t = _t.getNextSibling();
			break;
		}
		case GETFLOAT:
		{
			AST tmp2320_AST_in = (AST)_t;
			match(_t,GETFLOAT);
			_t = _t.getNextSibling();
			break;
		}
		case GETKEYVALUE:
		{
			AST tmp2321_AST_in = (AST)_t;
			match(_t,GETKEYVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case GETLICENSE:
		{
			AST tmp2322_AST_in = (AST)_t;
			match(_t,GETLICENSE);
			_t = _t.getNextSibling();
			break;
		}
		case GETLONG:
		{
			AST tmp2323_AST_in = (AST)_t;
			match(_t,GETLONG);
			_t = _t.getNextSibling();
			break;
		}
		case GETPOINTERVALUE:
		{
			AST tmp2324_AST_in = (AST)_t;
			match(_t,GETPOINTERVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case GETSHORT:
		{
			AST tmp2325_AST_in = (AST)_t;
			match(_t,GETSHORT);
			_t = _t.getNextSibling();
			break;
		}
		case GETSIZE:
		{
			AST tmp2326_AST_in = (AST)_t;
			match(_t,GETSIZE);
			_t = _t.getNextSibling();
			break;
		}
		case GETSTRING:
		{
			AST tmp2327_AST_in = (AST)_t;
			match(_t,GETSTRING);
			_t = _t.getNextSibling();
			break;
		}
		case GETUNSIGNEDSHORT:
		{
			AST tmp2328_AST_in = (AST)_t;
			match(_t,GETUNSIGNEDSHORT);
			_t = _t.getNextSibling();
			break;
		}
		case GLOBAL:
		{
			AST tmp2329_AST_in = (AST)_t;
			match(_t,GLOBAL);
			_t = _t.getNextSibling();
			break;
		}
		case GOON:
		{
			AST tmp2330_AST_in = (AST)_t;
			match(_t,GOON);
			_t = _t.getNextSibling();
			break;
		}
		case GOPENDING:
		{
			AST tmp2331_AST_in = (AST)_t;
			match(_t,GOPENDING);
			_t = _t.getNextSibling();
			break;
		}
		case GRANT:
		{
			AST tmp2332_AST_in = (AST)_t;
			match(_t,GRANT);
			_t = _t.getNextSibling();
			break;
		}
		case GRAPHICEDGE:
		{
			AST tmp2333_AST_in = (AST)_t;
			match(_t,GRAPHICEDGE);
			_t = _t.getNextSibling();
			break;
		}
		case GROUP:
		{
			AST tmp2334_AST_in = (AST)_t;
			match(_t,GROUP);
			_t = _t.getNextSibling();
			break;
		}
		case GTHAN:
		{
			AST tmp2335_AST_in = (AST)_t;
			match(_t,GTHAN);
			_t = _t.getNextSibling();
			break;
		}
		case HANDLE:
		{
			AST tmp2336_AST_in = (AST)_t;
			match(_t,HANDLE);
			_t = _t.getNextSibling();
			break;
		}
		case HAVING:
		{
			AST tmp2337_AST_in = (AST)_t;
			match(_t,HAVING);
			_t = _t.getNextSibling();
			break;
		}
		case HEADER:
		{
			AST tmp2338_AST_in = (AST)_t;
			match(_t,HEADER);
			_t = _t.getNextSibling();
			break;
		}
		case HEIGHT:
		{
			AST tmp2339_AST_in = (AST)_t;
			match(_t,HEIGHT);
			_t = _t.getNextSibling();
			break;
		}
		case HELP:
		{
			AST tmp2340_AST_in = (AST)_t;
			match(_t,HELP);
			_t = _t.getNextSibling();
			break;
		}
		case HELPTOPIC:
		{
			AST tmp2341_AST_in = (AST)_t;
			match(_t,HELPTOPIC);
			_t = _t.getNextSibling();
			break;
		}
		case HIDE:
		{
			AST tmp2342_AST_in = (AST)_t;
			match(_t,HIDE);
			_t = _t.getNextSibling();
			break;
		}
		case HINT:
		{
			AST tmp2343_AST_in = (AST)_t;
			match(_t,HINT);
			_t = _t.getNextSibling();
			break;
		}
		case HORIZONTAL:
		{
			AST tmp2344_AST_in = (AST)_t;
			match(_t,HORIZONTAL);
			_t = _t.getNextSibling();
			break;
		}
		case HOSTBYTEORDER:
		{
			AST tmp2345_AST_in = (AST)_t;
			match(_t,HOSTBYTEORDER);
			_t = _t.getNextSibling();
			break;
		}
		case HTMLENDOFLINE:
		{
			AST tmp2346_AST_in = (AST)_t;
			match(_t,HTMLENDOFLINE);
			_t = _t.getNextSibling();
			break;
		}
		case HTMLFRAMEBEGIN:
		{
			AST tmp2347_AST_in = (AST)_t;
			match(_t,HTMLFRAMEBEGIN);
			_t = _t.getNextSibling();
			break;
		}
		case HTMLFRAMEEND:
		{
			AST tmp2348_AST_in = (AST)_t;
			match(_t,HTMLFRAMEEND);
			_t = _t.getNextSibling();
			break;
		}
		case HTMLHEADERBEGIN:
		{
			AST tmp2349_AST_in = (AST)_t;
			match(_t,HTMLHEADERBEGIN);
			_t = _t.getNextSibling();
			break;
		}
		case HTMLHEADEREND:
		{
			AST tmp2350_AST_in = (AST)_t;
			match(_t,HTMLHEADEREND);
			_t = _t.getNextSibling();
			break;
		}
		case HTMLTITLEBEGIN:
		{
			AST tmp2351_AST_in = (AST)_t;
			match(_t,HTMLTITLEBEGIN);
			_t = _t.getNextSibling();
			break;
		}
		case HTMLTITLEEND:
		{
			AST tmp2352_AST_in = (AST)_t;
			match(_t,HTMLTITLEEND);
			_t = _t.getNextSibling();
			break;
		}
		case IF:
		{
			AST tmp2353_AST_in = (AST)_t;
			match(_t,IF);
			_t = _t.getNextSibling();
			break;
		}
		case IMAGE:
		{
			AST tmp2354_AST_in = (AST)_t;
			match(_t,IMAGE);
			_t = _t.getNextSibling();
			break;
		}
		case IMAGEDOWN:
		{
			AST tmp2355_AST_in = (AST)_t;
			match(_t,IMAGEDOWN);
			_t = _t.getNextSibling();
			break;
		}
		case IMAGEINSENSITIVE:
		{
			AST tmp2356_AST_in = (AST)_t;
			match(_t,IMAGEINSENSITIVE);
			_t = _t.getNextSibling();
			break;
		}
		case IMAGESIZE:
		{
			AST tmp2357_AST_in = (AST)_t;
			match(_t,IMAGESIZE);
			_t = _t.getNextSibling();
			break;
		}
		case IMAGESIZECHARS:
		{
			AST tmp2358_AST_in = (AST)_t;
			match(_t,IMAGESIZECHARS);
			_t = _t.getNextSibling();
			break;
		}
		case IMAGESIZEPIXELS:
		{
			AST tmp2359_AST_in = (AST)_t;
			match(_t,IMAGESIZEPIXELS);
			_t = _t.getNextSibling();
			break;
		}
		case IMAGEUP:
		{
			AST tmp2360_AST_in = (AST)_t;
			match(_t,IMAGEUP);
			_t = _t.getNextSibling();
			break;
		}
		case IMPORT:
		{
			AST tmp2361_AST_in = (AST)_t;
			match(_t,IMPORT);
			_t = _t.getNextSibling();
			break;
		}
		case IN_KW:
		{
			AST tmp2362_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getNextSibling();
			break;
		}
		case INCREMENTEXCLUSIVEID:
		{
			AST tmp2363_AST_in = (AST)_t;
			match(_t,INCREMENTEXCLUSIVEID);
			_t = _t.getNextSibling();
			break;
		}
		case INDEX:
		{
			AST tmp2364_AST_in = (AST)_t;
			match(_t,INDEX);
			_t = _t.getNextSibling();
			break;
		}
		case INDEXHINT:
		{
			AST tmp2365_AST_in = (AST)_t;
			match(_t,INDEXHINT);
			_t = _t.getNextSibling();
			break;
		}
		case INDEXEDREPOSITION:
		{
			AST tmp2366_AST_in = (AST)_t;
			match(_t,INDEXEDREPOSITION);
			_t = _t.getNextSibling();
			break;
		}
		case INDICATOR:
		{
			AST tmp2367_AST_in = (AST)_t;
			match(_t,INDICATOR);
			_t = _t.getNextSibling();
			break;
		}
		case INFORMATION:
		{
			AST tmp2368_AST_in = (AST)_t;
			match(_t,INFORMATION);
			_t = _t.getNextSibling();
			break;
		}
		case INITIAL:
		{
			AST tmp2369_AST_in = (AST)_t;
			match(_t,INITIAL);
			_t = _t.getNextSibling();
			break;
		}
		case INITIALDIR:
		{
			AST tmp2370_AST_in = (AST)_t;
			match(_t,INITIALDIR);
			_t = _t.getNextSibling();
			break;
		}
		case INITIALFILTER:
		{
			AST tmp2371_AST_in = (AST)_t;
			match(_t,INITIALFILTER);
			_t = _t.getNextSibling();
			break;
		}
		case INITIATE:
		{
			AST tmp2372_AST_in = (AST)_t;
			match(_t,INITIATE);
			_t = _t.getNextSibling();
			break;
		}
		case INNER:
		{
			AST tmp2373_AST_in = (AST)_t;
			match(_t,INNER);
			_t = _t.getNextSibling();
			break;
		}
		case INNERCHARS:
		{
			AST tmp2374_AST_in = (AST)_t;
			match(_t,INNERCHARS);
			_t = _t.getNextSibling();
			break;
		}
		case INNERLINES:
		{
			AST tmp2375_AST_in = (AST)_t;
			match(_t,INNERLINES);
			_t = _t.getNextSibling();
			break;
		}
		case INPUT:
		{
			AST tmp2376_AST_in = (AST)_t;
			match(_t,INPUT);
			_t = _t.getNextSibling();
			break;
		}
		case INPUTOUTPUT:
		{
			AST tmp2377_AST_in = (AST)_t;
			match(_t,INPUTOUTPUT);
			_t = _t.getNextSibling();
			break;
		}
		case INSERT:
		{
			AST tmp2378_AST_in = (AST)_t;
			match(_t,INSERT);
			_t = _t.getNextSibling();
			break;
		}
		case INTEGER:
		{
			AST tmp2379_AST_in = (AST)_t;
			match(_t,INTEGER);
			_t = _t.getNextSibling();
			break;
		}
		case INTERVAL:
		{
			AST tmp2380_AST_in = (AST)_t;
			match(_t,INTERVAL);
			_t = _t.getNextSibling();
			break;
		}
		case INTO:
		{
			AST tmp2381_AST_in = (AST)_t;
			match(_t,INTO);
			_t = _t.getNextSibling();
			break;
		}
		case IS:
		{
			AST tmp2382_AST_in = (AST)_t;
			match(_t,IS);
			_t = _t.getNextSibling();
			break;
		}
		case ISATTRSPACE:
		{
			AST tmp2383_AST_in = (AST)_t;
			match(_t,ISATTRSPACE);
			_t = _t.getNextSibling();
			break;
		}
		case ISCODEPAGEFIXED:
		{
			AST tmp2384_AST_in = (AST)_t;
			match(_t,ISCODEPAGEFIXED);
			_t = _t.getNextSibling();
			break;
		}
		case ISCOLUMNCODEPAGE:
		{
			AST tmp2385_AST_in = (AST)_t;
			match(_t,ISCOLUMNCODEPAGE);
			_t = _t.getNextSibling();
			break;
		}
		case ISLEADBYTE:
		{
			AST tmp2386_AST_in = (AST)_t;
			match(_t,ISLEADBYTE);
			_t = _t.getNextSibling();
			break;
		}
		case ISODATE:
		{
			AST tmp2387_AST_in = (AST)_t;
			match(_t,ISODATE);
			_t = _t.getNextSibling();
			break;
		}
		case ITEM:
		{
			AST tmp2388_AST_in = (AST)_t;
			match(_t,ITEM);
			_t = _t.getNextSibling();
			break;
		}
		case IUNKNOWN:
		{
			AST tmp2389_AST_in = (AST)_t;
			match(_t,IUNKNOWN);
			_t = _t.getNextSibling();
			break;
		}
		case JOIN:
		{
			AST tmp2390_AST_in = (AST)_t;
			match(_t,JOIN);
			_t = _t.getNextSibling();
			break;
		}
		case JOINBYSQLDB:
		{
			AST tmp2391_AST_in = (AST)_t;
			match(_t,JOINBYSQLDB);
			_t = _t.getNextSibling();
			break;
		}
		case KBLABEL:
		{
			AST tmp2392_AST_in = (AST)_t;
			match(_t,KBLABEL);
			_t = _t.getNextSibling();
			break;
		}
		case KEEPMESSAGES:
		{
			AST tmp2393_AST_in = (AST)_t;
			match(_t,KEEPMESSAGES);
			_t = _t.getNextSibling();
			break;
		}
		case KEEPTABORDER:
		{
			AST tmp2394_AST_in = (AST)_t;
			match(_t,KEEPTABORDER);
			_t = _t.getNextSibling();
			break;
		}
		case KEY:
		{
			AST tmp2395_AST_in = (AST)_t;
			match(_t,KEY);
			_t = _t.getNextSibling();
			break;
		}
		case KEYCODE:
		{
			AST tmp2396_AST_in = (AST)_t;
			match(_t,KEYCODE);
			_t = _t.getNextSibling();
			break;
		}
		case KEYFUNCTION:
		{
			AST tmp2397_AST_in = (AST)_t;
			match(_t,KEYFUNCTION);
			_t = _t.getNextSibling();
			break;
		}
		case KEYLABEL:
		{
			AST tmp2398_AST_in = (AST)_t;
			match(_t,KEYLABEL);
			_t = _t.getNextSibling();
			break;
		}
		case KEYS:
		{
			AST tmp2399_AST_in = (AST)_t;
			match(_t,KEYS);
			_t = _t.getNextSibling();
			break;
		}
		case KEYWORD:
		{
			AST tmp2400_AST_in = (AST)_t;
			match(_t,KEYWORD);
			_t = _t.getNextSibling();
			break;
		}
		case KEYWORDALL:
		{
			AST tmp2401_AST_in = (AST)_t;
			match(_t,KEYWORDALL);
			_t = _t.getNextSibling();
			break;
		}
		case LABEL:
		{
			AST tmp2402_AST_in = (AST)_t;
			match(_t,LABEL);
			_t = _t.getNextSibling();
			break;
		}
		case LABELBGCOLOR:
		{
			AST tmp2403_AST_in = (AST)_t;
			match(_t,LABELBGCOLOR);
			_t = _t.getNextSibling();
			break;
		}
		case LABELDCOLOR:
		{
			AST tmp2404_AST_in = (AST)_t;
			match(_t,LABELDCOLOR);
			_t = _t.getNextSibling();
			break;
		}
		case LABELFGCOLOR:
		{
			AST tmp2405_AST_in = (AST)_t;
			match(_t,LABELFGCOLOR);
			_t = _t.getNextSibling();
			break;
		}
		case LABELFONT:
		{
			AST tmp2406_AST_in = (AST)_t;
			match(_t,LABELFONT);
			_t = _t.getNextSibling();
			break;
		}
		case LANDSCAPE:
		{
			AST tmp2407_AST_in = (AST)_t;
			match(_t,LANDSCAPE);
			_t = _t.getNextSibling();
			break;
		}
		case LANGUAGES:
		{
			AST tmp2408_AST_in = (AST)_t;
			match(_t,LANGUAGES);
			_t = _t.getNextSibling();
			break;
		}
		case LARGE:
		{
			AST tmp2409_AST_in = (AST)_t;
			match(_t,LARGE);
			_t = _t.getNextSibling();
			break;
		}
		case LARGETOSMALL:
		{
			AST tmp2410_AST_in = (AST)_t;
			match(_t,LARGETOSMALL);
			_t = _t.getNextSibling();
			break;
		}
		case LAST:
		{
			AST tmp2411_AST_in = (AST)_t;
			match(_t,LAST);
			_t = _t.getNextSibling();
			break;
		}
		case LASTEVENT:
		{
			AST tmp2412_AST_in = (AST)_t;
			match(_t,LASTEVENT);
			_t = _t.getNextSibling();
			break;
		}
		case LASTOF:
		{
			AST tmp2413_AST_in = (AST)_t;
			match(_t,LASTOF);
			_t = _t.getNextSibling();
			break;
		}
		case LASTKEY:
		{
			AST tmp2414_AST_in = (AST)_t;
			match(_t,LASTKEY);
			_t = _t.getNextSibling();
			break;
		}
		case LC:
		{
			AST tmp2415_AST_in = (AST)_t;
			match(_t,LC);
			_t = _t.getNextSibling();
			break;
		}
		case LDBNAME:
		{
			AST tmp2416_AST_in = (AST)_t;
			match(_t,LDBNAME);
			_t = _t.getNextSibling();
			break;
		}
		case LE:
		{
			AST tmp2417_AST_in = (AST)_t;
			match(_t,LE);
			_t = _t.getNextSibling();
			break;
		}
		case LEAVE:
		{
			AST tmp2418_AST_in = (AST)_t;
			match(_t,LEAVE);
			_t = _t.getNextSibling();
			break;
		}
		case LEFT:
		{
			AST tmp2419_AST_in = (AST)_t;
			match(_t,LEFT);
			_t = _t.getNextSibling();
			break;
		}
		case LEFTALIGNED:
		{
			AST tmp2420_AST_in = (AST)_t;
			match(_t,LEFTALIGNED);
			_t = _t.getNextSibling();
			break;
		}
		case LEFTTRIM:
		{
			AST tmp2421_AST_in = (AST)_t;
			match(_t,LEFTTRIM);
			_t = _t.getNextSibling();
			break;
		}
		case LENGTH:
		{
			AST tmp2422_AST_in = (AST)_t;
			match(_t,LENGTH);
			_t = _t.getNextSibling();
			break;
		}
		case LIBRARY:
		{
			AST tmp2423_AST_in = (AST)_t;
			match(_t,LIBRARY);
			_t = _t.getNextSibling();
			break;
		}
		case LIKE:
		{
			AST tmp2424_AST_in = (AST)_t;
			match(_t,LIKE);
			_t = _t.getNextSibling();
			break;
		}
		case LINECOUNTER:
		{
			AST tmp2425_AST_in = (AST)_t;
			match(_t,LINECOUNTER);
			_t = _t.getNextSibling();
			break;
		}
		case LISTEVENTS:
		{
			AST tmp2426_AST_in = (AST)_t;
			match(_t,LISTEVENTS);
			_t = _t.getNextSibling();
			break;
		}
		case LISTITEMPAIRS:
		{
			AST tmp2427_AST_in = (AST)_t;
			match(_t,LISTITEMPAIRS);
			_t = _t.getNextSibling();
			break;
		}
		case LISTITEMS:
		{
			AST tmp2428_AST_in = (AST)_t;
			match(_t,LISTITEMS);
			_t = _t.getNextSibling();
			break;
		}
		case LISTQUERYATTRS:
		{
			AST tmp2429_AST_in = (AST)_t;
			match(_t,LISTQUERYATTRS);
			_t = _t.getNextSibling();
			break;
		}
		case LISTSETATTRS:
		{
			AST tmp2430_AST_in = (AST)_t;
			match(_t,LISTSETATTRS);
			_t = _t.getNextSibling();
			break;
		}
		case LISTWIDGETS:
		{
			AST tmp2431_AST_in = (AST)_t;
			match(_t,LISTWIDGETS);
			_t = _t.getNextSibling();
			break;
		}
		case LISTING:
		{
			AST tmp2432_AST_in = (AST)_t;
			match(_t,LISTING);
			_t = _t.getNextSibling();
			break;
		}
		case LITTLEENDIAN:
		{
			AST tmp2433_AST_in = (AST)_t;
			match(_t,LITTLEENDIAN);
			_t = _t.getNextSibling();
			break;
		}
		case LOAD:
		{
			AST tmp2434_AST_in = (AST)_t;
			match(_t,LOAD);
			_t = _t.getNextSibling();
			break;
		}
		case LOADPICTURE:
		{
			AST tmp2435_AST_in = (AST)_t;
			match(_t,LOADPICTURE);
			_t = _t.getNextSibling();
			break;
		}
		case LOBDIR:
		{
			AST tmp2436_AST_in = (AST)_t;
			match(_t,LOBDIR);
			_t = _t.getNextSibling();
			break;
		}
		case LOCKED:
		{
			AST tmp2437_AST_in = (AST)_t;
			match(_t,LOCKED);
			_t = _t.getNextSibling();
			break;
		}
		case LOGMANAGER:
		{
			AST tmp2438_AST_in = (AST)_t;
			match(_t,LOGMANAGER);
			_t = _t.getNextSibling();
			break;
		}
		case LOG:
		{
			AST tmp2439_AST_in = (AST)_t;
			match(_t,LOG);
			_t = _t.getNextSibling();
			break;
		}
		case LOGICAL:
		{
			AST tmp2440_AST_in = (AST)_t;
			match(_t,LOGICAL);
			_t = _t.getNextSibling();
			break;
		}
		case LONG:
		{
			AST tmp2441_AST_in = (AST)_t;
			match(_t,LONG);
			_t = _t.getNextSibling();
			break;
		}
		case LONGCHAR:
		{
			AST tmp2442_AST_in = (AST)_t;
			match(_t,LONGCHAR);
			_t = _t.getNextSibling();
			break;
		}
		case LOOKAHEAD:
		{
			AST tmp2443_AST_in = (AST)_t;
			match(_t,LOOKAHEAD);
			_t = _t.getNextSibling();
			break;
		}
		case LOOKUP:
		{
			AST tmp2444_AST_in = (AST)_t;
			match(_t,LOOKUP);
			_t = _t.getNextSibling();
			break;
		}
		case LTHAN:
		{
			AST tmp2445_AST_in = (AST)_t;
			match(_t,LTHAN);
			_t = _t.getNextSibling();
			break;
		}
		case MACHINECLASS:
		{
			AST tmp2446_AST_in = (AST)_t;
			match(_t,MACHINECLASS);
			_t = _t.getNextSibling();
			break;
		}
		case MAP:
		{
			AST tmp2447_AST_in = (AST)_t;
			match(_t,MAP);
			_t = _t.getNextSibling();
			break;
		}
		case MARGINEXTRA:
		{
			AST tmp2448_AST_in = (AST)_t;
			match(_t,MARGINEXTRA);
			_t = _t.getNextSibling();
			break;
		}
		case MATCHES:
		{
			AST tmp2449_AST_in = (AST)_t;
			match(_t,MATCHES);
			_t = _t.getNextSibling();
			break;
		}
		case MAX:
		{
			AST tmp2450_AST_in = (AST)_t;
			match(_t,MAX);
			_t = _t.getNextSibling();
			break;
		}
		case MAXCHARS:
		{
			AST tmp2451_AST_in = (AST)_t;
			match(_t,MAXCHARS);
			_t = _t.getNextSibling();
			break;
		}
		case MAXROWS:
		{
			AST tmp2452_AST_in = (AST)_t;
			match(_t,MAXROWS);
			_t = _t.getNextSibling();
			break;
		}
		case MAXSIZE:
		{
			AST tmp2453_AST_in = (AST)_t;
			match(_t,MAXSIZE);
			_t = _t.getNextSibling();
			break;
		}
		case MAXVALUE:
		{
			AST tmp2454_AST_in = (AST)_t;
			match(_t,MAXVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case MAXIMIZE:
		{
			AST tmp2455_AST_in = (AST)_t;
			match(_t,MAXIMIZE);
			_t = _t.getNextSibling();
			break;
		}
		case MAXIMUM:
		{
			AST tmp2456_AST_in = (AST)_t;
			match(_t,MAXIMUM);
			_t = _t.getNextSibling();
			break;
		}
		case MEMBER:
		{
			AST tmp2457_AST_in = (AST)_t;
			match(_t,MEMBER);
			_t = _t.getNextSibling();
			break;
		}
		case MEMPTR:
		{
			AST tmp2458_AST_in = (AST)_t;
			match(_t,MEMPTR);
			_t = _t.getNextSibling();
			break;
		}
		case MENU:
		{
			AST tmp2459_AST_in = (AST)_t;
			match(_t,MENU);
			_t = _t.getNextSibling();
			break;
		}
		case MENUITEM:
		{
			AST tmp2460_AST_in = (AST)_t;
			match(_t,MENUITEM);
			_t = _t.getNextSibling();
			break;
		}
		case MENUBAR:
		{
			AST tmp2461_AST_in = (AST)_t;
			match(_t,MENUBAR);
			_t = _t.getNextSibling();
			break;
		}
		case MESSAGE:
		{
			AST tmp2462_AST_in = (AST)_t;
			match(_t,MESSAGE);
			_t = _t.getNextSibling();
			break;
		}
		case MESSAGELINE:
		{
			AST tmp2463_AST_in = (AST)_t;
			match(_t,MESSAGELINE);
			_t = _t.getNextSibling();
			break;
		}
		case MESSAGELINES:
		{
			AST tmp2464_AST_in = (AST)_t;
			match(_t,MESSAGELINES);
			_t = _t.getNextSibling();
			break;
		}
		case MIN:
		{
			AST tmp2465_AST_in = (AST)_t;
			match(_t,MIN);
			_t = _t.getNextSibling();
			break;
		}
		case MINSIZE:
		{
			AST tmp2466_AST_in = (AST)_t;
			match(_t,MINSIZE);
			_t = _t.getNextSibling();
			break;
		}
		case MINVALUE:
		{
			AST tmp2467_AST_in = (AST)_t;
			match(_t,MINVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case MINIMUM:
		{
			AST tmp2468_AST_in = (AST)_t;
			match(_t,MINIMUM);
			_t = _t.getNextSibling();
			break;
		}
		case MODULO:
		{
			AST tmp2469_AST_in = (AST)_t;
			match(_t,MODULO);
			_t = _t.getNextSibling();
			break;
		}
		case MONTH:
		{
			AST tmp2470_AST_in = (AST)_t;
			match(_t,MONTH);
			_t = _t.getNextSibling();
			break;
		}
		case MOUSE:
		{
			AST tmp2471_AST_in = (AST)_t;
			match(_t,MOUSE);
			_t = _t.getNextSibling();
			break;
		}
		case MOUSEPOINTER:
		{
			AST tmp2472_AST_in = (AST)_t;
			match(_t,MOUSEPOINTER);
			_t = _t.getNextSibling();
			break;
		}
		case MPE:
		{
			AST tmp2473_AST_in = (AST)_t;
			match(_t,MPE);
			_t = _t.getNextSibling();
			break;
		}
		case MTIME:
		{
			AST tmp2474_AST_in = (AST)_t;
			match(_t,MTIME);
			_t = _t.getNextSibling();
			break;
		}
		case MULTIPLE:
		{
			AST tmp2475_AST_in = (AST)_t;
			match(_t,MULTIPLE);
			_t = _t.getNextSibling();
			break;
		}
		case MULTIPLEKEY:
		{
			AST tmp2476_AST_in = (AST)_t;
			match(_t,MULTIPLEKEY);
			_t = _t.getNextSibling();
			break;
		}
		case MUSTEXIST:
		{
			AST tmp2477_AST_in = (AST)_t;
			match(_t,MUSTEXIST);
			_t = _t.getNextSibling();
			break;
		}
		case NATIVE:
		{
			AST tmp2478_AST_in = (AST)_t;
			match(_t,NATIVE);
			_t = _t.getNextSibling();
			break;
		}
		case NE:
		{
			AST tmp2479_AST_in = (AST)_t;
			match(_t,NE);
			_t = _t.getNextSibling();
			break;
		}
		case NEW:
		{
			AST tmp2480_AST_in = (AST)_t;
			match(_t,NEW);
			_t = _t.getNextSibling();
			break;
		}
		case NEXT:
		{
			AST tmp2481_AST_in = (AST)_t;
			match(_t,NEXT);
			_t = _t.getNextSibling();
			break;
		}
		case NEXTPROMPT:
		{
			AST tmp2482_AST_in = (AST)_t;
			match(_t,NEXTPROMPT);
			_t = _t.getNextSibling();
			break;
		}
		case NEXTVALUE:
		{
			AST tmp2483_AST_in = (AST)_t;
			match(_t,NEXTVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case NO:
		{
			AST tmp2484_AST_in = (AST)_t;
			match(_t,NO);
			_t = _t.getNextSibling();
			break;
		}
		case NOAPPLY:
		{
			AST tmp2485_AST_in = (AST)_t;
			match(_t,NOAPPLY);
			_t = _t.getNextSibling();
			break;
		}
		case NOARRAYMESSAGE:
		{
			AST tmp2486_AST_in = (AST)_t;
			match(_t,NOARRAYMESSAGE);
			_t = _t.getNextSibling();
			break;
		}
		case NOASSIGN:
		{
			AST tmp2487_AST_in = (AST)_t;
			match(_t,NOASSIGN);
			_t = _t.getNextSibling();
			break;
		}
		case NOATTRLIST:
		{
			AST tmp2488_AST_in = (AST)_t;
			match(_t,NOATTRLIST);
			_t = _t.getNextSibling();
			break;
		}
		case NOATTRSPACE:
		{
			AST tmp2489_AST_in = (AST)_t;
			match(_t,NOATTRSPACE);
			_t = _t.getNextSibling();
			break;
		}
		case NOAUTOVALIDATE:
		{
			AST tmp2490_AST_in = (AST)_t;
			match(_t,NOAUTOVALIDATE);
			_t = _t.getNextSibling();
			break;
		}
		case NOBINDWHERE:
		{
			AST tmp2491_AST_in = (AST)_t;
			match(_t,NOBINDWHERE);
			_t = _t.getNextSibling();
			break;
		}
		case NOBOX:
		{
			AST tmp2492_AST_in = (AST)_t;
			match(_t,NOBOX);
			_t = _t.getNextSibling();
			break;
		}
		case NOCOLUMNSCROLLING:
		{
			AST tmp2493_AST_in = (AST)_t;
			match(_t,NOCOLUMNSCROLLING);
			_t = _t.getNextSibling();
			break;
		}
		case NOCONSOLE:
		{
			AST tmp2494_AST_in = (AST)_t;
			match(_t,NOCONSOLE);
			_t = _t.getNextSibling();
			break;
		}
		case NOCONVERT:
		{
			AST tmp2495_AST_in = (AST)_t;
			match(_t,NOCONVERT);
			_t = _t.getNextSibling();
			break;
		}
		case NOCONVERT3DCOLORS:
		{
			AST tmp2496_AST_in = (AST)_t;
			match(_t,NOCONVERT3DCOLORS);
			_t = _t.getNextSibling();
			break;
		}
		case NOCURRENTVALUE:
		{
			AST tmp2497_AST_in = (AST)_t;
			match(_t,NOCURRENTVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case NODEBUG:
		{
			AST tmp2498_AST_in = (AST)_t;
			match(_t,NODEBUG);
			_t = _t.getNextSibling();
			break;
		}
		case NODRAG:
		{
			AST tmp2499_AST_in = (AST)_t;
			match(_t,NODRAG);
			_t = _t.getNextSibling();
			break;
		}
		case NOECHO:
		{
			AST tmp2500_AST_in = (AST)_t;
			match(_t,NOECHO);
			_t = _t.getNextSibling();
			break;
		}
		case NOEMPTYSPACE:
		{
			AST tmp2501_AST_in = (AST)_t;
			match(_t,NOEMPTYSPACE);
			_t = _t.getNextSibling();
			break;
		}
		case NOERROR_KW:
		{
			AST tmp2502_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case NOFILL:
		{
			AST tmp2503_AST_in = (AST)_t;
			match(_t,NOFILL);
			_t = _t.getNextSibling();
			break;
		}
		case NOFOCUS:
		{
			AST tmp2504_AST_in = (AST)_t;
			match(_t,NOFOCUS);
			_t = _t.getNextSibling();
			break;
		}
		case NOHELP:
		{
			AST tmp2505_AST_in = (AST)_t;
			match(_t,NOHELP);
			_t = _t.getNextSibling();
			break;
		}
		case NOHIDE:
		{
			AST tmp2506_AST_in = (AST)_t;
			match(_t,NOHIDE);
			_t = _t.getNextSibling();
			break;
		}
		case NOINDEXHINT:
		{
			AST tmp2507_AST_in = (AST)_t;
			match(_t,NOINDEXHINT);
			_t = _t.getNextSibling();
			break;
		}
		case NOJOINBYSQLDB:
		{
			AST tmp2508_AST_in = (AST)_t;
			match(_t,NOJOINBYSQLDB);
			_t = _t.getNextSibling();
			break;
		}
		case NOLABELS:
		{
			AST tmp2509_AST_in = (AST)_t;
			match(_t,NOLABELS);
			_t = _t.getNextSibling();
			break;
		}
		case NOLOBS:
		{
			AST tmp2510_AST_in = (AST)_t;
			match(_t,NOLOBS);
			_t = _t.getNextSibling();
			break;
		}
		case NOLOCK:
		{
			AST tmp2511_AST_in = (AST)_t;
			match(_t,NOLOCK);
			_t = _t.getNextSibling();
			break;
		}
		case NOLOOKAHEAD:
		{
			AST tmp2512_AST_in = (AST)_t;
			match(_t,NOLOOKAHEAD);
			_t = _t.getNextSibling();
			break;
		}
		case NOMAP:
		{
			AST tmp2513_AST_in = (AST)_t;
			match(_t,NOMAP);
			_t = _t.getNextSibling();
			break;
		}
		case NOMESSAGE:
		{
			AST tmp2514_AST_in = (AST)_t;
			match(_t,NOMESSAGE);
			_t = _t.getNextSibling();
			break;
		}
		case NONE:
		{
			AST tmp2515_AST_in = (AST)_t;
			match(_t,NONE);
			_t = _t.getNextSibling();
			break;
		}
		case NOPAUSE:
		{
			AST tmp2516_AST_in = (AST)_t;
			match(_t,NOPAUSE);
			_t = _t.getNextSibling();
			break;
		}
		case NOPREFETCH:
		{
			AST tmp2517_AST_in = (AST)_t;
			match(_t,NOPREFETCH);
			_t = _t.getNextSibling();
			break;
		}
		case NORETURNVALUE:
		{
			AST tmp2518_AST_in = (AST)_t;
			match(_t,NORETURNVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case NORMAL:
		{
			AST tmp2519_AST_in = (AST)_t;
			match(_t,NORMAL);
			_t = _t.getNextSibling();
			break;
		}
		case NOROWMARKERS:
		{
			AST tmp2520_AST_in = (AST)_t;
			match(_t,NOROWMARKERS);
			_t = _t.getNextSibling();
			break;
		}
		case NOSCROLLBARVERTICAL:
		{
			AST tmp2521_AST_in = (AST)_t;
			match(_t,NOSCROLLBARVERTICAL);
			_t = _t.getNextSibling();
			break;
		}
		case NOSEPARATECONNECTION:
		{
			AST tmp2522_AST_in = (AST)_t;
			match(_t,NOSEPARATECONNECTION);
			_t = _t.getNextSibling();
			break;
		}
		case NOSEPARATORS:
		{
			AST tmp2523_AST_in = (AST)_t;
			match(_t,NOSEPARATORS);
			_t = _t.getNextSibling();
			break;
		}
		case NOTABSTOP:
		{
			AST tmp2524_AST_in = (AST)_t;
			match(_t,NOTABSTOP);
			_t = _t.getNextSibling();
			break;
		}
		case NOUNDERLINE:
		{
			AST tmp2525_AST_in = (AST)_t;
			match(_t,NOUNDERLINE);
			_t = _t.getNextSibling();
			break;
		}
		case NOUNDO:
		{
			AST tmp2526_AST_in = (AST)_t;
			match(_t,NOUNDO);
			_t = _t.getNextSibling();
			break;
		}
		case NOVALIDATE:
		{
			AST tmp2527_AST_in = (AST)_t;
			match(_t,NOVALIDATE);
			_t = _t.getNextSibling();
			break;
		}
		case NOWAIT:
		{
			AST tmp2528_AST_in = (AST)_t;
			match(_t,NOWAIT);
			_t = _t.getNextSibling();
			break;
		}
		case NOWORDWRAP:
		{
			AST tmp2529_AST_in = (AST)_t;
			match(_t,NOWORDWRAP);
			_t = _t.getNextSibling();
			break;
		}
		case NOT:
		{
			AST tmp2530_AST_in = (AST)_t;
			match(_t,NOT);
			_t = _t.getNextSibling();
			break;
		}
		case NOW:
		{
			AST tmp2531_AST_in = (AST)_t;
			match(_t,NOW);
			_t = _t.getNextSibling();
			break;
		}
		case NULL_KW:
		{
			AST tmp2532_AST_in = (AST)_t;
			match(_t,NULL_KW);
			_t = _t.getNextSibling();
			break;
		}
		case NUMALIASES:
		{
			AST tmp2533_AST_in = (AST)_t;
			match(_t,NUMALIASES);
			_t = _t.getNextSibling();
			break;
		}
		case NUMCOPIES:
		{
			AST tmp2534_AST_in = (AST)_t;
			match(_t,NUMCOPIES);
			_t = _t.getNextSibling();
			break;
		}
		case NUMDBS:
		{
			AST tmp2535_AST_in = (AST)_t;
			match(_t,NUMDBS);
			_t = _t.getNextSibling();
			break;
		}
		case NUMENTRIES:
		{
			AST tmp2536_AST_in = (AST)_t;
			match(_t,NUMENTRIES);
			_t = _t.getNextSibling();
			break;
		}
		case NUMRESULTS:
		{
			AST tmp2537_AST_in = (AST)_t;
			match(_t,NUMRESULTS);
			_t = _t.getNextSibling();
			break;
		}
		case NUMERIC:
		{
			AST tmp2538_AST_in = (AST)_t;
			match(_t,NUMERIC);
			_t = _t.getNextSibling();
			break;
		}
		case OBJECT:
		{
			AST tmp2539_AST_in = (AST)_t;
			match(_t,OBJECT);
			_t = _t.getNextSibling();
			break;
		}
		case OCTETLENGTH:
		{
			AST tmp2540_AST_in = (AST)_t;
			match(_t,OCTETLENGTH);
			_t = _t.getNextSibling();
			break;
		}
		case OF:
		{
			AST tmp2541_AST_in = (AST)_t;
			match(_t,OF);
			_t = _t.getNextSibling();
			break;
		}
		case OFF:
		{
			AST tmp2542_AST_in = (AST)_t;
			match(_t,OFF);
			_t = _t.getNextSibling();
			break;
		}
		case OK:
		{
			AST tmp2543_AST_in = (AST)_t;
			match(_t,OK);
			_t = _t.getNextSibling();
			break;
		}
		case OKCANCEL:
		{
			AST tmp2544_AST_in = (AST)_t;
			match(_t,OKCANCEL);
			_t = _t.getNextSibling();
			break;
		}
		case OLD:
		{
			AST tmp2545_AST_in = (AST)_t;
			match(_t,OLD);
			_t = _t.getNextSibling();
			break;
		}
		case ON:
		{
			AST tmp2546_AST_in = (AST)_t;
			match(_t,ON);
			_t = _t.getNextSibling();
			break;
		}
		case ONLY:
		{
			AST tmp2547_AST_in = (AST)_t;
			match(_t,ONLY);
			_t = _t.getNextSibling();
			break;
		}
		case OPEN:
		{
			AST tmp2548_AST_in = (AST)_t;
			match(_t,OPEN);
			_t = _t.getNextSibling();
			break;
		}
		case OPSYS:
		{
			AST tmp2549_AST_in = (AST)_t;
			match(_t,OPSYS);
			_t = _t.getNextSibling();
			break;
		}
		case OPTION:
		{
			AST tmp2550_AST_in = (AST)_t;
			match(_t,OPTION);
			_t = _t.getNextSibling();
			break;
		}
		case OR:
		{
			AST tmp2551_AST_in = (AST)_t;
			match(_t,OR);
			_t = _t.getNextSibling();
			break;
		}
		case ORDER:
		{
			AST tmp2552_AST_in = (AST)_t;
			match(_t,ORDER);
			_t = _t.getNextSibling();
			break;
		}
		case ORDEREDJOIN:
		{
			AST tmp2553_AST_in = (AST)_t;
			match(_t,ORDEREDJOIN);
			_t = _t.getNextSibling();
			break;
		}
		case ORDINAL:
		{
			AST tmp2554_AST_in = (AST)_t;
			match(_t,ORDINAL);
			_t = _t.getNextSibling();
			break;
		}
		case OS2:
		{
			AST tmp2555_AST_in = (AST)_t;
			match(_t,OS2);
			_t = _t.getNextSibling();
			break;
		}
		case OS400:
		{
			AST tmp2556_AST_in = (AST)_t;
			match(_t,OS400);
			_t = _t.getNextSibling();
			break;
		}
		case OSAPPEND:
		{
			AST tmp2557_AST_in = (AST)_t;
			match(_t,OSAPPEND);
			_t = _t.getNextSibling();
			break;
		}
		case OSCOMMAND:
		{
			AST tmp2558_AST_in = (AST)_t;
			match(_t,OSCOMMAND);
			_t = _t.getNextSibling();
			break;
		}
		case OSCOPY:
		{
			AST tmp2559_AST_in = (AST)_t;
			match(_t,OSCOPY);
			_t = _t.getNextSibling();
			break;
		}
		case OSCREATEDIR:
		{
			AST tmp2560_AST_in = (AST)_t;
			match(_t,OSCREATEDIR);
			_t = _t.getNextSibling();
			break;
		}
		case OSDELETE:
		{
			AST tmp2561_AST_in = (AST)_t;
			match(_t,OSDELETE);
			_t = _t.getNextSibling();
			break;
		}
		case OSDIR:
		{
			AST tmp2562_AST_in = (AST)_t;
			match(_t,OSDIR);
			_t = _t.getNextSibling();
			break;
		}
		case OSDRIVES:
		{
			AST tmp2563_AST_in = (AST)_t;
			match(_t,OSDRIVES);
			_t = _t.getNextSibling();
			break;
		}
		case OSERROR:
		{
			AST tmp2564_AST_in = (AST)_t;
			match(_t,OSERROR);
			_t = _t.getNextSibling();
			break;
		}
		case OSGETENV:
		{
			AST tmp2565_AST_in = (AST)_t;
			match(_t,OSGETENV);
			_t = _t.getNextSibling();
			break;
		}
		case OSRENAME:
		{
			AST tmp2566_AST_in = (AST)_t;
			match(_t,OSRENAME);
			_t = _t.getNextSibling();
			break;
		}
		case OTHERWISE:
		{
			AST tmp2567_AST_in = (AST)_t;
			match(_t,OTHERWISE);
			_t = _t.getNextSibling();
			break;
		}
		case OUTER:
		{
			AST tmp2568_AST_in = (AST)_t;
			match(_t,OUTER);
			_t = _t.getNextSibling();
			break;
		}
		case OUTERJOIN:
		{
			AST tmp2569_AST_in = (AST)_t;
			match(_t,OUTERJOIN);
			_t = _t.getNextSibling();
			break;
		}
		case OUTPUT:
		{
			AST tmp2570_AST_in = (AST)_t;
			match(_t,OUTPUT);
			_t = _t.getNextSibling();
			break;
		}
		case OVERLAY:
		{
			AST tmp2571_AST_in = (AST)_t;
			match(_t,OVERLAY);
			_t = _t.getNextSibling();
			break;
		}
		case OVERRIDE:
		{
			AST tmp2572_AST_in = (AST)_t;
			match(_t,OVERRIDE);
			_t = _t.getNextSibling();
			break;
		}
		case PAGE:
		{
			AST tmp2573_AST_in = (AST)_t;
			match(_t,PAGE);
			_t = _t.getNextSibling();
			break;
		}
		case PAGEBOTTOM:
		{
			AST tmp2574_AST_in = (AST)_t;
			match(_t,PAGEBOTTOM);
			_t = _t.getNextSibling();
			break;
		}
		case PAGENUMBER:
		{
			AST tmp2575_AST_in = (AST)_t;
			match(_t,PAGENUMBER);
			_t = _t.getNextSibling();
			break;
		}
		case PAGESIZE_KW:
		{
			AST tmp2576_AST_in = (AST)_t;
			match(_t,PAGESIZE_KW);
			_t = _t.getNextSibling();
			break;
		}
		case PAGETOP:
		{
			AST tmp2577_AST_in = (AST)_t;
			match(_t,PAGETOP);
			_t = _t.getNextSibling();
			break;
		}
		case PAGEWIDTH:
		{
			AST tmp2578_AST_in = (AST)_t;
			match(_t,PAGEWIDTH);
			_t = _t.getNextSibling();
			break;
		}
		case PAGED:
		{
			AST tmp2579_AST_in = (AST)_t;
			match(_t,PAGED);
			_t = _t.getNextSibling();
			break;
		}
		case PARAMETER:
		{
			AST tmp2580_AST_in = (AST)_t;
			match(_t,PARAMETER);
			_t = _t.getNextSibling();
			break;
		}
		case PARENT:
		{
			AST tmp2581_AST_in = (AST)_t;
			match(_t,PARENT);
			_t = _t.getNextSibling();
			break;
		}
		case PARTIALKEY:
		{
			AST tmp2582_AST_in = (AST)_t;
			match(_t,PARTIALKEY);
			_t = _t.getNextSibling();
			break;
		}
		case PASCAL_KW:
		{
			AST tmp2583_AST_in = (AST)_t;
			match(_t,PASCAL_KW);
			_t = _t.getNextSibling();
			break;
		}
		case PAUSE:
		{
			AST tmp2584_AST_in = (AST)_t;
			match(_t,PAUSE);
			_t = _t.getNextSibling();
			break;
		}
		case PDBNAME:
		{
			AST tmp2585_AST_in = (AST)_t;
			match(_t,PDBNAME);
			_t = _t.getNextSibling();
			break;
		}
		case PERFORMANCE:
		{
			AST tmp2586_AST_in = (AST)_t;
			match(_t,PERFORMANCE);
			_t = _t.getNextSibling();
			break;
		}
		case PERSISTENT:
		{
			AST tmp2587_AST_in = (AST)_t;
			match(_t,PERSISTENT);
			_t = _t.getNextSibling();
			break;
		}
		case PFCOLOR:
		{
			AST tmp2588_AST_in = (AST)_t;
			match(_t,PFCOLOR);
			_t = _t.getNextSibling();
			break;
		}
		case PINNABLE:
		{
			AST tmp2589_AST_in = (AST)_t;
			match(_t,PINNABLE);
			_t = _t.getNextSibling();
			break;
		}
		case PORTRAIT:
		{
			AST tmp2590_AST_in = (AST)_t;
			match(_t,PORTRAIT);
			_t = _t.getNextSibling();
			break;
		}
		case POSITION:
		{
			AST tmp2591_AST_in = (AST)_t;
			match(_t,POSITION);
			_t = _t.getNextSibling();
			break;
		}
		case PRECISION:
		{
			AST tmp2592_AST_in = (AST)_t;
			match(_t,PRECISION);
			_t = _t.getNextSibling();
			break;
		}
		case PREPROCESS:
		{
			AST tmp2593_AST_in = (AST)_t;
			match(_t,PREPROCESS);
			_t = _t.getNextSibling();
			break;
		}
		case PRESELECT:
		{
			AST tmp2594_AST_in = (AST)_t;
			match(_t,PRESELECT);
			_t = _t.getNextSibling();
			break;
		}
		case PREV:
		{
			AST tmp2595_AST_in = (AST)_t;
			match(_t,PREV);
			_t = _t.getNextSibling();
			break;
		}
		case PRIMARY:
		{
			AST tmp2596_AST_in = (AST)_t;
			match(_t,PRIMARY);
			_t = _t.getNextSibling();
			break;
		}
		case PRINTER:
		{
			AST tmp2597_AST_in = (AST)_t;
			match(_t,PRINTER);
			_t = _t.getNextSibling();
			break;
		}
		case PRINTERSETUP:
		{
			AST tmp2598_AST_in = (AST)_t;
			match(_t,PRINTERSETUP);
			_t = _t.getNextSibling();
			break;
		}
		case PRIVATE:
		{
			AST tmp2599_AST_in = (AST)_t;
			match(_t,PRIVATE);
			_t = _t.getNextSibling();
			break;
		}
		case PRIVILEGES:
		{
			AST tmp2600_AST_in = (AST)_t;
			match(_t,PRIVILEGES);
			_t = _t.getNextSibling();
			break;
		}
		case PROCEDURECALLTYPE:
		{
			AST tmp2601_AST_in = (AST)_t;
			match(_t,PROCEDURECALLTYPE);
			_t = _t.getNextSibling();
			break;
		}
		case PROCTEXT:
		{
			AST tmp2602_AST_in = (AST)_t;
			match(_t,PROCTEXT);
			_t = _t.getNextSibling();
			break;
		}
		case PROCTEXTBUFFER:
		{
			AST tmp2603_AST_in = (AST)_t;
			match(_t,PROCTEXTBUFFER);
			_t = _t.getNextSibling();
			break;
		}
		case PROCHANDLE:
		{
			AST tmp2604_AST_in = (AST)_t;
			match(_t,PROCHANDLE);
			_t = _t.getNextSibling();
			break;
		}
		case PROCSTATUS:
		{
			AST tmp2605_AST_in = (AST)_t;
			match(_t,PROCSTATUS);
			_t = _t.getNextSibling();
			break;
		}
		case PROCEDURE:
		{
			AST tmp2606_AST_in = (AST)_t;
			match(_t,PROCEDURE);
			_t = _t.getNextSibling();
			break;
		}
		case PROCESS:
		{
			AST tmp2607_AST_in = (AST)_t;
			match(_t,PROCESS);
			_t = _t.getNextSibling();
			break;
		}
		case PROFILER:
		{
			AST tmp2608_AST_in = (AST)_t;
			match(_t,PROFILER);
			_t = _t.getNextSibling();
			break;
		}
		case PROGRAMNAME:
		{
			AST tmp2609_AST_in = (AST)_t;
			match(_t,PROGRAMNAME);
			_t = _t.getNextSibling();
			break;
		}
		case PROGRESS:
		{
			AST tmp2610_AST_in = (AST)_t;
			match(_t,PROGRESS);
			_t = _t.getNextSibling();
			break;
		}
		case PROMPT:
		{
			AST tmp2611_AST_in = (AST)_t;
			match(_t,PROMPT);
			_t = _t.getNextSibling();
			break;
		}
		case PROMPTFOR:
		{
			AST tmp2612_AST_in = (AST)_t;
			match(_t,PROMPTFOR);
			_t = _t.getNextSibling();
			break;
		}
		case PROMSGS:
		{
			AST tmp2613_AST_in = (AST)_t;
			match(_t,PROMSGS);
			_t = _t.getNextSibling();
			break;
		}
		case PROPATH:
		{
			AST tmp2614_AST_in = (AST)_t;
			match(_t,PROPATH);
			_t = _t.getNextSibling();
			break;
		}
		case PROVERSION:
		{
			AST tmp2615_AST_in = (AST)_t;
			match(_t,PROVERSION);
			_t = _t.getNextSibling();
			break;
		}
		case PUBLIC:
		{
			AST tmp2616_AST_in = (AST)_t;
			match(_t,PUBLIC);
			_t = _t.getNextSibling();
			break;
		}
		case PUBLISH:
		{
			AST tmp2617_AST_in = (AST)_t;
			match(_t,PUBLISH);
			_t = _t.getNextSibling();
			break;
		}
		case PUT:
		{
			AST tmp2618_AST_in = (AST)_t;
			match(_t,PUT);
			_t = _t.getNextSibling();
			break;
		}
		case PUTBITS:
		{
			AST tmp2619_AST_in = (AST)_t;
			match(_t,PUTBITS);
			_t = _t.getNextSibling();
			break;
		}
		case PUTBYTE:
		{
			AST tmp2620_AST_in = (AST)_t;
			match(_t,PUTBYTE);
			_t = _t.getNextSibling();
			break;
		}
		case PUTBYTES:
		{
			AST tmp2621_AST_in = (AST)_t;
			match(_t,PUTBYTES);
			_t = _t.getNextSibling();
			break;
		}
		case PUTDOUBLE:
		{
			AST tmp2622_AST_in = (AST)_t;
			match(_t,PUTDOUBLE);
			_t = _t.getNextSibling();
			break;
		}
		case PUTFLOAT:
		{
			AST tmp2623_AST_in = (AST)_t;
			match(_t,PUTFLOAT);
			_t = _t.getNextSibling();
			break;
		}
		case PUTKEYVALUE:
		{
			AST tmp2624_AST_in = (AST)_t;
			match(_t,PUTKEYVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case PUTLONG:
		{
			AST tmp2625_AST_in = (AST)_t;
			match(_t,PUTLONG);
			_t = _t.getNextSibling();
			break;
		}
		case PUTSHORT:
		{
			AST tmp2626_AST_in = (AST)_t;
			match(_t,PUTSHORT);
			_t = _t.getNextSibling();
			break;
		}
		case PUTSTRING:
		{
			AST tmp2627_AST_in = (AST)_t;
			match(_t,PUTSTRING);
			_t = _t.getNextSibling();
			break;
		}
		case QUERY:
		{
			AST tmp2628_AST_in = (AST)_t;
			match(_t,QUERY);
			_t = _t.getNextSibling();
			break;
		}
		case QUERYCLOSE:
		{
			AST tmp2629_AST_in = (AST)_t;
			match(_t,QUERYCLOSE);
			_t = _t.getNextSibling();
			break;
		}
		case QUERYOFFEND:
		{
			AST tmp2630_AST_in = (AST)_t;
			match(_t,QUERYOFFEND);
			_t = _t.getNextSibling();
			break;
		}
		case QUERYTUNING:
		{
			AST tmp2631_AST_in = (AST)_t;
			match(_t,QUERYTUNING);
			_t = _t.getNextSibling();
			break;
		}
		case QUESTION:
		{
			AST tmp2632_AST_in = (AST)_t;
			match(_t,QUESTION);
			_t = _t.getNextSibling();
			break;
		}
		case QUIT:
		{
			AST tmp2633_AST_in = (AST)_t;
			match(_t,QUIT);
			_t = _t.getNextSibling();
			break;
		}
		case QUOTER:
		{
			AST tmp2634_AST_in = (AST)_t;
			match(_t,QUOTER);
			_t = _t.getNextSibling();
			break;
		}
		case RINDEX:
		{
			AST tmp2635_AST_in = (AST)_t;
			match(_t,RINDEX);
			_t = _t.getNextSibling();
			break;
		}
		case RADIOBUTTONS:
		{
			AST tmp2636_AST_in = (AST)_t;
			match(_t,RADIOBUTTONS);
			_t = _t.getNextSibling();
			break;
		}
		case RADIOSET:
		{
			AST tmp2637_AST_in = (AST)_t;
			match(_t,RADIOSET);
			_t = _t.getNextSibling();
			break;
		}
		case RANDOM:
		{
			AST tmp2638_AST_in = (AST)_t;
			match(_t,RANDOM);
			_t = _t.getNextSibling();
			break;
		}
		case RAW:
		{
			AST tmp2639_AST_in = (AST)_t;
			match(_t,RAW);
			_t = _t.getNextSibling();
			break;
		}
		case RAWTRANSFER:
		{
			AST tmp2640_AST_in = (AST)_t;
			match(_t,RAWTRANSFER);
			_t = _t.getNextSibling();
			break;
		}
		case RCODEINFORMATION:
		{
			AST tmp2641_AST_in = (AST)_t;
			match(_t,RCODEINFORMATION);
			_t = _t.getNextSibling();
			break;
		}
		case READ:
		{
			AST tmp2642_AST_in = (AST)_t;
			match(_t,READ);
			_t = _t.getNextSibling();
			break;
		}
		case READAVAILABLE:
		{
			AST tmp2643_AST_in = (AST)_t;
			match(_t,READAVAILABLE);
			_t = _t.getNextSibling();
			break;
		}
		case READEXACTNUM:
		{
			AST tmp2644_AST_in = (AST)_t;
			match(_t,READEXACTNUM);
			_t = _t.getNextSibling();
			break;
		}
		case READONLY:
		{
			AST tmp2645_AST_in = (AST)_t;
			match(_t,READONLY);
			_t = _t.getNextSibling();
			break;
		}
		case READKEY:
		{
			AST tmp2646_AST_in = (AST)_t;
			match(_t,READKEY);
			_t = _t.getNextSibling();
			break;
		}
		case REAL:
		{
			AST tmp2647_AST_in = (AST)_t;
			match(_t,REAL);
			_t = _t.getNextSibling();
			break;
		}
		case RECID:
		{
			AST tmp2648_AST_in = (AST)_t;
			match(_t,RECID);
			_t = _t.getNextSibling();
			break;
		}
		case RECORDLENGTH:
		{
			AST tmp2649_AST_in = (AST)_t;
			match(_t,RECORDLENGTH);
			_t = _t.getNextSibling();
			break;
		}
		case RECTANGLE:
		{
			AST tmp2650_AST_in = (AST)_t;
			match(_t,RECTANGLE);
			_t = _t.getNextSibling();
			break;
		}
		case RECURSIVE:
		{
			AST tmp2651_AST_in = (AST)_t;
			match(_t,RECURSIVE);
			_t = _t.getNextSibling();
			break;
		}
		case RELATIONFIELDS:
		{
			AST tmp2652_AST_in = (AST)_t;
			match(_t,RELATIONFIELDS);
			_t = _t.getNextSibling();
			break;
		}
		case RELEASE:
		{
			AST tmp2653_AST_in = (AST)_t;
			match(_t,RELEASE);
			_t = _t.getNextSibling();
			break;
		}
		case REPEAT:
		{
			AST tmp2654_AST_in = (AST)_t;
			match(_t,REPEAT);
			_t = _t.getNextSibling();
			break;
		}
		case REPLACE:
		{
			AST tmp2655_AST_in = (AST)_t;
			match(_t,REPLACE);
			_t = _t.getNextSibling();
			break;
		}
		case REPLICATIONCREATE:
		{
			AST tmp2656_AST_in = (AST)_t;
			match(_t,REPLICATIONCREATE);
			_t = _t.getNextSibling();
			break;
		}
		case REPLICATIONDELETE:
		{
			AST tmp2657_AST_in = (AST)_t;
			match(_t,REPLICATIONDELETE);
			_t = _t.getNextSibling();
			break;
		}
		case REPLICATIONWRITE:
		{
			AST tmp2658_AST_in = (AST)_t;
			match(_t,REPLICATIONWRITE);
			_t = _t.getNextSibling();
			break;
		}
		case REPOSITION:
		{
			AST tmp2659_AST_in = (AST)_t;
			match(_t,REPOSITION);
			_t = _t.getNextSibling();
			break;
		}
		case REPOSITIONFORWARD:
		{
			AST tmp2660_AST_in = (AST)_t;
			match(_t,REPOSITIONFORWARD);
			_t = _t.getNextSibling();
			break;
		}
		case REPOSITIONBACKWARD:
		{
			AST tmp2661_AST_in = (AST)_t;
			match(_t,REPOSITIONBACKWARD);
			_t = _t.getNextSibling();
			break;
		}
		case REPOSITIONTOROW:
		{
			AST tmp2662_AST_in = (AST)_t;
			match(_t,REPOSITIONTOROW);
			_t = _t.getNextSibling();
			break;
		}
		case REPOSITIONTOROWID:
		{
			AST tmp2663_AST_in = (AST)_t;
			match(_t,REPOSITIONTOROWID);
			_t = _t.getNextSibling();
			break;
		}
		case REQUEST:
		{
			AST tmp2664_AST_in = (AST)_t;
			match(_t,REQUEST);
			_t = _t.getNextSibling();
			break;
		}
		case RESULT:
		{
			AST tmp2665_AST_in = (AST)_t;
			match(_t,RESULT);
			_t = _t.getNextSibling();
			break;
		}
		case RETAIN:
		{
			AST tmp2666_AST_in = (AST)_t;
			match(_t,RETAIN);
			_t = _t.getNextSibling();
			break;
		}
		case RETAINSHAPE:
		{
			AST tmp2667_AST_in = (AST)_t;
			match(_t,RETAINSHAPE);
			_t = _t.getNextSibling();
			break;
		}
		case RETRY:
		{
			AST tmp2668_AST_in = (AST)_t;
			match(_t,RETRY);
			_t = _t.getNextSibling();
			break;
		}
		case RETRYCANCEL:
		{
			AST tmp2669_AST_in = (AST)_t;
			match(_t,RETRYCANCEL);
			_t = _t.getNextSibling();
			break;
		}
		case RETURN:
		{
			AST tmp2670_AST_in = (AST)_t;
			match(_t,RETURN);
			_t = _t.getNextSibling();
			break;
		}
		case RETURNTOSTARTDIR:
		{
			AST tmp2671_AST_in = (AST)_t;
			match(_t,RETURNTOSTARTDIR);
			_t = _t.getNextSibling();
			break;
		}
		case RETURNVALUE:
		{
			AST tmp2672_AST_in = (AST)_t;
			match(_t,RETURNVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case RETURNS:
		{
			AST tmp2673_AST_in = (AST)_t;
			match(_t,RETURNS);
			_t = _t.getNextSibling();
			break;
		}
		case REVERSEFROM:
		{
			AST tmp2674_AST_in = (AST)_t;
			match(_t,REVERSEFROM);
			_t = _t.getNextSibling();
			break;
		}
		case REVERT:
		{
			AST tmp2675_AST_in = (AST)_t;
			match(_t,REVERT);
			_t = _t.getNextSibling();
			break;
		}
		case REVOKE:
		{
			AST tmp2676_AST_in = (AST)_t;
			match(_t,REVOKE);
			_t = _t.getNextSibling();
			break;
		}
		case RGBVALUE:
		{
			AST tmp2677_AST_in = (AST)_t;
			match(_t,RGBVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case RIGHT:
		{
			AST tmp2678_AST_in = (AST)_t;
			match(_t,RIGHT);
			_t = _t.getNextSibling();
			break;
		}
		case RIGHTALIGNED:
		{
			AST tmp2679_AST_in = (AST)_t;
			match(_t,RIGHTALIGNED);
			_t = _t.getNextSibling();
			break;
		}
		case RIGHTTRIM:
		{
			AST tmp2680_AST_in = (AST)_t;
			match(_t,RIGHTTRIM);
			_t = _t.getNextSibling();
			break;
		}
		case ROUND:
		{
			AST tmp2681_AST_in = (AST)_t;
			match(_t,ROUND);
			_t = _t.getNextSibling();
			break;
		}
		case ROW:
		{
			AST tmp2682_AST_in = (AST)_t;
			match(_t,ROW);
			_t = _t.getNextSibling();
			break;
		}
		case ROWHEIGHTCHARS:
		{
			AST tmp2683_AST_in = (AST)_t;
			match(_t,ROWHEIGHTCHARS);
			_t = _t.getNextSibling();
			break;
		}
		case ROWHEIGHTPIXELS:
		{
			AST tmp2684_AST_in = (AST)_t;
			match(_t,ROWHEIGHTPIXELS);
			_t = _t.getNextSibling();
			break;
		}
		case ROWID:
		{
			AST tmp2685_AST_in = (AST)_t;
			match(_t,ROWID);
			_t = _t.getNextSibling();
			break;
		}
		case ROWOF:
		{
			AST tmp2686_AST_in = (AST)_t;
			match(_t,ROWOF);
			_t = _t.getNextSibling();
			break;
		}
		case RULE:
		{
			AST tmp2687_AST_in = (AST)_t;
			match(_t,RULE);
			_t = _t.getNextSibling();
			break;
		}
		case RUN:
		{
			AST tmp2688_AST_in = (AST)_t;
			match(_t,RUN);
			_t = _t.getNextSibling();
			break;
		}
		case RUNPROCEDURE:
		{
			AST tmp2689_AST_in = (AST)_t;
			match(_t,RUNPROCEDURE);
			_t = _t.getNextSibling();
			break;
		}
		case SAVE:
		{
			AST tmp2690_AST_in = (AST)_t;
			match(_t,SAVE);
			_t = _t.getNextSibling();
			break;
		}
		case SAVECACHE:
		{
			AST tmp2691_AST_in = (AST)_t;
			match(_t,SAVECACHE);
			_t = _t.getNextSibling();
			break;
		}
		case SAVEAS:
		{
			AST tmp2692_AST_in = (AST)_t;
			match(_t,SAVEAS);
			_t = _t.getNextSibling();
			break;
		}
		case SAXCOMPLETE:
		{
			AST tmp2693_AST_in = (AST)_t;
			match(_t,SAXCOMPLETE);
			_t = _t.getNextSibling();
			break;
		}
		case SAXPARSERERROR:
		{
			AST tmp2694_AST_in = (AST)_t;
			match(_t,SAXPARSERERROR);
			_t = _t.getNextSibling();
			break;
		}
		case SAXREADER:
		{
			AST tmp2695_AST_in = (AST)_t;
			match(_t,SAXREADER);
			_t = _t.getNextSibling();
			break;
		}
		case SAXRUNNING:
		{
			AST tmp2696_AST_in = (AST)_t;
			match(_t,SAXRUNNING);
			_t = _t.getNextSibling();
			break;
		}
		case SAXUNINITIALIZED:
		{
			AST tmp2697_AST_in = (AST)_t;
			match(_t,SAXUNINITIALIZED);
			_t = _t.getNextSibling();
			break;
		}
		case SCHEMA:
		{
			AST tmp2698_AST_in = (AST)_t;
			match(_t,SCHEMA);
			_t = _t.getNextSibling();
			break;
		}
		case SCREEN:
		{
			AST tmp2699_AST_in = (AST)_t;
			match(_t,SCREEN);
			_t = _t.getNextSibling();
			break;
		}
		case SCREENIO:
		{
			AST tmp2700_AST_in = (AST)_t;
			match(_t,SCREENIO);
			_t = _t.getNextSibling();
			break;
		}
		case SCREENLINES:
		{
			AST tmp2701_AST_in = (AST)_t;
			match(_t,SCREENLINES);
			_t = _t.getNextSibling();
			break;
		}
		case SCROLL:
		{
			AST tmp2702_AST_in = (AST)_t;
			match(_t,SCROLL);
			_t = _t.getNextSibling();
			break;
		}
		case SCROLLABLE:
		{
			AST tmp2703_AST_in = (AST)_t;
			match(_t,SCROLLABLE);
			_t = _t.getNextSibling();
			break;
		}
		case SCROLLBARHORIZONTAL:
		{
			AST tmp2704_AST_in = (AST)_t;
			match(_t,SCROLLBARHORIZONTAL);
			_t = _t.getNextSibling();
			break;
		}
		case SCROLLBARVERTICAL:
		{
			AST tmp2705_AST_in = (AST)_t;
			match(_t,SCROLLBARVERTICAL);
			_t = _t.getNextSibling();
			break;
		}
		case SCROLLING:
		{
			AST tmp2706_AST_in = (AST)_t;
			match(_t,SCROLLING);
			_t = _t.getNextSibling();
			break;
		}
		case SDBNAME:
		{
			AST tmp2707_AST_in = (AST)_t;
			match(_t,SDBNAME);
			_t = _t.getNextSibling();
			break;
		}
		case SEARCH:
		{
			AST tmp2708_AST_in = (AST)_t;
			match(_t,SEARCH);
			_t = _t.getNextSibling();
			break;
		}
		case SEARCHSELF:
		{
			AST tmp2709_AST_in = (AST)_t;
			match(_t,SEARCHSELF);
			_t = _t.getNextSibling();
			break;
		}
		case SEARCHTARGET:
		{
			AST tmp2710_AST_in = (AST)_t;
			match(_t,SEARCHTARGET);
			_t = _t.getNextSibling();
			break;
		}
		case SECTION:
		{
			AST tmp2711_AST_in = (AST)_t;
			match(_t,SECTION);
			_t = _t.getNextSibling();
			break;
		}
		case SEEK:
		{
			AST tmp2712_AST_in = (AST)_t;
			match(_t,SEEK);
			_t = _t.getNextSibling();
			break;
		}
		case SELECT:
		{
			AST tmp2713_AST_in = (AST)_t;
			match(_t,SELECT);
			_t = _t.getNextSibling();
			break;
		}
		case SELECTION:
		{
			AST tmp2714_AST_in = (AST)_t;
			match(_t,SELECTION);
			_t = _t.getNextSibling();
			break;
		}
		case SELECTIONLIST:
		{
			AST tmp2715_AST_in = (AST)_t;
			match(_t,SELECTIONLIST);
			_t = _t.getNextSibling();
			break;
		}
		case SELF:
		{
			AST tmp2716_AST_in = (AST)_t;
			match(_t,SELF);
			_t = _t.getNextSibling();
			break;
		}
		case SEND:
		{
			AST tmp2717_AST_in = (AST)_t;
			match(_t,SEND);
			_t = _t.getNextSibling();
			break;
		}
		case SENDSQLSTATEMENT:
		{
			AST tmp2718_AST_in = (AST)_t;
			match(_t,SENDSQLSTATEMENT);
			_t = _t.getNextSibling();
			break;
		}
		case SEPARATECONNECTION:
		{
			AST tmp2719_AST_in = (AST)_t;
			match(_t,SEPARATECONNECTION);
			_t = _t.getNextSibling();
			break;
		}
		case SEPARATORS:
		{
			AST tmp2720_AST_in = (AST)_t;
			match(_t,SEPARATORS);
			_t = _t.getNextSibling();
			break;
		}
		case SERVER:
		{
			AST tmp2721_AST_in = (AST)_t;
			match(_t,SERVER);
			_t = _t.getNextSibling();
			break;
		}
		case SERVERSOCKET:
		{
			AST tmp2722_AST_in = (AST)_t;
			match(_t,SERVERSOCKET);
			_t = _t.getNextSibling();
			break;
		}
		case SESSION:
		{
			AST tmp2723_AST_in = (AST)_t;
			match(_t,SESSION);
			_t = _t.getNextSibling();
			break;
		}
		case SET:
		{
			AST tmp2724_AST_in = (AST)_t;
			match(_t,SET);
			_t = _t.getNextSibling();
			break;
		}
		case SETATTRCALLTYPE:
		{
			AST tmp2725_AST_in = (AST)_t;
			match(_t,SETATTRCALLTYPE);
			_t = _t.getNextSibling();
			break;
		}
		case SETBYTEORDER:
		{
			AST tmp2726_AST_in = (AST)_t;
			match(_t,SETBYTEORDER);
			_t = _t.getNextSibling();
			break;
		}
		case SETCONTENTS:
		{
			AST tmp2727_AST_in = (AST)_t;
			match(_t,SETCONTENTS);
			_t = _t.getNextSibling();
			break;
		}
		case SETCURRENTVALUE:
		{
			AST tmp2728_AST_in = (AST)_t;
			match(_t,SETCURRENTVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case SETPOINTERVALUE:
		{
			AST tmp2729_AST_in = (AST)_t;
			match(_t,SETPOINTERVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case SETSIZE:
		{
			AST tmp2730_AST_in = (AST)_t;
			match(_t,SETSIZE);
			_t = _t.getNextSibling();
			break;
		}
		case SETUSERID:
		{
			AST tmp2731_AST_in = (AST)_t;
			match(_t,SETUSERID);
			_t = _t.getNextSibling();
			break;
		}
		case SHARELOCK:
		{
			AST tmp2732_AST_in = (AST)_t;
			match(_t,SHARELOCK);
			_t = _t.getNextSibling();
			break;
		}
		case SHARED:
		{
			AST tmp2733_AST_in = (AST)_t;
			match(_t,SHARED);
			_t = _t.getNextSibling();
			break;
		}
		case SHORT:
		{
			AST tmp2734_AST_in = (AST)_t;
			match(_t,SHORT);
			_t = _t.getNextSibling();
			break;
		}
		case SHOWSTATS:
		{
			AST tmp2735_AST_in = (AST)_t;
			match(_t,SHOWSTATS);
			_t = _t.getNextSibling();
			break;
		}
		case SIDELABELS:
		{
			AST tmp2736_AST_in = (AST)_t;
			match(_t,SIDELABELS);
			_t = _t.getNextSibling();
			break;
		}
		case SILENT:
		{
			AST tmp2737_AST_in = (AST)_t;
			match(_t,SILENT);
			_t = _t.getNextSibling();
			break;
		}
		case SIMPLE:
		{
			AST tmp2738_AST_in = (AST)_t;
			match(_t,SIMPLE);
			_t = _t.getNextSibling();
			break;
		}
		case SINGLE:
		{
			AST tmp2739_AST_in = (AST)_t;
			match(_t,SINGLE);
			_t = _t.getNextSibling();
			break;
		}
		case SIZE:
		{
			AST tmp2740_AST_in = (AST)_t;
			match(_t,SIZE);
			_t = _t.getNextSibling();
			break;
		}
		case SIZECHARS:
		{
			AST tmp2741_AST_in = (AST)_t;
			match(_t,SIZECHARS);
			_t = _t.getNextSibling();
			break;
		}
		case SIZEPIXELS:
		{
			AST tmp2742_AST_in = (AST)_t;
			match(_t,SIZEPIXELS);
			_t = _t.getNextSibling();
			break;
		}
		case SKIP:
		{
			AST tmp2743_AST_in = (AST)_t;
			match(_t,SKIP);
			_t = _t.getNextSibling();
			break;
		}
		case SKIPDELETEDRECORD:
		{
			AST tmp2744_AST_in = (AST)_t;
			match(_t,SKIPDELETEDRECORD);
			_t = _t.getNextSibling();
			break;
		}
		case SLIDER:
		{
			AST tmp2745_AST_in = (AST)_t;
			match(_t,SLIDER);
			_t = _t.getNextSibling();
			break;
		}
		case SMALLINT:
		{
			AST tmp2746_AST_in = (AST)_t;
			match(_t,SMALLINT);
			_t = _t.getNextSibling();
			break;
		}
		case SOAPHEADER:
		{
			AST tmp2747_AST_in = (AST)_t;
			match(_t,SOAPHEADER);
			_t = _t.getNextSibling();
			break;
		}
		case SOAPHEADERENTRYREF:
		{
			AST tmp2748_AST_in = (AST)_t;
			match(_t,SOAPHEADERENTRYREF);
			_t = _t.getNextSibling();
			break;
		}
		case SOCKET:
		{
			AST tmp2749_AST_in = (AST)_t;
			match(_t,SOCKET);
			_t = _t.getNextSibling();
			break;
		}
		case SOME:
		{
			AST tmp2750_AST_in = (AST)_t;
			match(_t,SOME);
			_t = _t.getNextSibling();
			break;
		}
		case SORT:
		{
			AST tmp2751_AST_in = (AST)_t;
			match(_t,SORT);
			_t = _t.getNextSibling();
			break;
		}
		case SOURCE:
		{
			AST tmp2752_AST_in = (AST)_t;
			match(_t,SOURCE);
			_t = _t.getNextSibling();
			break;
		}
		case SOURCEPROCEDURE:
		{
			AST tmp2753_AST_in = (AST)_t;
			match(_t,SOURCEPROCEDURE);
			_t = _t.getNextSibling();
			break;
		}
		case SPACE:
		{
			AST tmp2754_AST_in = (AST)_t;
			match(_t,SPACE);
			_t = _t.getNextSibling();
			break;
		}
		case SQL:
		{
			AST tmp2755_AST_in = (AST)_t;
			match(_t,SQL);
			_t = _t.getNextSibling();
			break;
		}
		case SQRT:
		{
			AST tmp2756_AST_in = (AST)_t;
			match(_t,SQRT);
			_t = _t.getNextSibling();
			break;
		}
		case START:
		{
			AST tmp2757_AST_in = (AST)_t;
			match(_t,START);
			_t = _t.getNextSibling();
			break;
		}
		case STARTING:
		{
			AST tmp2758_AST_in = (AST)_t;
			match(_t,STARTING);
			_t = _t.getNextSibling();
			break;
		}
		case STARTMOVE:
		{
			AST tmp2759_AST_in = (AST)_t;
			match(_t,STARTMOVE);
			_t = _t.getNextSibling();
			break;
		}
		case STARTRESIZE:
		{
			AST tmp2760_AST_in = (AST)_t;
			match(_t,STARTRESIZE);
			_t = _t.getNextSibling();
			break;
		}
		case STARTROWRESIZE:
		{
			AST tmp2761_AST_in = (AST)_t;
			match(_t,STARTROWRESIZE);
			_t = _t.getNextSibling();
			break;
		}
		case STATUS:
		{
			AST tmp2762_AST_in = (AST)_t;
			match(_t,STATUS);
			_t = _t.getNextSibling();
			break;
		}
		case STATUSBAR:
		{
			AST tmp2763_AST_in = (AST)_t;
			match(_t,STATUSBAR);
			_t = _t.getNextSibling();
			break;
		}
		case STDCALL_KW:
		{
			AST tmp2764_AST_in = (AST)_t;
			match(_t,STDCALL_KW);
			_t = _t.getNextSibling();
			break;
		}
		case STRETCHTOFIT:
		{
			AST tmp2765_AST_in = (AST)_t;
			match(_t,STRETCHTOFIT);
			_t = _t.getNextSibling();
			break;
		}
		case STOP:
		{
			AST tmp2766_AST_in = (AST)_t;
			match(_t,STOP);
			_t = _t.getNextSibling();
			break;
		}
		case STOREDPROCEDURE:
		{
			AST tmp2767_AST_in = (AST)_t;
			match(_t,STOREDPROCEDURE);
			_t = _t.getNextSibling();
			break;
		}
		case STREAM:
		{
			AST tmp2768_AST_in = (AST)_t;
			match(_t,STREAM);
			_t = _t.getNextSibling();
			break;
		}
		case STREAMIO:
		{
			AST tmp2769_AST_in = (AST)_t;
			match(_t,STREAMIO);
			_t = _t.getNextSibling();
			break;
		}
		case STRING:
		{
			AST tmp2770_AST_in = (AST)_t;
			match(_t,STRING);
			_t = _t.getNextSibling();
			break;
		}
		case STRINGXREF:
		{
			AST tmp2771_AST_in = (AST)_t;
			match(_t,STRINGXREF);
			_t = _t.getNextSibling();
			break;
		}
		case SUBAVERAGE:
		{
			AST tmp2772_AST_in = (AST)_t;
			match(_t,SUBAVERAGE);
			_t = _t.getNextSibling();
			break;
		}
		case SUBCOUNT:
		{
			AST tmp2773_AST_in = (AST)_t;
			match(_t,SUBCOUNT);
			_t = _t.getNextSibling();
			break;
		}
		case SUBMAXIMUM:
		{
			AST tmp2774_AST_in = (AST)_t;
			match(_t,SUBMAXIMUM);
			_t = _t.getNextSibling();
			break;
		}
		case SUBMENU:
		{
			AST tmp2775_AST_in = (AST)_t;
			match(_t,SUBMENU);
			_t = _t.getNextSibling();
			break;
		}
		case SUBMENUHELP:
		{
			AST tmp2776_AST_in = (AST)_t;
			match(_t,SUBMENUHELP);
			_t = _t.getNextSibling();
			break;
		}
		case SUBMINIMUM:
		{
			AST tmp2777_AST_in = (AST)_t;
			match(_t,SUBMINIMUM);
			_t = _t.getNextSibling();
			break;
		}
		case SUBTOTAL:
		{
			AST tmp2778_AST_in = (AST)_t;
			match(_t,SUBTOTAL);
			_t = _t.getNextSibling();
			break;
		}
		case SUBSCRIBE:
		{
			AST tmp2779_AST_in = (AST)_t;
			match(_t,SUBSCRIBE);
			_t = _t.getNextSibling();
			break;
		}
		case SUBSTITUTE:
		{
			AST tmp2780_AST_in = (AST)_t;
			match(_t,SUBSTITUTE);
			_t = _t.getNextSibling();
			break;
		}
		case SUBSTRING:
		{
			AST tmp2781_AST_in = (AST)_t;
			match(_t,SUBSTRING);
			_t = _t.getNextSibling();
			break;
		}
		case SUM:
		{
			AST tmp2782_AST_in = (AST)_t;
			match(_t,SUM);
			_t = _t.getNextSibling();
			break;
		}
		case SUMMARY:
		{
			AST tmp2783_AST_in = (AST)_t;
			match(_t,SUMMARY);
			_t = _t.getNextSibling();
			break;
		}
		case SUPER:
		{
			AST tmp2784_AST_in = (AST)_t;
			match(_t,SUPER);
			_t = _t.getNextSibling();
			break;
		}
		case SYSTEMDIALOG:
		{
			AST tmp2785_AST_in = (AST)_t;
			match(_t,SYSTEMDIALOG);
			_t = _t.getNextSibling();
			break;
		}
		case SYSTEMHELP:
		{
			AST tmp2786_AST_in = (AST)_t;
			match(_t,SYSTEMHELP);
			_t = _t.getNextSibling();
			break;
		}
		case TABLE:
		{
			AST tmp2787_AST_in = (AST)_t;
			match(_t,TABLE);
			_t = _t.getNextSibling();
			break;
		}
		case TABLEHANDLE:
		{
			AST tmp2788_AST_in = (AST)_t;
			match(_t,TABLEHANDLE);
			_t = _t.getNextSibling();
			break;
		}
		case TABLENUMBER:
		{
			AST tmp2789_AST_in = (AST)_t;
			match(_t,TABLENUMBER);
			_t = _t.getNextSibling();
			break;
		}
		case TARGET:
		{
			AST tmp2790_AST_in = (AST)_t;
			match(_t,TARGET);
			_t = _t.getNextSibling();
			break;
		}
		case TARGETPROCEDURE:
		{
			AST tmp2791_AST_in = (AST)_t;
			match(_t,TARGETPROCEDURE);
			_t = _t.getNextSibling();
			break;
		}
		case TEMPTABLE:
		{
			AST tmp2792_AST_in = (AST)_t;
			match(_t,TEMPTABLE);
			_t = _t.getNextSibling();
			break;
		}
		case TERMINAL:
		{
			AST tmp2793_AST_in = (AST)_t;
			match(_t,TERMINAL);
			_t = _t.getNextSibling();
			break;
		}
		case TERMINATE:
		{
			AST tmp2794_AST_in = (AST)_t;
			match(_t,TERMINATE);
			_t = _t.getNextSibling();
			break;
		}
		case TEXT:
		{
			AST tmp2795_AST_in = (AST)_t;
			match(_t,TEXT);
			_t = _t.getNextSibling();
			break;
		}
		case TEXTCURSOR:
		{
			AST tmp2796_AST_in = (AST)_t;
			match(_t,TEXTCURSOR);
			_t = _t.getNextSibling();
			break;
		}
		case TEXTSEGGROW:
		{
			AST tmp2797_AST_in = (AST)_t;
			match(_t,TEXTSEGGROW);
			_t = _t.getNextSibling();
			break;
		}
		case THEN:
		{
			AST tmp2798_AST_in = (AST)_t;
			match(_t,THEN);
			_t = _t.getNextSibling();
			break;
		}
		case THISPROCEDURE:
		{
			AST tmp2799_AST_in = (AST)_t;
			match(_t,THISPROCEDURE);
			_t = _t.getNextSibling();
			break;
		}
		case THREED:
		{
			AST tmp2800_AST_in = (AST)_t;
			match(_t,THREED);
			_t = _t.getNextSibling();
			break;
		}
		case THROUGH:
		{
			AST tmp2801_AST_in = (AST)_t;
			match(_t,THROUGH);
			_t = _t.getNextSibling();
			break;
		}
		case TICMARKS:
		{
			AST tmp2802_AST_in = (AST)_t;
			match(_t,TICMARKS);
			_t = _t.getNextSibling();
			break;
		}
		case TIME:
		{
			AST tmp2803_AST_in = (AST)_t;
			match(_t,TIME);
			_t = _t.getNextSibling();
			break;
		}
		case TIMEZONE:
		{
			AST tmp2804_AST_in = (AST)_t;
			match(_t,TIMEZONE);
			_t = _t.getNextSibling();
			break;
		}
		case TITLE:
		{
			AST tmp2805_AST_in = (AST)_t;
			match(_t,TITLE);
			_t = _t.getNextSibling();
			break;
		}
		case TO:
		{
			AST tmp2806_AST_in = (AST)_t;
			match(_t,TO);
			_t = _t.getNextSibling();
			break;
		}
		case TOOLTIP:
		{
			AST tmp2807_AST_in = (AST)_t;
			match(_t,TOOLTIP);
			_t = _t.getNextSibling();
			break;
		}
		case TOP:
		{
			AST tmp2808_AST_in = (AST)_t;
			match(_t,TOP);
			_t = _t.getNextSibling();
			break;
		}
		case TOROWID:
		{
			AST tmp2809_AST_in = (AST)_t;
			match(_t,TOROWID);
			_t = _t.getNextSibling();
			break;
		}
		case TODAY:
		{
			AST tmp2810_AST_in = (AST)_t;
			match(_t,TODAY);
			_t = _t.getNextSibling();
			break;
		}
		case TOGGLEBOX:
		{
			AST tmp2811_AST_in = (AST)_t;
			match(_t,TOGGLEBOX);
			_t = _t.getNextSibling();
			break;
		}
		case TOOLBAR:
		{
			AST tmp2812_AST_in = (AST)_t;
			match(_t,TOOLBAR);
			_t = _t.getNextSibling();
			break;
		}
		case TOPONLY:
		{
			AST tmp2813_AST_in = (AST)_t;
			match(_t,TOPONLY);
			_t = _t.getNextSibling();
			break;
		}
		case TOPIC:
		{
			AST tmp2814_AST_in = (AST)_t;
			match(_t,TOPIC);
			_t = _t.getNextSibling();
			break;
		}
		case TOTAL:
		{
			AST tmp2815_AST_in = (AST)_t;
			match(_t,TOTAL);
			_t = _t.getNextSibling();
			break;
		}
		case TRANSACTION:
		{
			AST tmp2816_AST_in = (AST)_t;
			match(_t,TRANSACTION);
			_t = _t.getNextSibling();
			break;
		}
		case TRANSACTIONMODE:
		{
			AST tmp2817_AST_in = (AST)_t;
			match(_t,TRANSACTIONMODE);
			_t = _t.getNextSibling();
			break;
		}
		case TRANSPARENT:
		{
			AST tmp2818_AST_in = (AST)_t;
			match(_t,TRANSPARENT);
			_t = _t.getNextSibling();
			break;
		}
		case TRAILING:
		{
			AST tmp2819_AST_in = (AST)_t;
			match(_t,TRAILING);
			_t = _t.getNextSibling();
			break;
		}
		case TRIGGER:
		{
			AST tmp2820_AST_in = (AST)_t;
			match(_t,TRIGGER);
			_t = _t.getNextSibling();
			break;
		}
		case TRIGGERS:
		{
			AST tmp2821_AST_in = (AST)_t;
			match(_t,TRIGGERS);
			_t = _t.getNextSibling();
			break;
		}
		case TRIM:
		{
			AST tmp2822_AST_in = (AST)_t;
			match(_t,TRIM);
			_t = _t.getNextSibling();
			break;
		}
		case TRUE_KW:
		{
			AST tmp2823_AST_in = (AST)_t;
			match(_t,TRUE_KW);
			_t = _t.getNextSibling();
			break;
		}
		case TRUNCATE:
		{
			AST tmp2824_AST_in = (AST)_t;
			match(_t,TRUNCATE);
			_t = _t.getNextSibling();
			break;
		}
		case TTCODEPAGE:
		{
			AST tmp2825_AST_in = (AST)_t;
			match(_t,TTCODEPAGE);
			_t = _t.getNextSibling();
			break;
		}
		case UNBUFFERED:
		{
			AST tmp2826_AST_in = (AST)_t;
			match(_t,UNBUFFERED);
			_t = _t.getNextSibling();
			break;
		}
		case UNDERLINE:
		{
			AST tmp2827_AST_in = (AST)_t;
			match(_t,UNDERLINE);
			_t = _t.getNextSibling();
			break;
		}
		case UNDO:
		{
			AST tmp2828_AST_in = (AST)_t;
			match(_t,UNDO);
			_t = _t.getNextSibling();
			break;
		}
		case UNFORMATTED:
		{
			AST tmp2829_AST_in = (AST)_t;
			match(_t,UNFORMATTED);
			_t = _t.getNextSibling();
			break;
		}
		case UNLESSHIDDEN:
		{
			AST tmp2830_AST_in = (AST)_t;
			match(_t,UNLESSHIDDEN);
			_t = _t.getNextSibling();
			break;
		}
		case UNION:
		{
			AST tmp2831_AST_in = (AST)_t;
			match(_t,UNION);
			_t = _t.getNextSibling();
			break;
		}
		case UNIQUE:
		{
			AST tmp2832_AST_in = (AST)_t;
			match(_t,UNIQUE);
			_t = _t.getNextSibling();
			break;
		}
		case UNIQUEMATCH:
		{
			AST tmp2833_AST_in = (AST)_t;
			match(_t,UNIQUEMATCH);
			_t = _t.getNextSibling();
			break;
		}
		case UNIX:
		{
			AST tmp2834_AST_in = (AST)_t;
			match(_t,UNIX);
			_t = _t.getNextSibling();
			break;
		}
		case UNLOAD:
		{
			AST tmp2835_AST_in = (AST)_t;
			match(_t,UNLOAD);
			_t = _t.getNextSibling();
			break;
		}
		case UNSIGNEDBYTE:
		{
			AST tmp2836_AST_in = (AST)_t;
			match(_t,UNSIGNEDBYTE);
			_t = _t.getNextSibling();
			break;
		}
		case UNSIGNEDSHORT:
		{
			AST tmp2837_AST_in = (AST)_t;
			match(_t,UNSIGNEDSHORT);
			_t = _t.getNextSibling();
			break;
		}
		case UNSUBSCRIBE:
		{
			AST tmp2838_AST_in = (AST)_t;
			match(_t,UNSUBSCRIBE);
			_t = _t.getNextSibling();
			break;
		}
		case UP:
		{
			AST tmp2839_AST_in = (AST)_t;
			match(_t,UP);
			_t = _t.getNextSibling();
			break;
		}
		case UPDATE:
		{
			AST tmp2840_AST_in = (AST)_t;
			match(_t,UPDATE);
			_t = _t.getNextSibling();
			break;
		}
		case URLDECODE:
		{
			AST tmp2841_AST_in = (AST)_t;
			match(_t,URLDECODE);
			_t = _t.getNextSibling();
			break;
		}
		case URLENCODE:
		{
			AST tmp2842_AST_in = (AST)_t;
			match(_t,URLENCODE);
			_t = _t.getNextSibling();
			break;
		}
		case USE:
		{
			AST tmp2843_AST_in = (AST)_t;
			match(_t,USE);
			_t = _t.getNextSibling();
			break;
		}
		case USEDICTEXPS:
		{
			AST tmp2844_AST_in = (AST)_t;
			match(_t,USEDICTEXPS);
			_t = _t.getNextSibling();
			break;
		}
		case USEFILENAME:
		{
			AST tmp2845_AST_in = (AST)_t;
			match(_t,USEFILENAME);
			_t = _t.getNextSibling();
			break;
		}
		case USEINDEX:
		{
			AST tmp2846_AST_in = (AST)_t;
			match(_t,USEINDEX);
			_t = _t.getNextSibling();
			break;
		}
		case USEREVVIDEO:
		{
			AST tmp2847_AST_in = (AST)_t;
			match(_t,USEREVVIDEO);
			_t = _t.getNextSibling();
			break;
		}
		case USETEXT:
		{
			AST tmp2848_AST_in = (AST)_t;
			match(_t,USETEXT);
			_t = _t.getNextSibling();
			break;
		}
		case USEUNDERLINE:
		{
			AST tmp2849_AST_in = (AST)_t;
			match(_t,USEUNDERLINE);
			_t = _t.getNextSibling();
			break;
		}
		case USER:
		{
			AST tmp2850_AST_in = (AST)_t;
			match(_t,USER);
			_t = _t.getNextSibling();
			break;
		}
		case USERID:
		{
			AST tmp2851_AST_in = (AST)_t;
			match(_t,USERID);
			_t = _t.getNextSibling();
			break;
		}
		case USING:
		{
			AST tmp2852_AST_in = (AST)_t;
			match(_t,USING);
			_t = _t.getNextSibling();
			break;
		}
		case V6FRAME:
		{
			AST tmp2853_AST_in = (AST)_t;
			match(_t,V6FRAME);
			_t = _t.getNextSibling();
			break;
		}
		case VALIDEVENT:
		{
			AST tmp2854_AST_in = (AST)_t;
			match(_t,VALIDEVENT);
			_t = _t.getNextSibling();
			break;
		}
		case VALIDHANDLE:
		{
			AST tmp2855_AST_in = (AST)_t;
			match(_t,VALIDHANDLE);
			_t = _t.getNextSibling();
			break;
		}
		case VALIDATE:
		{
			AST tmp2856_AST_in = (AST)_t;
			match(_t,VALIDATE);
			_t = _t.getNextSibling();
			break;
		}
		case VALUE:
		{
			AST tmp2857_AST_in = (AST)_t;
			match(_t,VALUE);
			_t = _t.getNextSibling();
			break;
		}
		case VALUECHANGED:
		{
			AST tmp2858_AST_in = (AST)_t;
			match(_t,VALUECHANGED);
			_t = _t.getNextSibling();
			break;
		}
		case VALUES:
		{
			AST tmp2859_AST_in = (AST)_t;
			match(_t,VALUES);
			_t = _t.getNextSibling();
			break;
		}
		case VARIABLE:
		{
			AST tmp2860_AST_in = (AST)_t;
			match(_t,VARIABLE);
			_t = _t.getNextSibling();
			break;
		}
		case VERBOSE:
		{
			AST tmp2861_AST_in = (AST)_t;
			match(_t,VERBOSE);
			_t = _t.getNextSibling();
			break;
		}
		case VERTICAL:
		{
			AST tmp2862_AST_in = (AST)_t;
			match(_t,VERTICAL);
			_t = _t.getNextSibling();
			break;
		}
		case VIEW:
		{
			AST tmp2863_AST_in = (AST)_t;
			match(_t,VIEW);
			_t = _t.getNextSibling();
			break;
		}
		case VIEWAS:
		{
			AST tmp2864_AST_in = (AST)_t;
			match(_t,VIEWAS);
			_t = _t.getNextSibling();
			break;
		}
		case VMS:
		{
			AST tmp2865_AST_in = (AST)_t;
			match(_t,VMS);
			_t = _t.getNextSibling();
			break;
		}
		case WAIT:
		{
			AST tmp2866_AST_in = (AST)_t;
			match(_t,WAIT);
			_t = _t.getNextSibling();
			break;
		}
		case WAITFOR:
		{
			AST tmp2867_AST_in = (AST)_t;
			match(_t,WAITFOR);
			_t = _t.getNextSibling();
			break;
		}
		case WARNING:
		{
			AST tmp2868_AST_in = (AST)_t;
			match(_t,WARNING);
			_t = _t.getNextSibling();
			break;
		}
		case WEBCONTEXT:
		{
			AST tmp2869_AST_in = (AST)_t;
			match(_t,WEBCONTEXT);
			_t = _t.getNextSibling();
			break;
		}
		case WEEKDAY:
		{
			AST tmp2870_AST_in = (AST)_t;
			match(_t,WEEKDAY);
			_t = _t.getNextSibling();
			break;
		}
		case WHEN:
		{
			AST tmp2871_AST_in = (AST)_t;
			match(_t,WHEN);
			_t = _t.getNextSibling();
			break;
		}
		case WHERE:
		{
			AST tmp2872_AST_in = (AST)_t;
			match(_t,WHERE);
			_t = _t.getNextSibling();
			break;
		}
		case WHILE:
		{
			AST tmp2873_AST_in = (AST)_t;
			match(_t,WHILE);
			_t = _t.getNextSibling();
			break;
		}
		case WIDGET:
		{
			AST tmp2874_AST_in = (AST)_t;
			match(_t,WIDGET);
			_t = _t.getNextSibling();
			break;
		}
		case WIDGETHANDLE:
		{
			AST tmp2875_AST_in = (AST)_t;
			match(_t,WIDGETHANDLE);
			_t = _t.getNextSibling();
			break;
		}
		case WIDGETPOOL:
		{
			AST tmp2876_AST_in = (AST)_t;
			match(_t,WIDGETPOOL);
			_t = _t.getNextSibling();
			break;
		}
		case WIDTH:
		{
			AST tmp2877_AST_in = (AST)_t;
			match(_t,WIDTH);
			_t = _t.getNextSibling();
			break;
		}
		case WIDTHCHARS:
		{
			AST tmp2878_AST_in = (AST)_t;
			match(_t,WIDTHCHARS);
			_t = _t.getNextSibling();
			break;
		}
		case WIDTHPIXELS:
		{
			AST tmp2879_AST_in = (AST)_t;
			match(_t,WIDTHPIXELS);
			_t = _t.getNextSibling();
			break;
		}
		case WINDOW:
		{
			AST tmp2880_AST_in = (AST)_t;
			match(_t,WINDOW);
			_t = _t.getNextSibling();
			break;
		}
		case WINDOWDELAYEDMINIMIZE:
		{
			AST tmp2881_AST_in = (AST)_t;
			match(_t,WINDOWDELAYEDMINIMIZE);
			_t = _t.getNextSibling();
			break;
		}
		case WINDOWMAXIMIZED:
		{
			AST tmp2882_AST_in = (AST)_t;
			match(_t,WINDOWMAXIMIZED);
			_t = _t.getNextSibling();
			break;
		}
		case WINDOWMINIMIZED:
		{
			AST tmp2883_AST_in = (AST)_t;
			match(_t,WINDOWMINIMIZED);
			_t = _t.getNextSibling();
			break;
		}
		case WINDOWNAME:
		{
			AST tmp2884_AST_in = (AST)_t;
			match(_t,WINDOWNAME);
			_t = _t.getNextSibling();
			break;
		}
		case WINDOWNORMAL:
		{
			AST tmp2885_AST_in = (AST)_t;
			match(_t,WINDOWNORMAL);
			_t = _t.getNextSibling();
			break;
		}
		case WITH:
		{
			AST tmp2886_AST_in = (AST)_t;
			match(_t,WITH);
			_t = _t.getNextSibling();
			break;
		}
		case WORDINDEX:
		{
			AST tmp2887_AST_in = (AST)_t;
			match(_t,WORDINDEX);
			_t = _t.getNextSibling();
			break;
		}
		case WORKTABLE:
		{
			AST tmp2888_AST_in = (AST)_t;
			match(_t,WORKTABLE);
			_t = _t.getNextSibling();
			break;
		}
		case WRITE:
		{
			AST tmp2889_AST_in = (AST)_t;
			match(_t,WRITE);
			_t = _t.getNextSibling();
			break;
		}
		case X:
		{
			AST tmp2890_AST_in = (AST)_t;
			match(_t,X);
			_t = _t.getNextSibling();
			break;
		}
		case XDOCUMENT:
		{
			AST tmp2891_AST_in = (AST)_t;
			match(_t,XDOCUMENT);
			_t = _t.getNextSibling();
			break;
		}
		case XNODEREF:
		{
			AST tmp2892_AST_in = (AST)_t;
			match(_t,XNODEREF);
			_t = _t.getNextSibling();
			break;
		}
		case XOF:
		{
			AST tmp2893_AST_in = (AST)_t;
			match(_t,XOF);
			_t = _t.getNextSibling();
			break;
		}
		case XCODE:
		{
			AST tmp2894_AST_in = (AST)_t;
			match(_t,XCODE);
			_t = _t.getNextSibling();
			break;
		}
		case XREF:
		{
			AST tmp2895_AST_in = (AST)_t;
			match(_t,XREF);
			_t = _t.getNextSibling();
			break;
		}
		case Y:
		{
			AST tmp2896_AST_in = (AST)_t;
			match(_t,Y);
			_t = _t.getNextSibling();
			break;
		}
		case YOF:
		{
			AST tmp2897_AST_in = (AST)_t;
			match(_t,YOF);
			_t = _t.getNextSibling();
			break;
		}
		case YEAR:
		{
			AST tmp2898_AST_in = (AST)_t;
			match(_t,YEAR);
			_t = _t.getNextSibling();
			break;
		}
		case YES:
		{
			AST tmp2899_AST_in = (AST)_t;
			match(_t,YES);
			_t = _t.getNextSibling();
			break;
		}
		case YESNO:
		{
			AST tmp2900_AST_in = (AST)_t;
			match(_t,YESNO);
			_t = _t.getNextSibling();
			break;
		}
		case YESNOCANCEL:
		{
			AST tmp2901_AST_in = (AST)_t;
			match(_t,YESNOCANCEL);
			_t = _t.getNextSibling();
			break;
		}
		case BASE64DECODE:
		{
			AST tmp2902_AST_in = (AST)_t;
			match(_t,BASE64DECODE);
			_t = _t.getNextSibling();
			break;
		}
		case BASE64ENCODE:
		{
			AST tmp2903_AST_in = (AST)_t;
			match(_t,BASE64ENCODE);
			_t = _t.getNextSibling();
			break;
		}
		case BATCHSIZE:
		{
			AST tmp2904_AST_in = (AST)_t;
			match(_t,BATCHSIZE);
			_t = _t.getNextSibling();
			break;
		}
		case BEFORETABLE:
		{
			AST tmp2905_AST_in = (AST)_t;
			match(_t,BEFORETABLE);
			_t = _t.getNextSibling();
			break;
		}
		case COPYDATASET:
		{
			AST tmp2906_AST_in = (AST)_t;
			match(_t,COPYDATASET);
			_t = _t.getNextSibling();
			break;
		}
		case COPYTEMPTABLE:
		{
			AST tmp2907_AST_in = (AST)_t;
			match(_t,COPYTEMPTABLE);
			_t = _t.getNextSibling();
			break;
		}
		case DATASOURCEMODIFIED:
		{
			AST tmp2908_AST_in = (AST)_t;
			match(_t,DATASOURCEMODIFIED);
			_t = _t.getNextSibling();
			break;
		}
		case DECRYPT:
		{
			AST tmp2909_AST_in = (AST)_t;
			match(_t,DECRYPT);
			_t = _t.getNextSibling();
			break;
		}
		case DELETECHARACTER:
		{
			AST tmp2910_AST_in = (AST)_t;
			match(_t,DELETECHARACTER);
			_t = _t.getNextSibling();
			break;
		}
		case ENABLEDFIELDS:
		{
			AST tmp2911_AST_in = (AST)_t;
			match(_t,ENABLEDFIELDS);
			_t = _t.getNextSibling();
			break;
		}
		case ENCRYPT:
		{
			AST tmp2912_AST_in = (AST)_t;
			match(_t,ENCRYPT);
			_t = _t.getNextSibling();
			break;
		}
		case ENCRYPTIONSALT:
		{
			AST tmp2913_AST_in = (AST)_t;
			match(_t,ENCRYPTIONSALT);
			_t = _t.getNextSibling();
			break;
		}
		case FORMLONGINPUT:
		{
			AST tmp2914_AST_in = (AST)_t;
			match(_t,FORMLONGINPUT);
			_t = _t.getNextSibling();
			break;
		}
		case GENERATEPBEKEY:
		{
			AST tmp2915_AST_in = (AST)_t;
			match(_t,GENERATEPBEKEY);
			_t = _t.getNextSibling();
			break;
		}
		case GENERATEPBESALT:
		{
			AST tmp2916_AST_in = (AST)_t;
			match(_t,GENERATEPBESALT);
			_t = _t.getNextSibling();
			break;
		}
		case GENERATERANDOMKEY:
		{
			AST tmp2917_AST_in = (AST)_t;
			match(_t,GENERATERANDOMKEY);
			_t = _t.getNextSibling();
			break;
		}
		case GETCGILONGVALUE:
		{
			AST tmp2918_AST_in = (AST)_t;
			match(_t,GETCGILONGVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case LASTBATCH:
		{
			AST tmp2919_AST_in = (AST)_t;
			match(_t,LASTBATCH);
			_t = _t.getNextSibling();
			break;
		}
		case MD5DIGEST:
		{
			AST tmp2920_AST_in = (AST)_t;
			match(_t,MD5DIGEST);
			_t = _t.getNextSibling();
			break;
		}
		case MERGEBYFIELD:
		{
			AST tmp2921_AST_in = (AST)_t;
			match(_t,MERGEBYFIELD);
			_t = _t.getNextSibling();
			break;
		}
		case NORMALIZE:
		{
			AST tmp2922_AST_in = (AST)_t;
			match(_t,NORMALIZE);
			_t = _t.getNextSibling();
			break;
		}
		case PBEHASHALGORITHM:
		{
			AST tmp2923_AST_in = (AST)_t;
			match(_t,PBEHASHALGORITHM);
			_t = _t.getNextSibling();
			break;
		}
		case PBEKEYROUNDS:
		{
			AST tmp2924_AST_in = (AST)_t;
			match(_t,PBEKEYROUNDS);
			_t = _t.getNextSibling();
			break;
		}
		case PREFERDATASET:
		{
			AST tmp2925_AST_in = (AST)_t;
			match(_t,PREFERDATASET);
			_t = _t.getNextSibling();
			break;
		}
		case REJECTED:
		{
			AST tmp2926_AST_in = (AST)_t;
			match(_t,REJECTED);
			_t = _t.getNextSibling();
			break;
		}
		case REPOSITIONMODE:
		{
			AST tmp2927_AST_in = (AST)_t;
			match(_t,REPOSITIONMODE);
			_t = _t.getNextSibling();
			break;
		}
		case ROWSTATE:
		{
			AST tmp2928_AST_in = (AST)_t;
			match(_t,ROWSTATE);
			_t = _t.getNextSibling();
			break;
		}
		case ROWUNMODIFIED:
		{
			AST tmp2929_AST_in = (AST)_t;
			match(_t,ROWUNMODIFIED);
			_t = _t.getNextSibling();
			break;
		}
		case ROWDELETED:
		{
			AST tmp2930_AST_in = (AST)_t;
			match(_t,ROWDELETED);
			_t = _t.getNextSibling();
			break;
		}
		case ROWMODIFIED:
		{
			AST tmp2931_AST_in = (AST)_t;
			match(_t,ROWMODIFIED);
			_t = _t.getNextSibling();
			break;
		}
		case ROWCREATED:
		{
			AST tmp2932_AST_in = (AST)_t;
			match(_t,ROWCREATED);
			_t = _t.getNextSibling();
			break;
		}
		case SECURITYPOLICY:
		{
			AST tmp2933_AST_in = (AST)_t;
			match(_t,SECURITYPOLICY);
			_t = _t.getNextSibling();
			break;
		}
		case SHA1DIGEST:
		{
			AST tmp2934_AST_in = (AST)_t;
			match(_t,SHA1DIGEST);
			_t = _t.getNextSibling();
			break;
		}
		case SSLSERVERNAME:
		{
			AST tmp2935_AST_in = (AST)_t;
			match(_t,SSLSERVERNAME);
			_t = _t.getNextSibling();
			break;
		}
		case SYMMETRICENCRYPTIONALGORITHM:
		{
			AST tmp2936_AST_in = (AST)_t;
			match(_t,SYMMETRICENCRYPTIONALGORITHM);
			_t = _t.getNextSibling();
			break;
		}
		case SYMMETRICENCRYPTIONIV:
		{
			AST tmp2937_AST_in = (AST)_t;
			match(_t,SYMMETRICENCRYPTIONIV);
			_t = _t.getNextSibling();
			break;
		}
		case SYMMETRICENCRYPTIONKEY:
		{
			AST tmp2938_AST_in = (AST)_t;
			match(_t,SYMMETRICENCRYPTIONKEY);
			_t = _t.getNextSibling();
			break;
		}
		case SYMMETRICSUPPORT:
		{
			AST tmp2939_AST_in = (AST)_t;
			match(_t,SYMMETRICSUPPORT);
			_t = _t.getNextSibling();
			break;
		}
		case TRANSINITPROCEDURE:
		{
			AST tmp2940_AST_in = (AST)_t;
			match(_t,TRANSINITPROCEDURE);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void assignment_list(AST _t) throws RecognitionException {
		
		AST assignment_list_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case RECORD_NAME:
		{
			record_name(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case EXCEPT:
			{
				AST __t235 = _t;
				AST tmp2941_AST_in = (AST)_t;
				match(_t,EXCEPT);
				_t = _t.getFirstChild();
				{
				_loop237:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_t.getType()==Field_ref)) {
						field(_t);
						_t = _retTree;
					}
					else {
						break _loop237;
					}
					
				} while (true);
				}
				_t = __t235;
				_t = _t.getNextSibling();
				break;
			}
			case EOF:
			case 3:
			case PERIOD:
			case NOERROR_KW:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			break;
		}
		case EOF:
		case 3:
		case PERIOD:
		case NOERROR_KW:
		case EQUAL:
		case Assign_from_buffer:
		{
			{
			_loop244:
			do {
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case EQUAL:
				{
					assign_equal(_t);
					_t = _retTree;
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case WHEN:
					{
						AST __t240 = _t;
						AST tmp2942_AST_in = (AST)_t;
						match(_t,WHEN);
						_t = _t.getFirstChild();
						expression(_t);
						_t = _retTree;
						_t = __t240;
						_t = _t.getNextSibling();
						break;
					}
					case EOF:
					case 3:
					case PERIOD:
					case NOERROR_KW:
					case EQUAL:
					case Assign_from_buffer:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
					break;
				}
				case Assign_from_buffer:
				{
					AST __t241 = _t;
					AST tmp2943_AST_in = (AST)_t;
					match(_t,Assign_from_buffer);
					_t = _t.getFirstChild();
					if ( inputState.guessing==0 ) {
						tpSupport.updating(true);
					}
					field(_t);
					_t = _retTree;
					if ( inputState.guessing==0 ) {
						tpSupport.updating(false);
					}
					_t = __t241;
					_t = _t.getNextSibling();
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case WHEN:
					{
						AST __t243 = _t;
						AST tmp2944_AST_in = (AST)_t;
						match(_t,WHEN);
						_t = _t.getFirstChild();
						expression(_t);
						_t = _retTree;
						_t = __t243;
						_t = _t.getNextSibling();
						break;
					}
					case EOF:
					case 3:
					case PERIOD:
					case NOERROR_KW:
					case EQUAL:
					case Assign_from_buffer:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
					break;
				}
				default:
				{
					break _loop244;
				}
				}
			} while (true);
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void assign_equal(AST _t) throws RecognitionException {
		
		AST assign_equal_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t246 = _t;
		AST tmp2945_AST_in = (AST)_t;
		match(_t,EQUAL);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case AACONTROL:
		case AAMSG:
		case AAPCONTROL:
		case AASERIAL:
		case COMSELF:
		case CURRENTLANGUAGE:
		case CURRENTVALUE:
		case CURRENTWINDOW:
		case CURSOR:
		case DATASERVERS:
		case DBNAME:
		case ENTRY:
		case ETIME_KW:
		case FRAMECOL:
		case FRAMEDB:
		case FRAMEDOWN:
		case FRAMEFIELD:
		case FRAMEFILE:
		case FRAMEINDEX:
		case FRAMELINE:
		case FRAMENAME:
		case FRAMEROW:
		case FRAMEVALUE:
		case GETCODEPAGES:
		case GOPENDING:
		case ISATTRSPACE:
		case LASTKEY:
		case LENGTH:
		case LINECOUNTER:
		case MACHINECLASS:
		case MESSAGELINES:
		case NEXTVALUE:
		case NUMALIASES:
		case NUMDBS:
		case OPSYS:
		case OSDRIVES:
		case OSERROR:
		case OVERLAY:
		case PAGENUMBER:
		case PAGESIZE_KW:
		case PROCHANDLE:
		case PROCSTATUS:
		case PROGRESS:
		case PROMSGS:
		case PROPATH:
		case PROVERSION:
		case PUTBITS:
		case PUTBYTE:
		case PUTBYTES:
		case PUTDOUBLE:
		case PUTFLOAT:
		case PUTLONG:
		case PUTSHORT:
		case PUTSTRING:
		case PUTUNSIGNEDSHORT:
		case RAW:
		case RETRY:
		case RETURNVALUE:
		case SCREENLINES:
		case SETBYTEORDER:
		case SETPOINTERVALUE:
		case SETSIZE:
		case SUBSTRING:
		case TERMINAL:
		case TIME:
		case TRANSACTION:
		case USERID:
		case Widget_ref:
		case DYNAMICCURRENTVALUE:
		case FIXCODEPAGE:
		{
			pseudfn(_t);
			_t = _retTree;
			break;
		}
		case Field_ref:
		{
			if ( inputState.guessing==0 ) {
				tpSupport.updating(true);
			}
			field(_t);
			_t = _retTree;
			if ( inputState.guessing==0 ) {
				tpSupport.updating(false);
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		expression(_t);
		_t = _retTree;
		_t = __t246;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void atphrase(AST _t) throws RecognitionException {
		
		AST atphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t249 = _t;
		AST tmp2946_AST_in = (AST)_t;
		match(_t,AT);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		if ((_tokenSet_32.member(_t.getType()))) {
			atphraseab(_t);
			_t = _retTree;
			atphraseab(_t);
			_t = _retTree;
		}
		else if ((_tokenSet_4.member(_t.getType()))) {
			expression(_t);
			_t = _retTree;
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case COLONALIGNED:
		{
			AST tmp2947_AST_in = (AST)_t;
			match(_t,COLONALIGNED);
			_t = _t.getNextSibling();
			break;
		}
		case LEFTALIGNED:
		{
			AST tmp2948_AST_in = (AST)_t;
			match(_t,LEFTALIGNED);
			_t = _t.getNextSibling();
			break;
		}
		case RIGHTALIGNED:
		{
			AST tmp2949_AST_in = (AST)_t;
			match(_t,RIGHTALIGNED);
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t249;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void atphraseab(AST _t) throws RecognitionException {
		
		AST atphraseab_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case COLUMN:
		{
			AST __t253 = _t;
			AST tmp2950_AST_in = (AST)_t;
			match(_t,COLUMN);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t253;
			_t = _t.getNextSibling();
			break;
		}
		case COLUMNOF:
		{
			AST __t254 = _t;
			AST tmp2951_AST_in = (AST)_t;
			match(_t,COLUMNOF);
			_t = _t.getFirstChild();
			referencepoint(_t);
			_t = _retTree;
			_t = __t254;
			_t = _t.getNextSibling();
			break;
		}
		case ROW:
		{
			AST __t255 = _t;
			AST tmp2952_AST_in = (AST)_t;
			match(_t,ROW);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t255;
			_t = _t.getNextSibling();
			break;
		}
		case ROWOF:
		{
			AST __t256 = _t;
			AST tmp2953_AST_in = (AST)_t;
			match(_t,ROWOF);
			_t = _t.getFirstChild();
			referencepoint(_t);
			_t = _retTree;
			_t = __t256;
			_t = _t.getNextSibling();
			break;
		}
		case X:
		{
			AST __t257 = _t;
			AST tmp2954_AST_in = (AST)_t;
			match(_t,X);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t257;
			_t = _t.getNextSibling();
			break;
		}
		case XOF:
		{
			AST __t258 = _t;
			AST tmp2955_AST_in = (AST)_t;
			match(_t,XOF);
			_t = _t.getFirstChild();
			referencepoint(_t);
			_t = _retTree;
			_t = __t258;
			_t = _t.getNextSibling();
			break;
		}
		case Y:
		{
			AST __t259 = _t;
			AST tmp2956_AST_in = (AST)_t;
			match(_t,Y);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t259;
			_t = _t.getNextSibling();
			break;
		}
		case YOF:
		{
			AST __t260 = _t;
			AST tmp2957_AST_in = (AST)_t;
			match(_t,YOF);
			_t = _t.getFirstChild();
			referencepoint(_t);
			_t = _retTree;
			_t = __t260;
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void referencepoint(AST _t) throws RecognitionException {
		
		AST referencepoint_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		field(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case MINUS:
		case PLUS:
		{
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case PLUS:
			{
				AST tmp2958_AST_in = (AST)_t;
				match(_t,PLUS);
				_t = _t.getNextSibling();
				break;
			}
			case MINUS:
			{
				AST tmp2959_AST_in = (AST)_t;
				match(_t,MINUS);
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			expression(_t);
			_t = _retTree;
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_retTree = _t;
	}
	
	public final void recordphrase(AST _t) throws RecognitionException {
		
		AST recordphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST rec = null;
		
		AST __t1959 = _t;
		rec = _t==ASTNULL ? null :(AST)_t;
		match(_t,RECORD_NAME);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case EXCEPT:
		case FIELDS:
		{
			record_fields(_t);
			_t = _retTree;
			break;
		}
		case 3:
		case LEXDATE:
		case NUMBER:
		case QSTRING:
		case BIGENDIAN:
		case EXCLUSIVELOCK:
		case FALSE_KW:
		case FINDCASESENSITIVE:
		case FINDGLOBAL:
		case FINDNEXTOCCURRENCE:
		case FINDPREVOCCURRENCE:
		case FINDSELECT:
		case FINDWRAPAROUND:
		case HOSTBYTEORDER:
		case LEFT:
		case LITTLEENDIAN:
		case NO:
		case NOERROR_KW:
		case NOLOCK:
		case NOPREFETCH:
		case NOWAIT:
		case NULL_KW:
		case OF:
		case OUTERJOIN:
		case READAVAILABLE:
		case READEXACTNUM:
		case SEARCHSELF:
		case SEARCHTARGET:
		case SHARELOCK:
		case TODAY:
		case TRUE_KW:
		case USEINDEX:
		case USING:
		case WHERE:
		case WINDOWDELAYEDMINIMIZE:
		case WINDOWMAXIMIZED:
		case WINDOWMINIMIZED:
		case WINDOWNORMAL:
		case YES:
		case UNKNOWNVALUE:
		case FUNCTIONCALLTYPE:
		case GETATTRCALLTYPE:
		case PROCEDURECALLTYPE:
		case SAXCOMPLETE:
		case SAXPARSERERROR:
		case SAXRUNNING:
		case SAXUNINITIALIZED:
		case SETATTRCALLTYPE:
		case ROWUNMODIFIED:
		case ROWDELETED:
		case ROWMODIFIED:
		case ROWCREATED:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		if ((_t.getType()==TODAY)) {
			AST tmp2960_AST_in = (AST)_t;
			match(_t,TODAY);
			_t = _t.getNextSibling();
		}
		else if ((_tokenSet_33.member(_t.getType()))) {
			constant(_t);
			_t = _retTree;
		}
		else if ((_tokenSet_34.member(_t.getType()))) {
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		{
		_loop1971:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case LEFT:
			{
				AST __t1963 = _t;
				AST tmp2961_AST_in = (AST)_t;
				match(_t,LEFT);
				_t = _t.getFirstChild();
				AST tmp2962_AST_in = (AST)_t;
				match(_t,OUTERJOIN);
				_t = _t.getNextSibling();
				_t = __t1963;
				_t = _t.getNextSibling();
				break;
			}
			case OUTERJOIN:
			{
				AST tmp2963_AST_in = (AST)_t;
				match(_t,OUTERJOIN);
				_t = _t.getNextSibling();
				break;
			}
			case OF:
			{
				AST __t1964 = _t;
				AST tmp2964_AST_in = (AST)_t;
				match(_t,OF);
				_t = _t.getFirstChild();
				record_name(_t);
				_t = _retTree;
				_t = __t1964;
				_t = _t.getNextSibling();
				break;
			}
			case WHERE:
			{
				AST __t1965 = _t;
				AST tmp2965_AST_in = (AST)_t;
				match(_t,WHERE);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				if ((_tokenSet_4.member(_t.getType()))) {
					expression(_t);
					_t = _retTree;
				}
				else if ((_t.getType()==3)) {
				}
				else {
					throw new NoViableAltException(_t);
				}
				
				}
				_t = __t1965;
				_t = _t.getNextSibling();
				break;
			}
			case USEINDEX:
			{
				AST __t1967 = _t;
				AST tmp2966_AST_in = (AST)_t;
				match(_t,USEINDEX);
				_t = _t.getFirstChild();
				AST tmp2967_AST_in = (AST)_t;
				match(_t,ID);
				_t = _t.getNextSibling();
				_t = __t1967;
				_t = _t.getNextSibling();
				break;
			}
			case USING:
			{
				AST __t1968 = _t;
				AST tmp2968_AST_in = (AST)_t;
				match(_t,USING);
				_t = _t.getFirstChild();
				field(_t);
				_t = _retTree;
				{
				_loop1970:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_t.getType()==AND)) {
						AST tmp2969_AST_in = (AST)_t;
						match(_t,AND);
						_t = _t.getNextSibling();
						field(_t);
						_t = _retTree;
					}
					else {
						break _loop1970;
					}
					
				} while (true);
				}
				_t = __t1968;
				_t = _t.getNextSibling();
				break;
			}
			case EXCLUSIVELOCK:
			case NOLOCK:
			case SHARELOCK:
			{
				lockhow(_t);
				_t = _retTree;
				break;
			}
			case NOWAIT:
			{
				AST tmp2970_AST_in = (AST)_t;
				match(_t,NOWAIT);
				_t = _t.getNextSibling();
				break;
			}
			case NOPREFETCH:
			{
				AST tmp2971_AST_in = (AST)_t;
				match(_t,NOPREFETCH);
				_t = _t.getNextSibling();
				break;
			}
			case NOERROR_KW:
			{
				AST tmp2972_AST_in = (AST)_t;
				match(_t,NOERROR_KW);
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				break _loop1971;
			}
			}
		} while (true);
		}
		_t = __t1959;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void casesens_or_not(AST _t) throws RecognitionException {
		
		AST casesens_or_not_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case Not_casesens:
		{
			AST __t327 = _t;
			AST tmp2973_AST_in = (AST)_t;
			match(_t,Not_casesens);
			_t = _t.getFirstChild();
			AST tmp2974_AST_in = (AST)_t;
			match(_t,NOT);
			_t = _t.getNextSibling();
			AST tmp2975_AST_in = (AST)_t;
			match(_t,CASESENSITIVE);
			_t = _t.getNextSibling();
			_t = __t327;
			_t = _t.getNextSibling();
			break;
		}
		case CASESENSITIVE:
		{
			AST tmp2976_AST_in = (AST)_t;
			match(_t,CASESENSITIVE);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void case_expression(AST _t) throws RecognitionException {
		
		AST case_expression_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		boolean synPredMatched342 = false;
		if (((_t.getType()==OR))) {
			AST __t342 = _t;
			synPredMatched342 = true;
			inputState.guessing++;
			try {
				{
				AST __t341 = _t;
				AST tmp2977_AST_in = (AST)_t;
				match(_t,OR);
				_t = _t.getFirstChild();
				AST tmp2978_AST_in = (AST)_t;
				if ( _t==null ) throw new MismatchedTokenException();
				_t = _t.getNextSibling();
				_t = __t341;
				_t = _t.getNextSibling();
				}
			}
			catch (RecognitionException pe) {
				synPredMatched342 = false;
			}
			_t = __t342;
			inputState.guessing--;
		}
		if ( synPredMatched342 ) {
			AST __t343 = _t;
			AST tmp2979_AST_in = (AST)_t;
			match(_t,OR);
			_t = _t.getFirstChild();
			case_expression(_t);
			_t = _retTree;
			case_expression(_t);
			_t = _retTree;
			_t = __t343;
			_t = _t.getNextSibling();
		}
		else if ((_t.getType()==WHEN)) {
			AST __t344 = _t;
			AST tmp2980_AST_in = (AST)_t;
			match(_t,WHEN);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t344;
			_t = _t.getNextSibling();
		}
		else if ((_tokenSet_4.member(_t.getType()))) {
			expression(_t);
			_t = _retTree;
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		_retTree = _t;
	}
	
	public final void goonphrase(AST _t) throws RecognitionException {
		
		AST goonphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1391 = _t;
		AST tmp2981_AST_in = (AST)_t;
		match(_t,GOON);
		_t = _t.getFirstChild();
		AST tmp2982_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		goon_elem(_t);
		_t = _retTree;
		{
		_loop1394:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_35.member(_t.getType()))) {
				{
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==COMMA)) {
					AST tmp2983_AST_in = (AST)_t;
					match(_t,COMMA);
					_t = _t.getNextSibling();
				}
				else if ((_tokenSet_35.member(_t.getType()))) {
				}
				else {
					throw new NoViableAltException(_t);
				}
				
				}
				goon_elem(_t);
				_t = _retTree;
			}
			else {
				break _loop1394;
			}
			
		} while (true);
		}
		AST tmp2984_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_t = __t1391;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void color_expr(AST _t) throws RecognitionException {
		
		AST color_expr_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case BGCOLOR:
		{
			AST __t383 = _t;
			AST tmp2985_AST_in = (AST)_t;
			match(_t,BGCOLOR);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t383;
			_t = _t.getNextSibling();
			break;
		}
		case DCOLOR:
		{
			AST __t384 = _t;
			AST tmp2986_AST_in = (AST)_t;
			match(_t,DCOLOR);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t384;
			_t = _t.getNextSibling();
			break;
		}
		case FGCOLOR:
		{
			AST __t385 = _t;
			AST tmp2987_AST_in = (AST)_t;
			match(_t,FGCOLOR);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t385;
			_t = _t.getNextSibling();
			break;
		}
		case PFCOLOR:
		{
			AST __t386 = _t;
			AST tmp2988_AST_in = (AST)_t;
			match(_t,PFCOLOR);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t386;
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void colorspecification(AST _t) throws RecognitionException {
		
		AST colorspecification_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case BGCOLOR:
		case DCOLOR:
		case FGCOLOR:
		case PFCOLOR:
		{
			{
			int _cnt389=0;
			_loop389:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_tokenSet_36.member(_t.getType()))) {
					color_expr(_t);
					_t = _retTree;
				}
				else {
					if ( _cnt389>=1 ) { break _loop389; } else {throw new NoViableAltException(_t);}
				}
				
				_cnt389++;
			} while (true);
			}
			break;
		}
		case COLOR:
		{
			AST __t390 = _t;
			AST tmp2989_AST_in = (AST)_t;
			match(_t,COLOR);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case DISPLAY:
			{
				AST tmp2990_AST_in = (AST)_t;
				match(_t,DISPLAY);
				_t = _t.getNextSibling();
				break;
			}
			case VALUE:
			case TYPELESS_TOKEN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			anyorvalue(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case PROMPT:
			{
				AST __t393 = _t;
				AST tmp2991_AST_in = (AST)_t;
				match(_t,PROMPT);
				_t = _t.getFirstChild();
				anyorvalue(_t);
				_t = _retTree;
				_t = __t393;
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t390;
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void formatphrase(AST _t) throws RecognitionException {
		
		AST formatphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1248 = _t;
		AST tmp2992_AST_in = (AST)_t;
		match(_t,Format_phrase);
		_t = _t.getFirstChild();
		{
		int _cnt1262=0;
		_loop1262:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case AS:
			{
				AST __t1250 = _t;
				AST tmp2993_AST_in = (AST)_t;
				match(_t,AS);
				_t = _t.getFirstChild();
				datatype_var(_t);
				_t = _retTree;
				_t = __t1250;
				_t = _t.getNextSibling();
				break;
			}
			case AT:
			{
				atphrase(_t);
				_t = _retTree;
				break;
			}
			case ATTRSPACE:
			{
				AST tmp2994_AST_in = (AST)_t;
				match(_t,ATTRSPACE);
				_t = _t.getNextSibling();
				break;
			}
			case NOATTRSPACE:
			{
				AST tmp2995_AST_in = (AST)_t;
				match(_t,NOATTRSPACE);
				_t = _t.getNextSibling();
				break;
			}
			case AUTORETURN:
			{
				AST tmp2996_AST_in = (AST)_t;
				match(_t,AUTORETURN);
				_t = _t.getNextSibling();
				break;
			}
			case BGCOLOR:
			case DCOLOR:
			case FGCOLOR:
			case PFCOLOR:
			{
				color_expr(_t);
				_t = _retTree;
				break;
			}
			case CONTEXTHELPID:
			{
				AST __t1251 = _t;
				AST tmp2997_AST_in = (AST)_t;
				match(_t,CONTEXTHELPID);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1251;
				_t = _t.getNextSibling();
				break;
			}
			case BLANK:
			{
				AST tmp2998_AST_in = (AST)_t;
				match(_t,BLANK);
				_t = _t.getNextSibling();
				break;
			}
			case COLON:
			{
				AST __t1252 = _t;
				AST tmp2999_AST_in = (AST)_t;
				match(_t,COLON);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1252;
				_t = _t.getNextSibling();
				break;
			}
			case TO:
			{
				AST __t1253 = _t;
				AST tmp3000_AST_in = (AST)_t;
				match(_t,TO);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1253;
				_t = _t.getNextSibling();
				break;
			}
			case DEBLANK:
			{
				AST tmp3001_AST_in = (AST)_t;
				match(_t,DEBLANK);
				_t = _t.getNextSibling();
				break;
			}
			case DISABLEAUTOZAP:
			{
				AST tmp3002_AST_in = (AST)_t;
				match(_t,DISABLEAUTOZAP);
				_t = _t.getNextSibling();
				break;
			}
			case FONT:
			{
				AST __t1254 = _t;
				AST tmp3003_AST_in = (AST)_t;
				match(_t,FONT);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1254;
				_t = _t.getNextSibling();
				break;
			}
			case FORMAT:
			{
				AST __t1255 = _t;
				AST tmp3004_AST_in = (AST)_t;
				match(_t,FORMAT);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1255;
				_t = _t.getNextSibling();
				break;
			}
			case HELP:
			{
				AST __t1256 = _t;
				AST tmp3005_AST_in = (AST)_t;
				match(_t,HELP);
				_t = _t.getFirstChild();
				constant(_t);
				_t = _retTree;
				_t = __t1256;
				_t = _t.getNextSibling();
				break;
			}
			case COLUMNLABEL:
			case LABEL:
			{
				label_constant(_t);
				_t = _retTree;
				break;
			}
			case LEXAT:
			{
				AST __t1257 = _t;
				AST tmp3006_AST_in = (AST)_t;
				match(_t,LEXAT);
				_t = _t.getFirstChild();
				field(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case Format_phrase:
				{
					formatphrase(_t);
					_t = _retTree;
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t1257;
				_t = _t.getNextSibling();
				break;
			}
			case LIKE:
			{
				AST __t1259 = _t;
				AST tmp3007_AST_in = (AST)_t;
				match(_t,LIKE);
				_t = _t.getFirstChild();
				field(_t);
				_t = _retTree;
				_t = __t1259;
				_t = _t.getNextSibling();
				break;
			}
			case NOLABELS:
			{
				AST tmp3008_AST_in = (AST)_t;
				match(_t,NOLABELS);
				_t = _t.getNextSibling();
				break;
			}
			case NOTABSTOP:
			{
				AST tmp3009_AST_in = (AST)_t;
				match(_t,NOTABSTOP);
				_t = _t.getNextSibling();
				break;
			}
			case VALIDATE:
			{
				AST __t1260 = _t;
				AST tmp3010_AST_in = (AST)_t;
				match(_t,VALIDATE);
				_t = _t.getFirstChild();
				funargs(_t);
				_t = _retTree;
				_t = __t1260;
				_t = _t.getNextSibling();
				break;
			}
			case WHEN:
			{
				AST __t1261 = _t;
				AST tmp3011_AST_in = (AST)_t;
				match(_t,WHEN);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1261;
				_t = _t.getNextSibling();
				break;
			}
			case VIEWAS:
			{
				viewasphrase(_t);
				_t = _retTree;
				break;
			}
			default:
			{
				if ( _cnt1262>=1 ) { break _loop1262; } else {throw new NoViableAltException(_t);}
			}
			}
			_cnt1262++;
		} while (true);
		}
		_t = __t1248;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void columnformat(AST _t) throws RecognitionException {
		
		AST columnformat_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t409 = _t;
		AST tmp3012_AST_in = (AST)_t;
		match(_t,Format_phrase);
		_t = _t.getFirstChild();
		{
		int _cnt426=0;
		_loop426:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case FORMAT:
			{
				AST __t411 = _t;
				AST tmp3013_AST_in = (AST)_t;
				match(_t,FORMAT);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t411;
				_t = _t.getNextSibling();
				break;
			}
			case COLUMNLABEL:
			case LABEL:
			{
				label_constant(_t);
				_t = _retTree;
				break;
			}
			case NOLABELS:
			{
				AST tmp3014_AST_in = (AST)_t;
				match(_t,NOLABELS);
				_t = _t.getNextSibling();
				break;
			}
			case COLUMNFONT:
			{
				AST __t412 = _t;
				AST tmp3015_AST_in = (AST)_t;
				match(_t,COLUMNFONT);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t412;
				_t = _t.getNextSibling();
				break;
			}
			case COLUMNDCOLOR:
			{
				AST __t413 = _t;
				AST tmp3016_AST_in = (AST)_t;
				match(_t,COLUMNDCOLOR);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t413;
				_t = _t.getNextSibling();
				break;
			}
			case COLUMNBGCOLOR:
			{
				AST __t414 = _t;
				AST tmp3017_AST_in = (AST)_t;
				match(_t,COLUMNBGCOLOR);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t414;
				_t = _t.getNextSibling();
				break;
			}
			case COLUMNFGCOLOR:
			{
				AST __t415 = _t;
				AST tmp3018_AST_in = (AST)_t;
				match(_t,COLUMNFGCOLOR);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t415;
				_t = _t.getNextSibling();
				break;
			}
			case COLUMNPFCOLOR:
			{
				AST __t416 = _t;
				AST tmp3019_AST_in = (AST)_t;
				match(_t,COLUMNPFCOLOR);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t416;
				_t = _t.getNextSibling();
				break;
			}
			case LABELFONT:
			{
				AST __t417 = _t;
				AST tmp3020_AST_in = (AST)_t;
				match(_t,LABELFONT);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t417;
				_t = _t.getNextSibling();
				break;
			}
			case LABELDCOLOR:
			{
				AST __t418 = _t;
				AST tmp3021_AST_in = (AST)_t;
				match(_t,LABELDCOLOR);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t418;
				_t = _t.getNextSibling();
				break;
			}
			case LABELBGCOLOR:
			{
				AST __t419 = _t;
				AST tmp3022_AST_in = (AST)_t;
				match(_t,LABELBGCOLOR);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t419;
				_t = _t.getNextSibling();
				break;
			}
			case LABELFGCOLOR:
			{
				AST __t420 = _t;
				AST tmp3023_AST_in = (AST)_t;
				match(_t,LABELFGCOLOR);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t420;
				_t = _t.getNextSibling();
				break;
			}
			case LEXAT:
			{
				AST __t421 = _t;
				AST tmp3024_AST_in = (AST)_t;
				match(_t,LEXAT);
				_t = _t.getFirstChild();
				field(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case Format_phrase:
				{
					columnformat(_t);
					_t = _retTree;
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t421;
				_t = _t.getNextSibling();
				break;
			}
			case WIDTH:
			{
				AST __t423 = _t;
				AST tmp3025_AST_in = (AST)_t;
				match(_t,WIDTH);
				_t = _t.getFirstChild();
				AST tmp3026_AST_in = (AST)_t;
				match(_t,NUMBER);
				_t = _t.getNextSibling();
				_t = __t423;
				_t = _t.getNextSibling();
				break;
			}
			case WIDTHPIXELS:
			{
				AST __t424 = _t;
				AST tmp3027_AST_in = (AST)_t;
				match(_t,WIDTHPIXELS);
				_t = _t.getFirstChild();
				AST tmp3028_AST_in = (AST)_t;
				match(_t,NUMBER);
				_t = _t.getNextSibling();
				_t = __t424;
				_t = _t.getNextSibling();
				break;
			}
			case WIDTHCHARS:
			{
				AST __t425 = _t;
				AST tmp3029_AST_in = (AST)_t;
				match(_t,WIDTHCHARS);
				_t = _t.getFirstChild();
				AST tmp3030_AST_in = (AST)_t;
				match(_t,NUMBER);
				_t = _t.getNextSibling();
				_t = __t425;
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				if ( _cnt426>=1 ) { break _loop426; } else {throw new NoViableAltException(_t);}
			}
			}
			_cnt426++;
		} while (true);
		}
		_t = __t409;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void comboboxphrase(AST _t) throws RecognitionException {
		
		AST comboboxphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t428 = _t;
		AST tmp3031_AST_in = (AST)_t;
		match(_t,COMBOBOX);
		_t = _t.getFirstChild();
		{
		_loop440:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case LISTITEMS:
			{
				AST __t430 = _t;
				AST tmp3032_AST_in = (AST)_t;
				match(_t,LISTITEMS);
				_t = _t.getFirstChild();
				constant(_t);
				_t = _retTree;
				{
				_loop432:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_t.getType()==COMMA)) {
						AST tmp3033_AST_in = (AST)_t;
						match(_t,COMMA);
						_t = _t.getNextSibling();
						constant(_t);
						_t = _retTree;
					}
					else {
						break _loop432;
					}
					
				} while (true);
				}
				_t = __t430;
				_t = _t.getNextSibling();
				break;
			}
			case LISTITEMPAIRS:
			{
				AST __t433 = _t;
				AST tmp3034_AST_in = (AST)_t;
				match(_t,LISTITEMPAIRS);
				_t = _t.getFirstChild();
				constant(_t);
				_t = _retTree;
				{
				_loop435:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_t.getType()==COMMA)) {
						AST tmp3035_AST_in = (AST)_t;
						match(_t,COMMA);
						_t = _t.getNextSibling();
						constant(_t);
						_t = _retTree;
					}
					else {
						break _loop435;
					}
					
				} while (true);
				}
				_t = __t433;
				_t = _t.getNextSibling();
				break;
			}
			case INNERLINES:
			{
				AST __t436 = _t;
				AST tmp3036_AST_in = (AST)_t;
				match(_t,INNERLINES);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t436;
				_t = _t.getNextSibling();
				break;
			}
			case SORT:
			{
				AST tmp3037_AST_in = (AST)_t;
				match(_t,SORT);
				_t = _t.getNextSibling();
				break;
			}
			case TOOLTIP:
			{
				tooltip_expr(_t);
				_t = _retTree;
				break;
			}
			case SIMPLE:
			{
				AST tmp3038_AST_in = (AST)_t;
				match(_t,SIMPLE);
				_t = _t.getNextSibling();
				break;
			}
			case DROPDOWN:
			{
				AST tmp3039_AST_in = (AST)_t;
				match(_t,DROPDOWN);
				_t = _t.getNextSibling();
				break;
			}
			case DROPDOWNLIST:
			{
				AST tmp3040_AST_in = (AST)_t;
				match(_t,DROPDOWNLIST);
				_t = _t.getNextSibling();
				break;
			}
			case MAXCHARS:
			{
				AST __t437 = _t;
				AST tmp3041_AST_in = (AST)_t;
				match(_t,MAXCHARS);
				_t = _t.getFirstChild();
				AST tmp3042_AST_in = (AST)_t;
				match(_t,NUMBER);
				_t = _t.getNextSibling();
				_t = __t437;
				_t = _t.getNextSibling();
				break;
			}
			case AUTOCOMPLETION:
			{
				AST __t438 = _t;
				AST tmp3043_AST_in = (AST)_t;
				match(_t,AUTOCOMPLETION);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case UNIQUEMATCH:
				{
					AST tmp3044_AST_in = (AST)_t;
					match(_t,UNIQUEMATCH);
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t438;
				_t = _t.getNextSibling();
				break;
			}
			case SIZE:
			case SIZECHARS:
			case SIZEPIXELS:
			{
				sizephrase(_t);
				_t = _retTree;
				break;
			}
			default:
			{
				break _loop440;
			}
			}
		} while (true);
		}
		_t = __t428;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void tooltip_expr(AST _t) throws RecognitionException {
		
		AST tooltip_expr_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2257 = _t;
		AST tmp3045_AST_in = (AST)_t;
		match(_t,TOOLTIP);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case VALUE:
		{
			valueexpression(_t);
			_t = _retTree;
			break;
		}
		case LEXDATE:
		case NUMBER:
		case QSTRING:
		case BIGENDIAN:
		case EXCLUSIVELOCK:
		case FALSE_KW:
		case FINDCASESENSITIVE:
		case FINDGLOBAL:
		case FINDNEXTOCCURRENCE:
		case FINDPREVOCCURRENCE:
		case FINDSELECT:
		case FINDWRAPAROUND:
		case HOSTBYTEORDER:
		case LITTLEENDIAN:
		case NO:
		case NOLOCK:
		case NOWAIT:
		case NULL_KW:
		case READAVAILABLE:
		case READEXACTNUM:
		case SEARCHSELF:
		case SEARCHTARGET:
		case SHARELOCK:
		case TRUE_KW:
		case WINDOWDELAYEDMINIMIZE:
		case WINDOWMAXIMIZED:
		case WINDOWMINIMIZED:
		case WINDOWNORMAL:
		case YES:
		case UNKNOWNVALUE:
		case FUNCTIONCALLTYPE:
		case GETATTRCALLTYPE:
		case PROCEDURECALLTYPE:
		case SAXCOMPLETE:
		case SAXPARSERERROR:
		case SAXRUNNING:
		case SAXUNINITIALIZED:
		case SETATTRCALLTYPE:
		case ROWUNMODIFIED:
		case ROWDELETED:
		case ROWMODIFIED:
		case ROWCREATED:
		{
			constant(_t);
			_t = _retTree;
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t2257;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void sizephrase(AST _t) throws RecognitionException {
		
		AST sizephrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case SIZE:
		{
			AST __t2122 = _t;
			AST tmp3046_AST_in = (AST)_t;
			match(_t,SIZE);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			AST tmp3047_AST_in = (AST)_t;
			match(_t,BY);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t2122;
			_t = _t.getNextSibling();
			break;
		}
		case SIZECHARS:
		{
			AST __t2123 = _t;
			AST tmp3048_AST_in = (AST)_t;
			match(_t,SIZECHARS);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			AST tmp3049_AST_in = (AST)_t;
			match(_t,BY);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t2123;
			_t = _t.getNextSibling();
			break;
		}
		case SIZEPIXELS:
		{
			AST __t2124 = _t;
			AST tmp3050_AST_in = (AST)_t;
			match(_t,SIZEPIXELS);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			AST tmp3051_AST_in = (AST)_t;
			match(_t,BY);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t2124;
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void compile_append(AST _t) throws RecognitionException {
		
		AST compile_append_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t498 = _t;
		AST tmp3052_AST_in = (AST)_t;
		match(_t,APPEND);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case EQUAL:
		{
			AST __t500 = _t;
			AST tmp3053_AST_in = (AST)_t;
			match(_t,EQUAL);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t500;
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t498;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void compile_lang(AST _t) throws RecognitionException {
		
		AST compile_lang_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case VALUE:
		{
			valueexpression(_t);
			_t = _retTree;
			break;
		}
		case TYPELESS_TOKEN:
		{
			AST tmp3054_AST_in = (AST)_t;
			match(_t,TYPELESS_TOKEN);
			_t = _t.getNextSibling();
			{
			_loop496:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==LEXCOLON)) {
					AST tmp3055_AST_in = (AST)_t;
					match(_t,LEXCOLON);
					_t = _t.getNextSibling();
					AST tmp3056_AST_in = (AST)_t;
					match(_t,TYPELESS_TOKEN);
					_t = _t.getNextSibling();
				}
				else {
					break _loop496;
				}
				
			} while (true);
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void convertphrase(AST _t) throws RecognitionException {
		
		AST convertphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t508 = _t;
		AST tmp3057_AST_in = (AST)_t;
		match(_t,CONVERT);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case SOURCE:
		{
			AST __t510 = _t;
			AST tmp3058_AST_in = (AST)_t;
			match(_t,SOURCE);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case BASE64:
			{
				AST tmp3059_AST_in = (AST)_t;
				match(_t,BASE64);
				_t = _t.getNextSibling();
				break;
			}
			case CODEPAGE:
			{
				AST tmp3060_AST_in = (AST)_t;
				match(_t,CODEPAGE);
				_t = _t.getNextSibling();
				expression(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case BASE64:
				{
					AST tmp3061_AST_in = (AST)_t;
					match(_t,BASE64);
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t510;
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		case TARGET:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case TARGET:
		{
			AST __t514 = _t;
			AST tmp3062_AST_in = (AST)_t;
			match(_t,TARGET);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case BASE64:
			{
				AST tmp3063_AST_in = (AST)_t;
				match(_t,BASE64);
				_t = _t.getNextSibling();
				break;
			}
			case CODEPAGE:
			{
				AST tmp3064_AST_in = (AST)_t;
				match(_t,CODEPAGE);
				_t = _t.getNextSibling();
				expression(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case BASE64:
				{
					AST tmp3065_AST_in = (AST)_t;
					match(_t,BASE64);
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t514;
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t508;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void triggerphrase(AST _t) throws RecognitionException {
		
		AST triggerphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2266 = _t;
		AST tmp3066_AST_in = (AST)_t;
		match(_t,TRIGGERS);
		_t = _t.getFirstChild();
		block_colon(_t);
		_t = _retTree;
		AST __t2267 = _t;
		AST tmp3067_AST_in = (AST)_t;
		match(_t,Code_block);
		_t = _t.getFirstChild();
		{
		_loop2272:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==ON)) {
				AST __t2269 = _t;
				AST tmp3068_AST_in = (AST)_t;
				match(_t,ON);
				_t = _t.getFirstChild();
				eventlist(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case ANYWHERE:
				{
					AST tmp3069_AST_in = (AST)_t;
					match(_t,ANYWHERE);
					_t = _t.getNextSibling();
					break;
				}
				case PERIOD:
				case PROPARSEDIRECTIVE:
				case AATRACE:
				case ACCUMULATE:
				case ALTER:
				case ANALYZE:
				case APPLY:
				case ASSIGN:
				case BELL:
				case BTOS:
				case BUFFERCOMPARE:
				case BUFFERCOPY:
				case CALL:
				case CASE:
				case CHOOSE:
				case CLEAR:
				case CLOSE:
				case COLOR:
				case COMPILE:
				case CONNECT:
				case CREATE:
				case DDE:
				case DECLARE:
				case DEFINE:
				case DELETE_KW:
				case DICTIONARY:
				case DISABLE:
				case DISCONNECT:
				case DISPLAY:
				case DO:
				case DOS:
				case DOWN:
				case DROP:
				case EMPTY:
				case ENABLE:
				case EXPORT:
				case FETCH:
				case FIND:
				case FOR:
				case FORMAT:
				case FUNCTION:
				case GET:
				case GETKEYVALUE:
				case GRANT:
				case HIDE:
				case IF:
				case IMPORT:
				case INPUT:
				case INPUTOUTPUT:
				case INSERT:
				case LEAVE:
				case LOAD:
				case MESSAGE:
				case MPE:
				case NEXT:
				case NEXTPROMPT:
				case ON:
				case OPEN:
				case OS2:
				case OS400:
				case OSAPPEND:
				case OSCOMMAND:
				case OSCOPY:
				case OSCREATEDIR:
				case OSDELETE:
				case OSRENAME:
				case OUTPUT:
				case PAGE:
				case PAUSE:
				case PERSISTENT:
				case PROCEDURE:
				case PROCESS:
				case PROMPTFOR:
				case PUBLISH:
				case PUT:
				case PUTKEYVALUE:
				case QUIT:
				case RAWTRANSFER:
				case READKEY:
				case RELEASE:
				case REPEAT:
				case REPOSITION:
				case RETURN:
				case REVOKE:
				case RUN:
				case SAVE:
				case SCROLL:
				case SEEK:
				case SELECT:
				case SET:
				case SHOWSTATS:
				case STATUS:
				case STOP:
				case SUBSCRIBE:
				case SYSTEMDIALOG:
				case SYSTEMHELP:
				case TRANSACTIONMODE:
				case TRIGGER:
				case UNDERLINE:
				case UNDO:
				case UNIX:
				case UNLOAD:
				case UNSUBSCRIBE:
				case UP:
				case UPDATE:
				case USE:
				case VALIDATE:
				case VIEW:
				case VMS:
				case WAITFOR:
				case Expr_statement:
				case BLOCK_LABEL:
				case COPYLOB:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case PERSISTENT:
				{
					AST tmp3070_AST_in = (AST)_t;
					match(_t,PERSISTENT);
					_t = _t.getNextSibling();
					runstate(_t);
					_t = _retTree;
					break;
				}
				case PERIOD:
				case PROPARSEDIRECTIVE:
				case AATRACE:
				case ACCUMULATE:
				case ALTER:
				case ANALYZE:
				case APPLY:
				case ASSIGN:
				case BELL:
				case BTOS:
				case BUFFERCOMPARE:
				case BUFFERCOPY:
				case CALL:
				case CASE:
				case CHOOSE:
				case CLEAR:
				case CLOSE:
				case COLOR:
				case COMPILE:
				case CONNECT:
				case CREATE:
				case DDE:
				case DECLARE:
				case DEFINE:
				case DELETE_KW:
				case DICTIONARY:
				case DISABLE:
				case DISCONNECT:
				case DISPLAY:
				case DO:
				case DOS:
				case DOWN:
				case DROP:
				case EMPTY:
				case ENABLE:
				case EXPORT:
				case FETCH:
				case FIND:
				case FOR:
				case FORMAT:
				case FUNCTION:
				case GET:
				case GETKEYVALUE:
				case GRANT:
				case HIDE:
				case IF:
				case IMPORT:
				case INPUT:
				case INPUTOUTPUT:
				case INSERT:
				case LEAVE:
				case LOAD:
				case MESSAGE:
				case MPE:
				case NEXT:
				case NEXTPROMPT:
				case ON:
				case OPEN:
				case OS2:
				case OS400:
				case OSAPPEND:
				case OSCOMMAND:
				case OSCOPY:
				case OSCREATEDIR:
				case OSDELETE:
				case OSRENAME:
				case OUTPUT:
				case PAGE:
				case PAUSE:
				case PROCEDURE:
				case PROCESS:
				case PROMPTFOR:
				case PUBLISH:
				case PUT:
				case PUTKEYVALUE:
				case QUIT:
				case RAWTRANSFER:
				case READKEY:
				case RELEASE:
				case REPEAT:
				case REPOSITION:
				case RETURN:
				case REVOKE:
				case RUN:
				case SAVE:
				case SCROLL:
				case SEEK:
				case SELECT:
				case SET:
				case SHOWSTATS:
				case STATUS:
				case STOP:
				case SUBSCRIBE:
				case SYSTEMDIALOG:
				case SYSTEMHELP:
				case TRANSACTIONMODE:
				case TRIGGER:
				case UNDERLINE:
				case UNDO:
				case UNIX:
				case UNLOAD:
				case UNSUBSCRIBE:
				case UP:
				case UPDATE:
				case USE:
				case VALIDATE:
				case VIEW:
				case VMS:
				case WAITFOR:
				case Expr_statement:
				case BLOCK_LABEL:
				case COPYLOB:
				{
					blockorstate(_t);
					_t = _retTree;
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t2269;
				_t = _t.getNextSibling();
			}
			else {
				break _loop2272;
			}
			
		} while (true);
		}
		_t = __t2267;
		_t = _t.getNextSibling();
		AST __t2273 = _t;
		AST tmp3071_AST_in = (AST)_t;
		match(_t,END);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case TRIGGERS:
		{
			AST tmp3072_AST_in = (AST)_t;
			match(_t,TRIGGERS);
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t2273;
		_t = _t.getNextSibling();
		_t = __t2266;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void datatype_dll(AST _t) throws RecognitionException {
		
		AST datatype_dll_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case CHARACTER:
		{
			AST tmp3073_AST_in = (AST)_t;
			match(_t,CHARACTER);
			_t = _t.getNextSibling();
			break;
		}
		case BYTE:
		case DOUBLE:
		case FLOAT:
		case LONG:
		case SHORT:
		case UNSIGNEDSHORT:
		{
			datatype_dll_native(_t);
			_t = _retTree;
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void datatype_dll_native(AST _t) throws RecognitionException {
		
		AST datatype_dll_native_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case BYTE:
		{
			AST tmp3074_AST_in = (AST)_t;
			match(_t,BYTE);
			_t = _t.getNextSibling();
			break;
		}
		case DOUBLE:
		{
			AST tmp3075_AST_in = (AST)_t;
			match(_t,DOUBLE);
			_t = _t.getNextSibling();
			break;
		}
		case FLOAT:
		{
			AST tmp3076_AST_in = (AST)_t;
			match(_t,FLOAT);
			_t = _t.getNextSibling();
			break;
		}
		case LONG:
		{
			AST tmp3077_AST_in = (AST)_t;
			match(_t,LONG);
			_t = _t.getNextSibling();
			break;
		}
		case SHORT:
		{
			AST tmp3078_AST_in = (AST)_t;
			match(_t,SHORT);
			_t = _t.getNextSibling();
			break;
		}
		case UNSIGNEDSHORT:
		{
			AST tmp3079_AST_in = (AST)_t;
			match(_t,UNSIGNEDSHORT);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void datatype_field(AST _t) throws RecognitionException {
		
		AST datatype_field_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case CHARACTER:
		case COMHANDLE:
		case DATE:
		case DECIMAL:
		case HANDLE:
		case INTEGER:
		case LOGICAL:
		case MEMPTR:
		case RAW:
		case RECID:
		case ROWID:
		case WIDGETHANDLE:
		case DATETIME:
		case DATETIMETZ:
		case LONGCHAR:
		{
			datatype_var(_t);
			_t = _retTree;
			break;
		}
		case BLOB:
		{
			AST tmp3080_AST_in = (AST)_t;
			match(_t,BLOB);
			_t = _t.getNextSibling();
			break;
		}
		case CLOB:
		{
			AST tmp3081_AST_in = (AST)_t;
			match(_t,CLOB);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void datatype_param(AST _t) throws RecognitionException {
		
		AST datatype_param_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case CHARACTER:
		case COMHANDLE:
		case DATE:
		case DECIMAL:
		case HANDLE:
		case INTEGER:
		case LOGICAL:
		case MEMPTR:
		case RAW:
		case RECID:
		case ROWID:
		case WIDGETHANDLE:
		case DATETIME:
		case DATETIMETZ:
		case LONGCHAR:
		{
			datatype_var(_t);
			_t = _retTree;
			break;
		}
		case BYTE:
		case DOUBLE:
		case FLOAT:
		case LONG:
		case SHORT:
		case UNSIGNEDSHORT:
		{
			datatype_dll_native(_t);
			_t = _retTree;
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void spacephrase(AST _t) throws RecognitionException {
		
		AST spacephrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2139 = _t;
		AST tmp3082_AST_in = (AST)_t;
		match(_t,SPACE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case LEFTPAREN:
		{
			funargs(_t);
			_t = _retTree;
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t2139;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void display_with(AST _t) throws RecognitionException {
		
		AST display_with_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		boolean synPredMatched1097 = false;
		if (((_t.getType()==WITH))) {
			AST __t1097 = _t;
			synPredMatched1097 = true;
			inputState.guessing++;
			try {
				{
				AST __t1096 = _t;
				AST tmp3083_AST_in = (AST)_t;
				match(_t,WITH);
				_t = _t.getFirstChild();
				AST tmp3084_AST_in = (AST)_t;
				match(_t,BROWSE);
				_t = _t.getNextSibling();
				AST tmp3085_AST_in = (AST)_t;
				match(_t,ID);
				_t = _t.getNextSibling();
				_t = __t1096;
				_t = _t.getNextSibling();
				}
			}
			catch (RecognitionException pe) {
				synPredMatched1097 = false;
			}
			_t = __t1097;
			inputState.guessing--;
		}
		if ( synPredMatched1097 ) {
			AST __t1098 = _t;
			AST tmp3086_AST_in = (AST)_t;
			match(_t,WITH);
			_t = _t.getFirstChild();
			AST tmp3087_AST_in = (AST)_t;
			match(_t,BROWSE);
			_t = _t.getNextSibling();
			AST tmp3088_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			_t = __t1098;
			_t = _t.getNextSibling();
		}
		else if ((_t.getType()==WITH)) {
			framephrase(_t);
			_t = _retTree;
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		_retTree = _t;
	}
	
	public final void imagephrase_opt(AST _t) throws RecognitionException {
		
		AST imagephrase_opt_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case FILE:
		{
			AST __t1419 = _t;
			AST tmp3089_AST_in = (AST)_t;
			match(_t,FILE);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t1419;
			_t = _t.getNextSibling();
			break;
		}
		case IMAGESIZE:
		{
			AST __t1420 = _t;
			AST tmp3090_AST_in = (AST)_t;
			match(_t,IMAGESIZE);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			AST tmp3091_AST_in = (AST)_t;
			match(_t,BY);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t1420;
			_t = _t.getNextSibling();
			break;
		}
		case IMAGESIZECHARS:
		{
			AST __t1421 = _t;
			AST tmp3092_AST_in = (AST)_t;
			match(_t,IMAGESIZECHARS);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			AST tmp3093_AST_in = (AST)_t;
			match(_t,BY);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t1421;
			_t = _t.getNextSibling();
			break;
		}
		case IMAGESIZEPIXELS:
		{
			AST __t1422 = _t;
			AST tmp3094_AST_in = (AST)_t;
			match(_t,IMAGESIZEPIXELS);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			AST tmp3095_AST_in = (AST)_t;
			match(_t,BY);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t1422;
			_t = _t.getNextSibling();
			break;
		}
		case FROM:
		{
			AST __t1423 = _t;
			AST tmp3096_AST_in = (AST)_t;
			match(_t,FROM);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case X:
			{
				AST tmp3097_AST_in = (AST)_t;
				match(_t,X);
				_t = _t.getNextSibling();
				expression(_t);
				_t = _retTree;
				break;
			}
			case Y:
			{
				AST tmp3098_AST_in = (AST)_t;
				match(_t,Y);
				_t = _t.getNextSibling();
				expression(_t);
				_t = _retTree;
				break;
			}
			case ROW:
			{
				AST tmp3099_AST_in = (AST)_t;
				match(_t,ROW);
				_t = _t.getNextSibling();
				expression(_t);
				_t = _retTree;
				break;
			}
			case COLUMN:
			{
				AST tmp3100_AST_in = (AST)_t;
				match(_t,COLUMN);
				_t = _t.getNextSibling();
				expression(_t);
				_t = _retTree;
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case X:
			{
				AST tmp3101_AST_in = (AST)_t;
				match(_t,X);
				_t = _t.getNextSibling();
				expression(_t);
				_t = _retTree;
				break;
			}
			case Y:
			{
				AST tmp3102_AST_in = (AST)_t;
				match(_t,Y);
				_t = _t.getNextSibling();
				expression(_t);
				_t = _retTree;
				break;
			}
			case ROW:
			{
				AST tmp3103_AST_in = (AST)_t;
				match(_t,ROW);
				_t = _t.getNextSibling();
				expression(_t);
				_t = _retTree;
				break;
			}
			case COLUMN:
			{
				AST tmp3104_AST_in = (AST)_t;
				match(_t,COLUMN);
				_t = _t.getNextSibling();
				expression(_t);
				_t = _retTree;
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t1423;
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void data_relation(AST _t) throws RecognitionException {
		
		AST data_relation_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t814 = _t;
		AST tmp3105_AST_in = (AST)_t;
		match(_t,DATARELATION);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case ID:
		{
			AST tmp3106_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			break;
		}
		case FOR:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp3107_AST_in = (AST)_t;
		match(_t,FOR);
		_t = _t.getNextSibling();
		AST tmp3108_AST_in = (AST)_t;
		match(_t,RECORD_NAME);
		_t = _t.getNextSibling();
		AST tmp3109_AST_in = (AST)_t;
		match(_t,COMMA);
		_t = _t.getNextSibling();
		AST tmp3110_AST_in = (AST)_t;
		match(_t,RECORD_NAME);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case RELATIONFIELDS:
		{
			field_mapping_phrase(_t);
			_t = _retTree;
			break;
		}
		case 3:
		case REPOSITION:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case REPOSITION:
		{
			AST tmp3111_AST_in = (AST)_t;
			match(_t,REPOSITION);
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t814;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void field_mapping_phrase(AST _t) throws RecognitionException {
		
		AST field_mapping_phrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t819 = _t;
		AST tmp3112_AST_in = (AST)_t;
		match(_t,RELATIONFIELDS);
		_t = _t.getFirstChild();
		AST tmp3113_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		AST tmp3114_AST_in = (AST)_t;
		match(_t,COMMA);
		_t = _t.getNextSibling();
		field(_t);
		_t = _retTree;
		{
		_loop821:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==COMMA)) {
				AST tmp3115_AST_in = (AST)_t;
				match(_t,COMMA);
				_t = _t.getNextSibling();
				field(_t);
				_t = _retTree;
				AST tmp3116_AST_in = (AST)_t;
				match(_t,COMMA);
				_t = _t.getNextSibling();
				field(_t);
				_t = _retTree;
			}
			else {
				break _loop821;
			}
			
		} while (true);
		}
		AST tmp3117_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_t = __t819;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void source_buffer_phrase(AST _t) throws RecognitionException {
		
		AST source_buffer_phrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t833 = _t;
		AST tmp3118_AST_in = (AST)_t;
		match(_t,RECORD_NAME);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case KEYS:
		{
			AST tmp3119_AST_in = (AST)_t;
			match(_t,KEYS);
			_t = _t.getNextSibling();
			AST tmp3120_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case ROWID:
			{
				AST tmp3121_AST_in = (AST)_t;
				match(_t,ROWID);
				_t = _t.getNextSibling();
				break;
			}
			case Field_ref:
			{
				field(_t);
				_t = _retTree;
				{
				_loop837:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_t.getType()==COMMA)) {
						AST tmp3122_AST_in = (AST)_t;
						match(_t,COMMA);
						_t = _t.getNextSibling();
						field(_t);
						_t = _retTree;
					}
					else {
						break _loop837;
					}
					
				} while (true);
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp3123_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t833;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void form_item(AST _t) throws RecognitionException {
		
		AST form_item_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1223 = _t;
		AST tmp3124_AST_in = (AST)_t;
		match(_t,Form_item);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case RECORD_NAME:
		{
			record_name(_t);
			_t = _retTree;
			break;
		}
		case TEXT:
		{
			AST __t1225 = _t;
			AST tmp3125_AST_in = (AST)_t;
			match(_t,TEXT);
			_t = _t.getFirstChild();
			AST tmp3126_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getNextSibling();
			{
			_loop1227:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==Form_item)) {
					form_item(_t);
					_t = _retTree;
				}
				else {
					break _loop1227;
				}
				
			} while (true);
			}
			AST tmp3127_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			_t = __t1225;
			_t = _t.getNextSibling();
			break;
		}
		case LEXDATE:
		case NUMBER:
		case QSTRING:
		case BIGENDIAN:
		case EXCLUSIVELOCK:
		case FALSE_KW:
		case FINDCASESENSITIVE:
		case FINDGLOBAL:
		case FINDNEXTOCCURRENCE:
		case FINDPREVOCCURRENCE:
		case FINDSELECT:
		case FINDWRAPAROUND:
		case HOSTBYTEORDER:
		case LITTLEENDIAN:
		case NO:
		case NOLOCK:
		case NOWAIT:
		case NULL_KW:
		case READAVAILABLE:
		case READEXACTNUM:
		case SEARCHSELF:
		case SEARCHTARGET:
		case SHARELOCK:
		case TRUE_KW:
		case WINDOWDELAYEDMINIMIZE:
		case WINDOWMAXIMIZED:
		case WINDOWMINIMIZED:
		case WINDOWNORMAL:
		case YES:
		case UNKNOWNVALUE:
		case FUNCTIONCALLTYPE:
		case GETATTRCALLTYPE:
		case PROCEDURECALLTYPE:
		case SAXCOMPLETE:
		case SAXPARSERERROR:
		case SAXRUNNING:
		case SAXUNINITIALIZED:
		case SETATTRCALLTYPE:
		case ROWUNMODIFIED:
		case ROWDELETED:
		case ROWMODIFIED:
		case ROWCREATED:
		{
			constant(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case Format_phrase:
			{
				formatphrase(_t);
				_t = _retTree;
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			break;
		}
		case SPACE:
		{
			spacephrase(_t);
			_t = _retTree;
			break;
		}
		case SKIP:
		{
			skipphrase(_t);
			_t = _retTree;
			break;
		}
		case CARET:
		{
			AST tmp3128_AST_in = (AST)_t;
			match(_t,CARET);
			_t = _t.getNextSibling();
			break;
		}
		case Field_ref:
		{
			field(_t);
			_t = _retTree;
			{
			_loop1230:
			do {
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case Aggregate_phrase:
				{
					aggregatephrase(_t);
					_t = _retTree;
					break;
				}
				case Format_phrase:
				{
					formatphrase(_t);
					_t = _retTree;
					break;
				}
				default:
				{
					break _loop1230;
				}
				}
			} while (true);
			}
			break;
		}
		case EQUAL:
		{
			assign_equal(_t);
			_t = _retTree;
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t1223;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void menu_opt(AST _t) throws RecognitionException {
		
		AST menu_opt_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case BGCOLOR:
		case DCOLOR:
		case FGCOLOR:
		case PFCOLOR:
		{
			color_expr(_t);
			_t = _retTree;
			break;
		}
		case FONT:
		{
			AST __t879 = _t;
			AST tmp3129_AST_in = (AST)_t;
			match(_t,FONT);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t879;
			_t = _t.getNextSibling();
			break;
		}
		case LIKE:
		{
			AST __t880 = _t;
			AST tmp3130_AST_in = (AST)_t;
			match(_t,LIKE);
			_t = _t.getFirstChild();
			field(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case VALIDATE:
			{
				AST tmp3131_AST_in = (AST)_t;
				match(_t,VALIDATE);
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t880;
			_t = _t.getNextSibling();
			break;
		}
		case TITLE:
		{
			AST __t882 = _t;
			AST tmp3132_AST_in = (AST)_t;
			match(_t,TITLE);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t882;
			_t = _t.getNextSibling();
			break;
		}
		case MENUBAR:
		{
			AST tmp3133_AST_in = (AST)_t;
			match(_t,MENUBAR);
			_t = _t.getNextSibling();
			break;
		}
		case PINNABLE:
		{
			AST tmp3134_AST_in = (AST)_t;
			match(_t,PINNABLE);
			_t = _t.getNextSibling();
			break;
		}
		case SUBMENUHELP:
		{
			AST tmp3135_AST_in = (AST)_t;
			match(_t,SUBMENUHELP);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void menu_list_item(AST _t) throws RecognitionException {
		
		AST menu_list_item_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST id = null;
		AST id2 = null;
		
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case MENUITEM:
		{
			AST __t885 = _t;
			AST tmp3136_AST_in = (AST)_t;
			match(_t,MENUITEM);
			_t = _t.getFirstChild();
			id = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			{
			_loop889:
			do {
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case ACCELERATOR:
				{
					AST __t887 = _t;
					AST tmp3137_AST_in = (AST)_t;
					match(_t,ACCELERATOR);
					_t = _t.getFirstChild();
					expression(_t);
					_t = _retTree;
					_t = __t887;
					_t = _t.getNextSibling();
					break;
				}
				case BGCOLOR:
				case DCOLOR:
				case FGCOLOR:
				case PFCOLOR:
				{
					color_expr(_t);
					_t = _retTree;
					break;
				}
				case DISABLED:
				{
					AST tmp3138_AST_in = (AST)_t;
					match(_t,DISABLED);
					_t = _t.getNextSibling();
					break;
				}
				case FONT:
				{
					AST __t888 = _t;
					AST tmp3139_AST_in = (AST)_t;
					match(_t,FONT);
					_t = _t.getFirstChild();
					expression(_t);
					_t = _retTree;
					_t = __t888;
					_t = _t.getNextSibling();
					break;
				}
				case COLUMNLABEL:
				case LABEL:
				{
					label_constant(_t);
					_t = _retTree;
					break;
				}
				case READONLY:
				{
					AST tmp3140_AST_in = (AST)_t;
					match(_t,READONLY);
					_t = _t.getNextSibling();
					break;
				}
				case TOGGLEBOX:
				{
					AST tmp3141_AST_in = (AST)_t;
					match(_t,TOGGLEBOX);
					_t = _t.getNextSibling();
					break;
				}
				default:
				{
					break _loop889;
				}
				}
			} while (true);
			}
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case TRIGGERS:
			{
				triggerphrase(_t);
				_t = _retTree;
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t885;
			_t = _t.getNextSibling();
			break;
		}
		case SUBMENU:
		{
			AST __t891 = _t;
			AST tmp3142_AST_in = (AST)_t;
			match(_t,SUBMENU);
			_t = _t.getFirstChild();
			id2 = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			{
			_loop894:
			do {
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case DISABLED:
				{
					AST tmp3143_AST_in = (AST)_t;
					match(_t,DISABLED);
					_t = _t.getNextSibling();
					break;
				}
				case COLUMNLABEL:
				case LABEL:
				{
					label_constant(_t);
					_t = _retTree;
					break;
				}
				case FONT:
				{
					AST __t893 = _t;
					AST tmp3144_AST_in = (AST)_t;
					match(_t,FONT);
					_t = _t.getFirstChild();
					expression(_t);
					_t = _retTree;
					_t = __t893;
					_t = _t.getNextSibling();
					break;
				}
				case BGCOLOR:
				case DCOLOR:
				case FGCOLOR:
				case PFCOLOR:
				{
					color_expr(_t);
					_t = _retTree;
					break;
				}
				default:
				{
					break _loop894;
				}
				}
			} while (true);
			}
			_t = __t891;
			_t = _t.getNextSibling();
			break;
		}
		case RULE:
		{
			AST __t895 = _t;
			AST tmp3145_AST_in = (AST)_t;
			match(_t,RULE);
			_t = _t.getFirstChild();
			{
			_loop898:
			do {
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case FONT:
				{
					AST __t897 = _t;
					AST tmp3146_AST_in = (AST)_t;
					match(_t,FONT);
					_t = _t.getFirstChild();
					expression(_t);
					_t = _retTree;
					_t = __t897;
					_t = _t.getNextSibling();
					break;
				}
				case BGCOLOR:
				case DCOLOR:
				case FGCOLOR:
				case PFCOLOR:
				{
					color_expr(_t);
					_t = _retTree;
					break;
				}
				default:
				{
					break _loop898;
				}
				}
			} while (true);
			}
			_t = __t895;
			_t = _t.getNextSibling();
			break;
		}
		case SKIP:
		{
			AST tmp3147_AST_in = (AST)_t;
			match(_t,SKIP);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		boolean synPredMatched902 = false;
		if (((_t.getType()==PERIOD))) {
			AST __t902 = _t;
			synPredMatched902 = true;
			inputState.guessing++;
			try {
				{
				AST tmp3148_AST_in = (AST)_t;
				match(_t,PERIOD);
				_t = _t.getNextSibling();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case RULE:
				{
					AST tmp3149_AST_in = (AST)_t;
					match(_t,RULE);
					_t = _t.getNextSibling();
					break;
				}
				case SKIP:
				{
					AST tmp3150_AST_in = (AST)_t;
					match(_t,SKIP);
					_t = _t.getNextSibling();
					break;
				}
				case SUBMENU:
				{
					AST tmp3151_AST_in = (AST)_t;
					match(_t,SUBMENU);
					_t = _t.getNextSibling();
					break;
				}
				case MENUITEM:
				{
					AST tmp3152_AST_in = (AST)_t;
					match(_t,MENUITEM);
					_t = _t.getNextSibling();
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				}
			}
			catch (RecognitionException pe) {
				synPredMatched902 = false;
			}
			_t = __t902;
			inputState.guessing--;
		}
		if ( synPredMatched902 ) {
			AST tmp3153_AST_in = (AST)_t;
			match(_t,PERIOD);
			_t = _t.getNextSibling();
		}
		else if ((_tokenSet_37.member(_t.getType()))) {
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		_retTree = _t;
	}
	
	public final void defineparam_var(AST _t) throws RecognitionException {
		
		AST defineparam_var_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case AS:
		{
			AST __t926 = _t;
			AST tmp3154_AST_in = (AST)_t;
			match(_t,AS);
			_t = _t.getFirstChild();
			{
			boolean synPredMatched930 = false;
			if (((_t.getType()==HANDLE))) {
				AST __t930 = _t;
				synPredMatched930 = true;
				inputState.guessing++;
				try {
					{
					AST tmp3155_AST_in = (AST)_t;
					match(_t,HANDLE);
					_t = _t.getNextSibling();
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case TO:
					{
						AST tmp3156_AST_in = (AST)_t;
						match(_t,TO);
						_t = _t.getNextSibling();
						break;
					}
					case BYTE:
					case CHARACTER:
					case DOUBLE:
					case FLOAT:
					case LONG:
					case SHORT:
					case UNSIGNEDSHORT:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
					datatype_dll(_t);
					_t = _retTree;
					}
				}
				catch (RecognitionException pe) {
					synPredMatched930 = false;
				}
				_t = __t930;
				inputState.guessing--;
			}
			if ( synPredMatched930 ) {
				AST tmp3157_AST_in = (AST)_t;
				match(_t,HANDLE);
				_t = _t.getNextSibling();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case TO:
				{
					AST tmp3158_AST_in = (AST)_t;
					match(_t,TO);
					_t = _t.getNextSibling();
					break;
				}
				case BYTE:
				case CHARACTER:
				case DOUBLE:
				case FLOAT:
				case LONG:
				case SHORT:
				case UNSIGNEDSHORT:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				datatype_dll(_t);
				_t = _retTree;
			}
			else if ((_tokenSet_38.member(_t.getType()))) {
				datatype_param(_t);
				_t = _retTree;
			}
			else {
				throw new NoViableAltException(_t);
			}
			
			}
			_t = __t926;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case 3:
		case PERIOD:
		case PROPARSEDIRECTIVE:
		case AATRACE:
		case ACCUMULATE:
		case ALTER:
		case ANALYZE:
		case APPLY:
		case ASSIGN:
		case BELL:
		case BTOS:
		case BUFFERCOMPARE:
		case BUFFERCOPY:
		case CALL:
		case CASE:
		case CASESENSITIVE:
		case CHOOSE:
		case CLEAR:
		case CLOSE:
		case COLOR:
		case COLUMNLABEL:
		case COMPILE:
		case CONNECT:
		case CREATE:
		case DDE:
		case DECIMALS:
		case DECLARE:
		case DEFINE:
		case DELETE_KW:
		case DICTIONARY:
		case DISABLE:
		case DISCONNECT:
		case DISPLAY:
		case DO:
		case DOS:
		case DOWN:
		case DROP:
		case EMPTY:
		case ENABLE:
		case EXPORT:
		case EXTENT:
		case FETCH:
		case FIND:
		case FOR:
		case FORMAT:
		case FUNCTION:
		case GET:
		case GETKEYVALUE:
		case GRANT:
		case HIDE:
		case IF:
		case IMPORT:
		case INITIAL:
		case INPUT:
		case INPUTOUTPUT:
		case INSERT:
		case LABEL:
		case LEAVE:
		case LIKE:
		case LOAD:
		case MESSAGE:
		case MPE:
		case NEXT:
		case NEXTPROMPT:
		case NOUNDO:
		case ON:
		case OPEN:
		case OS2:
		case OS400:
		case OSAPPEND:
		case OSCOMMAND:
		case OSCOPY:
		case OSCREATEDIR:
		case OSDELETE:
		case OSRENAME:
		case OUTPUT:
		case OVERRIDE:
		case PAGE:
		case PAUSE:
		case PERSISTENT:
		case PROCEDURE:
		case PROCESS:
		case PROMPTFOR:
		case PUBLISH:
		case PUT:
		case PUTKEYVALUE:
		case QUIT:
		case RAWTRANSFER:
		case READKEY:
		case RELEASE:
		case REPEAT:
		case REPOSITION:
		case RETURN:
		case REVERT:
		case REVOKE:
		case RUN:
		case SAVE:
		case SCROLL:
		case SEEK:
		case SELECT:
		case SET:
		case SHOWSTATS:
		case STATUS:
		case STOP:
		case SUBSCRIBE:
		case SYSTEMDIALOG:
		case SYSTEMHELP:
		case TRANSACTIONMODE:
		case TRIGGER:
		case TRIGGERS:
		case UNDERLINE:
		case UNDO:
		case UNIX:
		case UNLOAD:
		case UNSUBSCRIBE:
		case UP:
		case UPDATE:
		case USE:
		case VALIDATE:
		case VIEW:
		case VMS:
		case WAITFOR:
		case Expr_statement:
		case Not_casesens:
		case BLOCK_LABEL:
		case COPYLOB:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop937:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case CASESENSITIVE:
			case Not_casesens:
			{
				casesens_or_not(_t);
				_t = _retTree;
				break;
			}
			case DECIMALS:
			{
				AST __t934 = _t;
				AST tmp3159_AST_in = (AST)_t;
				match(_t,DECIMALS);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t934;
				_t = _t.getNextSibling();
				break;
			}
			case LIKE:
			{
				AST __t935 = _t;
				AST tmp3160_AST_in = (AST)_t;
				match(_t,LIKE);
				_t = _t.getFirstChild();
				field(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case VALIDATE:
				{
					AST tmp3161_AST_in = (AST)_t;
					match(_t,VALIDATE);
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t935;
				_t = _t.getNextSibling();
				break;
			}
			case INITIAL:
			{
				initial_constant(_t);
				_t = _retTree;
				break;
			}
			case COLUMNLABEL:
			case LABEL:
			{
				label_constant(_t);
				_t = _retTree;
				break;
			}
			case NOUNDO:
			{
				AST tmp3162_AST_in = (AST)_t;
				match(_t,NOUNDO);
				_t = _t.getNextSibling();
				if ( inputState.guessing==0 ) {
					tpSupport.noundo();
				}
				break;
			}
			case EXTENT:
			{
				extentphrase(_t);
				_t = _retTree;
				break;
			}
			default:
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==FORMAT)) {
					AST __t933 = _t;
					AST tmp3163_AST_in = (AST)_t;
					match(_t,FORMAT);
					_t = _t.getFirstChild();
					expression(_t);
					_t = _retTree;
					_t = __t933;
					_t = _t.getNextSibling();
				}
			else {
				break _loop937;
			}
			}
		} while (true);
		}
		_retTree = _t;
	}
	
	public final void initial_constant(AST _t) throws RecognitionException {
		
		AST initial_constant_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1443 = _t;
		AST tmp3164_AST_in = (AST)_t;
		match(_t,INITIAL);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case LEFTBRACE:
		{
			AST tmp3165_AST_in = (AST)_t;
			match(_t,LEFTBRACE);
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case TODAY:
			{
				AST tmp3166_AST_in = (AST)_t;
				match(_t,TODAY);
				_t = _t.getNextSibling();
				break;
			}
			case LEXDATE:
			case NUMBER:
			case QSTRING:
			case BIGENDIAN:
			case EXCLUSIVELOCK:
			case FALSE_KW:
			case FINDCASESENSITIVE:
			case FINDGLOBAL:
			case FINDNEXTOCCURRENCE:
			case FINDPREVOCCURRENCE:
			case FINDSELECT:
			case FINDWRAPAROUND:
			case HOSTBYTEORDER:
			case LITTLEENDIAN:
			case NO:
			case NOLOCK:
			case NOWAIT:
			case NULL_KW:
			case READAVAILABLE:
			case READEXACTNUM:
			case SEARCHSELF:
			case SEARCHTARGET:
			case SHARELOCK:
			case TRUE_KW:
			case WINDOWDELAYEDMINIMIZE:
			case WINDOWMAXIMIZED:
			case WINDOWMINIMIZED:
			case WINDOWNORMAL:
			case YES:
			case UNKNOWNVALUE:
			case FUNCTIONCALLTYPE:
			case GETATTRCALLTYPE:
			case PROCEDURECALLTYPE:
			case SAXCOMPLETE:
			case SAXPARSERERROR:
			case SAXRUNNING:
			case SAXUNINITIALIZED:
			case SETATTRCALLTYPE:
			case ROWUNMODIFIED:
			case ROWDELETED:
			case ROWMODIFIED:
			case ROWCREATED:
			{
				constant(_t);
				_t = _retTree;
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			{
			_loop1448:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==COMMA)) {
					AST tmp3167_AST_in = (AST)_t;
					match(_t,COMMA);
					_t = _t.getNextSibling();
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case TODAY:
					{
						AST tmp3168_AST_in = (AST)_t;
						match(_t,TODAY);
						_t = _t.getNextSibling();
						break;
					}
					case LEXDATE:
					case NUMBER:
					case QSTRING:
					case BIGENDIAN:
					case EXCLUSIVELOCK:
					case FALSE_KW:
					case FINDCASESENSITIVE:
					case FINDGLOBAL:
					case FINDNEXTOCCURRENCE:
					case FINDPREVOCCURRENCE:
					case FINDSELECT:
					case FINDWRAPAROUND:
					case HOSTBYTEORDER:
					case LITTLEENDIAN:
					case NO:
					case NOLOCK:
					case NOWAIT:
					case NULL_KW:
					case READAVAILABLE:
					case READEXACTNUM:
					case SEARCHSELF:
					case SEARCHTARGET:
					case SHARELOCK:
					case TRUE_KW:
					case WINDOWDELAYEDMINIMIZE:
					case WINDOWMAXIMIZED:
					case WINDOWMINIMIZED:
					case WINDOWNORMAL:
					case YES:
					case UNKNOWNVALUE:
					case FUNCTIONCALLTYPE:
					case GETATTRCALLTYPE:
					case PROCEDURECALLTYPE:
					case SAXCOMPLETE:
					case SAXPARSERERROR:
					case SAXRUNNING:
					case SAXUNINITIALIZED:
					case SETATTRCALLTYPE:
					case ROWUNMODIFIED:
					case ROWDELETED:
					case ROWMODIFIED:
					case ROWCREATED:
					{
						constant(_t);
						_t = _retTree;
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
				}
				else {
					break _loop1448;
				}
				
			} while (true);
			}
			AST tmp3169_AST_in = (AST)_t;
			match(_t,RIGHTBRACE);
			_t = _t.getNextSibling();
			break;
		}
		case LEXDATE:
		case NUMBER:
		case QSTRING:
		case BIGENDIAN:
		case EXCLUSIVELOCK:
		case FALSE_KW:
		case FINDCASESENSITIVE:
		case FINDGLOBAL:
		case FINDNEXTOCCURRENCE:
		case FINDPREVOCCURRENCE:
		case FINDSELECT:
		case FINDWRAPAROUND:
		case HOSTBYTEORDER:
		case LITTLEENDIAN:
		case NO:
		case NOLOCK:
		case NOWAIT:
		case NULL_KW:
		case READAVAILABLE:
		case READEXACTNUM:
		case SEARCHSELF:
		case SEARCHTARGET:
		case SHARELOCK:
		case TODAY:
		case TRUE_KW:
		case WINDOWDELAYEDMINIMIZE:
		case WINDOWMAXIMIZED:
		case WINDOWMINIMIZED:
		case WINDOWNORMAL:
		case YES:
		case UNKNOWNVALUE:
		case FUNCTIONCALLTYPE:
		case GETATTRCALLTYPE:
		case PROCEDURECALLTYPE:
		case SAXCOMPLETE:
		case SAXPARSERERROR:
		case SAXRUNNING:
		case SAXUNINITIALIZED:
		case SETATTRCALLTYPE:
		case ROWUNMODIFIED:
		case ROWDELETED:
		case ROWMODIFIED:
		case ROWCREATED:
		{
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case TODAY:
			{
				AST tmp3170_AST_in = (AST)_t;
				match(_t,TODAY);
				_t = _t.getNextSibling();
				break;
			}
			case LEXDATE:
			case NUMBER:
			case QSTRING:
			case BIGENDIAN:
			case EXCLUSIVELOCK:
			case FALSE_KW:
			case FINDCASESENSITIVE:
			case FINDGLOBAL:
			case FINDNEXTOCCURRENCE:
			case FINDPREVOCCURRENCE:
			case FINDSELECT:
			case FINDWRAPAROUND:
			case HOSTBYTEORDER:
			case LITTLEENDIAN:
			case NO:
			case NOLOCK:
			case NOWAIT:
			case NULL_KW:
			case READAVAILABLE:
			case READEXACTNUM:
			case SEARCHSELF:
			case SEARCHTARGET:
			case SHARELOCK:
			case TRUE_KW:
			case WINDOWDELAYEDMINIMIZE:
			case WINDOWMAXIMIZED:
			case WINDOWMINIMIZED:
			case WINDOWNORMAL:
			case YES:
			case UNKNOWNVALUE:
			case FUNCTIONCALLTYPE:
			case GETATTRCALLTYPE:
			case PROCEDURECALLTYPE:
			case SAXCOMPLETE:
			case SAXPARSERERROR:
			case SAXRUNNING:
			case SAXUNINITIALIZED:
			case SETATTRCALLTYPE:
			case ROWUNMODIFIED:
			case ROWDELETED:
			case ROWMODIFIED:
			case ROWCREATED:
			{
				constant(_t);
				_t = _retTree;
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t1443;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void extentphrase(AST _t) throws RecognitionException {
		
		AST extentphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1183 = _t;
		AST tmp3171_AST_in = (AST)_t;
		match(_t,EXTENT);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		if ((_tokenSet_4.member(_t.getType()))) {
			expression(_t);
			_t = _retTree;
		}
		else if ((_t.getType()==3)) {
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		_t = __t1183;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void record_fields(AST _t) throws RecognitionException {
		
		AST record_fields_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case FIELDS:
		{
			AST __t1946 = _t;
			AST tmp3172_AST_in = (AST)_t;
			match(_t,FIELDS);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case LEFTPAREN:
			{
				AST tmp3173_AST_in = (AST)_t;
				match(_t,LEFTPAREN);
				_t = _t.getNextSibling();
				{
				_loop1951:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_t.getType()==Field_ref)) {
						field(_t);
						_t = _retTree;
						{
						if (_t==null) _t=ASTNULL;
						switch ( _t.getType()) {
						case WHEN:
						{
							AST __t1950 = _t;
							AST tmp3174_AST_in = (AST)_t;
							match(_t,WHEN);
							_t = _t.getFirstChild();
							expression(_t);
							_t = _retTree;
							_t = __t1950;
							_t = _t.getNextSibling();
							break;
						}
						case RIGHTPAREN:
						case Field_ref:
						{
							break;
						}
						default:
						{
							throw new NoViableAltException(_t);
						}
						}
						}
					}
					else {
						break _loop1951;
					}
					
				} while (true);
				}
				AST tmp3175_AST_in = (AST)_t;
				match(_t,RIGHTPAREN);
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t1946;
			_t = _t.getNextSibling();
			break;
		}
		case EXCEPT:
		{
			AST __t1952 = _t;
			AST tmp3176_AST_in = (AST)_t;
			match(_t,EXCEPT);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case LEFTPAREN:
			{
				AST tmp3177_AST_in = (AST)_t;
				match(_t,LEFTPAREN);
				_t = _t.getNextSibling();
				{
				_loop1957:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_t.getType()==Field_ref)) {
						field(_t);
						_t = _retTree;
						{
						if (_t==null) _t=ASTNULL;
						switch ( _t.getType()) {
						case WHEN:
						{
							AST __t1956 = _t;
							AST tmp3178_AST_in = (AST)_t;
							match(_t,WHEN);
							_t = _t.getFirstChild();
							expression(_t);
							_t = _retTree;
							_t = __t1956;
							_t = _t.getNextSibling();
							break;
						}
						case RIGHTPAREN:
						case Field_ref:
						{
							break;
						}
						default:
						{
							throw new NoViableAltException(_t);
						}
						}
						}
					}
					else {
						break _loop1957;
					}
					
				} while (true);
				}
				AST tmp3179_AST_in = (AST)_t;
				match(_t,RIGHTPAREN);
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t1952;
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void def_table_like(AST _t) throws RecognitionException {
		
		AST def_table_like_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1001 = _t;
		AST tmp3180_AST_in = (AST)_t;
		match(_t,LIKE);
		_t = _t.getFirstChild();
		record_name(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case VALIDATE:
		{
			AST tmp3181_AST_in = (AST)_t;
			match(_t,VALIDATE);
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		case USEINDEX:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop1007:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==USEINDEX)) {
				AST __t1004 = _t;
				AST tmp3182_AST_in = (AST)_t;
				match(_t,USEINDEX);
				_t = _t.getFirstChild();
				AST tmp3183_AST_in = (AST)_t;
				match(_t,ID);
				_t = _t.getNextSibling();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case AS:
				case IS:
				{
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case AS:
					{
						AST tmp3184_AST_in = (AST)_t;
						match(_t,AS);
						_t = _t.getNextSibling();
						break;
					}
					case IS:
					{
						AST tmp3185_AST_in = (AST)_t;
						match(_t,IS);
						_t = _t.getNextSibling();
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
					AST tmp3186_AST_in = (AST)_t;
					match(_t,PRIMARY);
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t1004;
				_t = _t.getNextSibling();
			}
			else {
				break _loop1007;
			}
			
		} while (true);
		}
		_t = __t1001;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void def_table_field(AST _t) throws RecognitionException {
		
		AST def_table_field_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST id = null;
		
		AST __t1009 = _t;
		AST tmp3187_AST_in = (AST)_t;
		match(_t,FIELD);
		_t = _t.getFirstChild();
		id = (AST)_t;
		match(_t,ID);
		_t = _t.getNextSibling();
		{
		_loop1011:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_13.member(_t.getType()))) {
				fieldoption(_t);
				_t = _retTree;
			}
			else {
				break _loop1011;
			}
			
		} while (true);
		}
		_t = __t1009;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void fieldoption(AST _t) throws RecognitionException {
		
		AST fieldoption_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case AS:
		{
			AST __t1186 = _t;
			AST tmp3188_AST_in = (AST)_t;
			match(_t,AS);
			_t = _t.getFirstChild();
			datatype_field(_t);
			_t = _retTree;
			_t = __t1186;
			_t = _t.getNextSibling();
			break;
		}
		case CASESENSITIVE:
		case Not_casesens:
		{
			casesens_or_not(_t);
			_t = _retTree;
			break;
		}
		case BGCOLOR:
		case DCOLOR:
		case FGCOLOR:
		case PFCOLOR:
		{
			color_expr(_t);
			_t = _retTree;
			break;
		}
		case COLUMNCODEPAGE:
		{
			AST __t1187 = _t;
			AST tmp3189_AST_in = (AST)_t;
			match(_t,COLUMNCODEPAGE);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t1187;
			_t = _t.getNextSibling();
			break;
		}
		case CONTEXTHELPID:
		{
			AST __t1188 = _t;
			AST tmp3190_AST_in = (AST)_t;
			match(_t,CONTEXTHELPID);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t1188;
			_t = _t.getNextSibling();
			break;
		}
		case DECIMALS:
		{
			AST __t1189 = _t;
			AST tmp3191_AST_in = (AST)_t;
			match(_t,DECIMALS);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t1189;
			_t = _t.getNextSibling();
			break;
		}
		case DROPTARGET:
		{
			AST tmp3192_AST_in = (AST)_t;
			match(_t,DROPTARGET);
			_t = _t.getNextSibling();
			break;
		}
		case EXTENT:
		{
			extentphrase(_t);
			_t = _retTree;
			break;
		}
		case FONT:
		{
			AST __t1190 = _t;
			AST tmp3193_AST_in = (AST)_t;
			match(_t,FONT);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t1190;
			_t = _t.getNextSibling();
			break;
		}
		case FORMAT:
		{
			AST __t1191 = _t;
			AST tmp3194_AST_in = (AST)_t;
			match(_t,FORMAT);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t1191;
			_t = _t.getNextSibling();
			break;
		}
		case HELP:
		{
			AST __t1192 = _t;
			AST tmp3195_AST_in = (AST)_t;
			match(_t,HELP);
			_t = _t.getFirstChild();
			constant(_t);
			_t = _retTree;
			_t = __t1192;
			_t = _t.getNextSibling();
			break;
		}
		case INITIAL:
		{
			initial_constant(_t);
			_t = _retTree;
			break;
		}
		case COLUMNLABEL:
		case LABEL:
		{
			label_constant(_t);
			_t = _retTree;
			break;
		}
		case LIKE:
		{
			AST __t1193 = _t;
			AST tmp3196_AST_in = (AST)_t;
			match(_t,LIKE);
			_t = _t.getFirstChild();
			field(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case VALIDATE:
			{
				AST tmp3197_AST_in = (AST)_t;
				match(_t,VALIDATE);
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t1193;
			_t = _t.getNextSibling();
			break;
		}
		case MOUSEPOINTER:
		{
			AST __t1195 = _t;
			AST tmp3198_AST_in = (AST)_t;
			match(_t,MOUSEPOINTER);
			_t = _t.getFirstChild();
			expression(_t);
			_t = _retTree;
			_t = __t1195;
			_t = _t.getNextSibling();
			break;
		}
		case NOUNDO:
		{
			AST tmp3199_AST_in = (AST)_t;
			match(_t,NOUNDO);
			_t = _t.getNextSibling();
			if ( inputState.guessing==0 ) {
				tpSupport.noundo();
			}
			break;
		}
		case VIEWAS:
		{
			viewasphrase(_t);
			_t = _retTree;
			break;
		}
		case TTCODEPAGE:
		{
			AST tmp3200_AST_in = (AST)_t;
			match(_t,TTCODEPAGE);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void skipphrase(AST _t) throws RecognitionException {
		
		AST skipphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2126 = _t;
		AST tmp3201_AST_in = (AST)_t;
		match(_t,SKIP);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case LEFTPAREN:
		{
			funargs(_t);
			_t = _retTree;
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t2126;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void editorphrase(AST _t) throws RecognitionException {
		
		AST editorphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1125 = _t;
		AST tmp3202_AST_in = (AST)_t;
		match(_t,EDITOR);
		_t = _t.getFirstChild();
		{
		_loop1132:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case INNERCHARS:
			{
				AST __t1127 = _t;
				AST tmp3203_AST_in = (AST)_t;
				match(_t,INNERCHARS);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1127;
				_t = _t.getNextSibling();
				break;
			}
			case INNERLINES:
			{
				AST __t1128 = _t;
				AST tmp3204_AST_in = (AST)_t;
				match(_t,INNERLINES);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1128;
				_t = _t.getNextSibling();
				break;
			}
			case BUFFERCHARS:
			{
				AST __t1129 = _t;
				AST tmp3205_AST_in = (AST)_t;
				match(_t,BUFFERCHARS);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1129;
				_t = _t.getNextSibling();
				break;
			}
			case BUFFERLINES:
			{
				AST __t1130 = _t;
				AST tmp3206_AST_in = (AST)_t;
				match(_t,BUFFERLINES);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1130;
				_t = _t.getNextSibling();
				break;
			}
			case LARGE:
			{
				AST tmp3207_AST_in = (AST)_t;
				match(_t,LARGE);
				_t = _t.getNextSibling();
				break;
			}
			case MAXCHARS:
			{
				AST __t1131 = _t;
				AST tmp3208_AST_in = (AST)_t;
				match(_t,MAXCHARS);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t1131;
				_t = _t.getNextSibling();
				break;
			}
			case NOBOX:
			{
				AST tmp3209_AST_in = (AST)_t;
				match(_t,NOBOX);
				_t = _t.getNextSibling();
				break;
			}
			case NOWORDWRAP:
			{
				AST tmp3210_AST_in = (AST)_t;
				match(_t,NOWORDWRAP);
				_t = _t.getNextSibling();
				break;
			}
			case SCROLLBARHORIZONTAL:
			{
				AST tmp3211_AST_in = (AST)_t;
				match(_t,SCROLLBARHORIZONTAL);
				_t = _t.getNextSibling();
				break;
			}
			case SCROLLBARVERTICAL:
			{
				AST tmp3212_AST_in = (AST)_t;
				match(_t,SCROLLBARVERTICAL);
				_t = _t.getNextSibling();
				break;
			}
			case TOOLTIP:
			{
				tooltip_expr(_t);
				_t = _retTree;
				break;
			}
			case SIZE:
			case SIZECHARS:
			case SIZEPIXELS:
			{
				sizephrase(_t);
				_t = _retTree;
				break;
			}
			default:
			{
				break _loop1132;
			}
			}
		} while (true);
		}
		_t = __t1125;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void editingphrase(AST _t) throws RecognitionException {
		
		AST editingphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1151 = _t;
		AST tmp3213_AST_in = (AST)_t;
		match(_t,Editing_phrase);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case ID:
		{
			AST tmp3214_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			AST tmp3215_AST_in = (AST)_t;
			match(_t,LEXCOLON);
			_t = _t.getNextSibling();
			break;
		}
		case EDITING:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp3216_AST_in = (AST)_t;
		match(_t,EDITING);
		_t = _t.getNextSibling();
		block_colon(_t);
		_t = _retTree;
		{
		_loop1154:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_0.member(_t.getType()))) {
				blockorstate(_t);
				_t = _retTree;
			}
			else {
				break _loop1154;
			}
			
		} while (true);
		}
		AST tmp3217_AST_in = (AST)_t;
		match(_t,END);
		_t = _t.getNextSibling();
		_t = __t1151;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void viewasphrase(AST _t) throws RecognitionException {
		
		AST viewasphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2381 = _t;
		AST tmp3218_AST_in = (AST)_t;
		match(_t,VIEWAS);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case COMBOBOX:
		{
			comboboxphrase(_t);
			_t = _retTree;
			break;
		}
		case EDITOR:
		{
			editorphrase(_t);
			_t = _retTree;
			break;
		}
		case FILLIN:
		{
			fillinphrase(_t);
			_t = _retTree;
			break;
		}
		case RADIOSET:
		{
			radiosetphrase(_t);
			_t = _retTree;
			break;
		}
		case SELECTIONLIST:
		{
			selectionlistphrase(_t);
			_t = _retTree;
			break;
		}
		case SLIDER:
		{
			sliderphrase(_t);
			_t = _retTree;
			break;
		}
		case TEXT:
		{
			textphrase(_t);
			_t = _retTree;
			break;
		}
		case TOGGLEBOX:
		{
			toggleboxphrase(_t);
			_t = _retTree;
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t2381;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void fillinphrase(AST _t) throws RecognitionException {
		
		AST fillinphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1197 = _t;
		AST tmp3219_AST_in = (AST)_t;
		match(_t,FILLIN);
		_t = _t.getFirstChild();
		{
		_loop1199:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case NATIVE:
			{
				AST tmp3220_AST_in = (AST)_t;
				match(_t,NATIVE);
				_t = _t.getNextSibling();
				break;
			}
			case SIZE:
			case SIZECHARS:
			case SIZEPIXELS:
			{
				sizephrase(_t);
				_t = _retTree;
				break;
			}
			case TOOLTIP:
			{
				tooltip_expr(_t);
				_t = _retTree;
				break;
			}
			default:
			{
				break _loop1199;
			}
			}
		} while (true);
		}
		_t = __t1197;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void titlephrase(AST _t) throws RecognitionException {
		
		AST titlephrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2246 = _t;
		AST tmp3221_AST_in = (AST)_t;
		match(_t,TITLE);
		_t = _t.getFirstChild();
		{
		_loop2250:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case BGCOLOR:
			case DCOLOR:
			case FGCOLOR:
			case PFCOLOR:
			{
				color_expr(_t);
				_t = _retTree;
				break;
			}
			case COLOR:
			{
				AST __t2248 = _t;
				AST tmp3222_AST_in = (AST)_t;
				match(_t,COLOR);
				_t = _t.getFirstChild();
				anyorvalue(_t);
				_t = _retTree;
				_t = __t2248;
				_t = _t.getNextSibling();
				break;
			}
			case FONT:
			{
				AST __t2249 = _t;
				AST tmp3223_AST_in = (AST)_t;
				match(_t,FONT);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t2249;
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				break _loop2250;
			}
			}
		} while (true);
		}
		expression(_t);
		_t = _retTree;
		_t = __t2246;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void function_param(AST _t) throws RecognitionException {
		
		AST function_param_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		AST id = null;
		AST rec = null;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case BUFFER:
		{
			AST __t1334 = _t;
			AST tmp3224_AST_in = (AST)_t;
			match(_t,BUFFER);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case ID:
			{
				id = (AST)_t;
				match(_t,ID);
				_t = _t.getNextSibling();
				break;
			}
			case FOR:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp3225_AST_in = (AST)_t;
			match(_t,FOR);
			_t = _t.getNextSibling();
			rec = (AST)_t;
			match(_t,RECORD_NAME);
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case PRESELECT:
			{
				AST tmp3226_AST_in = (AST)_t;
				match(_t,PRESELECT);
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t1334;
			_t = _t.getNextSibling();
			break;
		}
		case INPUT:
		{
			AST __t1337 = _t;
			AST tmp3227_AST_in = (AST)_t;
			match(_t,INPUT);
			_t = _t.getFirstChild();
			function_param_arg(_t);
			_t = _retTree;
			_t = __t1337;
			_t = _t.getNextSibling();
			break;
		}
		case OUTPUT:
		{
			AST __t1338 = _t;
			AST tmp3228_AST_in = (AST)_t;
			match(_t,OUTPUT);
			_t = _t.getFirstChild();
			function_param_arg(_t);
			_t = _retTree;
			_t = __t1338;
			_t = _t.getNextSibling();
			break;
		}
		case INPUTOUTPUT:
		{
			AST __t1339 = _t;
			AST tmp3229_AST_in = (AST)_t;
			match(_t,INPUTOUTPUT);
			_t = _t.getFirstChild();
			function_param_arg(_t);
			_t = _retTree;
			_t = __t1339;
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void function_param_arg(AST _t) throws RecognitionException {
		
		AST function_param_arg_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case TABLE:
		{
			AST tmp3230_AST_in = (AST)_t;
			match(_t,TABLE);
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case FOR:
			{
				AST tmp3231_AST_in = (AST)_t;
				match(_t,FOR);
				_t = _t.getNextSibling();
				break;
			}
			case RECORD_NAME:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp3232_AST_in = (AST)_t;
			match(_t,RECORD_NAME);
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case APPEND:
			{
				AST tmp3233_AST_in = (AST)_t;
				match(_t,APPEND);
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			break;
		}
		case TABLEHANDLE:
		{
			AST tmp3234_AST_in = (AST)_t;
			match(_t,TABLEHANDLE);
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case FOR:
			{
				AST tmp3235_AST_in = (AST)_t;
				match(_t,FOR);
				_t = _t.getNextSibling();
				break;
			}
			case ID:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp3236_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case APPEND:
			{
				AST tmp3237_AST_in = (AST)_t;
				match(_t,APPEND);
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			break;
		}
		case CHARACTER:
		case COMHANDLE:
		case DATE:
		case DECIMAL:
		case HANDLE:
		case INTEGER:
		case LOGICAL:
		case MEMPTR:
		case RAW:
		case RECID:
		case ROWID:
		case WIDGETHANDLE:
		case ID:
		case DATETIME:
		case DATETIMETZ:
		case LONGCHAR:
		{
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case ID:
			{
				AST tmp3238_AST_in = (AST)_t;
				match(_t,ID);
				_t = _t.getNextSibling();
				AST tmp3239_AST_in = (AST)_t;
				match(_t,AS);
				_t = _t.getNextSibling();
				break;
			}
			case CHARACTER:
			case COMHANDLE:
			case DATE:
			case DECIMAL:
			case HANDLE:
			case INTEGER:
			case LOGICAL:
			case MEMPTR:
			case RAW:
			case RECID:
			case ROWID:
			case WIDGETHANDLE:
			case DATETIME:
			case DATETIMETZ:
			case LONGCHAR:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			datatype_var(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case EXTENT:
			{
				extentphrase(_t);
				_t = _retTree;
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void goon_elem(AST _t) throws RecognitionException {
		
		AST goon_elem_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		{
		AST tmp3240_AST_in = (AST)_t;
		match(_t,_tokenSet_35);
		_t = _t.getNextSibling();
		}
		{
		boolean synPredMatched1399 = false;
		if (((_t.getType()==OF))) {
			AST __t1399 = _t;
			synPredMatched1399 = true;
			inputState.guessing++;
			try {
				{
				AST tmp3241_AST_in = (AST)_t;
				match(_t,OF);
				_t = _t.getNextSibling();
				}
			}
			catch (RecognitionException pe) {
				synPredMatched1399 = false;
			}
			_t = __t1399;
			inputState.guessing--;
		}
		if ( synPredMatched1399 ) {
			AST tmp3242_AST_in = (AST)_t;
			match(_t,OF);
			_t = _t.getNextSibling();
			gwidget(_t);
			_t = _retTree;
		}
		else if (((_t.getType() >= LEXDATE && _t.getType() <= PARAM))) {
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		_retTree = _t;
	}
	
	public final void sqlaggregatefunc_arg(AST _t) throws RecognitionException {
		
		AST sqlaggregatefunc_arg_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST tmp3243_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case DISTINCT:
		{
			AST tmp3244_AST_in = (AST)_t;
			match(_t,DISTINCT);
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case LEFTPAREN:
			{
				AST tmp3245_AST_in = (AST)_t;
				match(_t,LEFTPAREN);
				_t = _t.getNextSibling();
				field(_t);
				_t = _retTree;
				AST tmp3246_AST_in = (AST)_t;
				match(_t,RIGHTPAREN);
				_t = _t.getNextSibling();
				break;
			}
			case Field_ref:
			{
				field(_t);
				_t = _retTree;
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			break;
		}
		case STAR:
		{
			AST tmp3247_AST_in = (AST)_t;
			match(_t,STAR);
			_t = _t.getNextSibling();
			break;
		}
		default:
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_39.member(_t.getType()))) {
				{
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==ALL)) {
					AST tmp3248_AST_in = (AST)_t;
					match(_t,ALL);
					_t = _t.getNextSibling();
				}
				else if ((_tokenSet_40.member(_t.getType()))) {
				}
				else {
					throw new NoViableAltException(_t);
				}
				
				}
				sqlscalar(_t);
				_t = _retTree;
			}
		else {
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp3249_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void return_options(AST _t) throws RecognitionException {
		
		AST return_options_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		{
		boolean synPredMatched2006 = false;
		if (((_tokenSet_4.member(_t.getType())))) {
			AST __t2006 = _t;
			synPredMatched2006 = true;
			inputState.guessing++;
			try {
				{
				errorfunc(_t);
				_t = _retTree;
				}
			}
			catch (RecognitionException pe) {
				synPredMatched2006 = false;
			}
			_t = __t2006;
			inputState.guessing--;
		}
		if ( synPredMatched2006 ) {
			expression(_t);
			_t = _retTree;
		}
		else {
			boolean synPredMatched2008 = false;
			if (((_t.getType()==ERROR))) {
				AST __t2008 = _t;
				synPredMatched2008 = true;
				inputState.guessing++;
				try {
					{
					AST tmp3250_AST_in = (AST)_t;
					match(_t,ERROR);
					_t = _t.getNextSibling();
					}
				}
				catch (RecognitionException pe) {
					synPredMatched2008 = false;
				}
				_t = __t2008;
				inputState.guessing--;
			}
			if ( synPredMatched2008 ) {
				AST tmp3251_AST_in = (AST)_t;
				match(_t,ERROR);
				_t = _t.getNextSibling();
				{
				if (_t==null) _t=ASTNULL;
				if ((_tokenSet_4.member(_t.getType()))) {
					expression(_t);
					_t = _retTree;
				}
				else if ((_t.getType()==EOF||_t.getType()==3||_t.getType()==PERIOD)) {
				}
				else {
					throw new NoViableAltException(_t);
				}
				
				}
			}
			else if ((_t.getType()==NOAPPLY)) {
				AST tmp3252_AST_in = (AST)_t;
				match(_t,NOAPPLY);
				_t = _t.getNextSibling();
				{
				if (_t==null) _t=ASTNULL;
				if ((_tokenSet_4.member(_t.getType()))) {
					expression(_t);
					_t = _retTree;
				}
				else if ((_t.getType()==EOF||_t.getType()==3||_t.getType()==PERIOD)) {
				}
				else {
					throw new NoViableAltException(_t);
				}
				
				}
			}
			else if ((_tokenSet_4.member(_t.getType()))) {
				expression(_t);
				_t = _retTree;
			}
			else {
				throw new NoViableAltException(_t);
			}
			}
			}
			_retTree = _t;
		}
		
	public final void radiosetphrase(AST _t) throws RecognitionException {
		
		AST radiosetphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t1908 = _t;
		AST tmp3253_AST_in = (AST)_t;
		match(_t,RADIOSET);
		_t = _t.getFirstChild();
		{
		_loop1920:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case HORIZONTAL:
			{
				AST __t1910 = _t;
				AST tmp3254_AST_in = (AST)_t;
				match(_t,HORIZONTAL);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case EXPAND:
				{
					AST tmp3255_AST_in = (AST)_t;
					match(_t,EXPAND);
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t1910;
				_t = _t.getNextSibling();
				break;
			}
			case VERTICAL:
			{
				AST tmp3256_AST_in = (AST)_t;
				match(_t,VERTICAL);
				_t = _t.getNextSibling();
				break;
			}
			case SIZE:
			case SIZECHARS:
			case SIZEPIXELS:
			{
				{
				sizephrase(_t);
				_t = _retTree;
				}
				break;
			}
			case RADIOBUTTONS:
			{
				AST __t1913 = _t;
				AST tmp3257_AST_in = (AST)_t;
				match(_t,RADIOBUTTONS);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case QSTRING:
				{
					AST tmp3258_AST_in = (AST)_t;
					match(_t,QSTRING);
					_t = _t.getNextSibling();
					break;
				}
				case UNQUOTEDSTRING:
				{
					AST tmp3259_AST_in = (AST)_t;
					match(_t,UNQUOTEDSTRING);
					_t = _t.getNextSibling();
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				AST tmp3260_AST_in = (AST)_t;
				match(_t,COMMA);
				_t = _t.getNextSibling();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case LEXDATE:
				case NUMBER:
				case QSTRING:
				case BIGENDIAN:
				case EXCLUSIVELOCK:
				case FALSE_KW:
				case FINDCASESENSITIVE:
				case FINDGLOBAL:
				case FINDNEXTOCCURRENCE:
				case FINDPREVOCCURRENCE:
				case FINDSELECT:
				case FINDWRAPAROUND:
				case HOSTBYTEORDER:
				case LITTLEENDIAN:
				case NO:
				case NOLOCK:
				case NOWAIT:
				case NULL_KW:
				case READAVAILABLE:
				case READEXACTNUM:
				case SEARCHSELF:
				case SEARCHTARGET:
				case SHARELOCK:
				case TRUE_KW:
				case WINDOWDELAYEDMINIMIZE:
				case WINDOWMAXIMIZED:
				case WINDOWMINIMIZED:
				case WINDOWNORMAL:
				case YES:
				case UNKNOWNVALUE:
				case FUNCTIONCALLTYPE:
				case GETATTRCALLTYPE:
				case PROCEDURECALLTYPE:
				case SAXCOMPLETE:
				case SAXPARSERERROR:
				case SAXRUNNING:
				case SAXUNINITIALIZED:
				case SETATTRCALLTYPE:
				case ROWUNMODIFIED:
				case ROWDELETED:
				case ROWMODIFIED:
				case ROWCREATED:
				{
					constant(_t);
					_t = _retTree;
					break;
				}
				case TODAY:
				{
					AST tmp3261_AST_in = (AST)_t;
					match(_t,TODAY);
					_t = _t.getNextSibling();
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				{
				_loop1919:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_t.getType()==COMMA)) {
						AST tmp3262_AST_in = (AST)_t;
						match(_t,COMMA);
						_t = _t.getNextSibling();
						{
						if (_t==null) _t=ASTNULL;
						switch ( _t.getType()) {
						case QSTRING:
						{
							AST tmp3263_AST_in = (AST)_t;
							match(_t,QSTRING);
							_t = _t.getNextSibling();
							break;
						}
						case UNQUOTEDSTRING:
						{
							AST tmp3264_AST_in = (AST)_t;
							match(_t,UNQUOTEDSTRING);
							_t = _t.getNextSibling();
							break;
						}
						default:
						{
							throw new NoViableAltException(_t);
						}
						}
						}
						AST tmp3265_AST_in = (AST)_t;
						match(_t,COMMA);
						_t = _t.getNextSibling();
						{
						if (_t==null) _t=ASTNULL;
						switch ( _t.getType()) {
						case LEXDATE:
						case NUMBER:
						case QSTRING:
						case BIGENDIAN:
						case EXCLUSIVELOCK:
						case FALSE_KW:
						case FINDCASESENSITIVE:
						case FINDGLOBAL:
						case FINDNEXTOCCURRENCE:
						case FINDPREVOCCURRENCE:
						case FINDSELECT:
						case FINDWRAPAROUND:
						case HOSTBYTEORDER:
						case LITTLEENDIAN:
						case NO:
						case NOLOCK:
						case NOWAIT:
						case NULL_KW:
						case READAVAILABLE:
						case READEXACTNUM:
						case SEARCHSELF:
						case SEARCHTARGET:
						case SHARELOCK:
						case TRUE_KW:
						case WINDOWDELAYEDMINIMIZE:
						case WINDOWMAXIMIZED:
						case WINDOWMINIMIZED:
						case WINDOWNORMAL:
						case YES:
						case UNKNOWNVALUE:
						case FUNCTIONCALLTYPE:
						case GETATTRCALLTYPE:
						case PROCEDURECALLTYPE:
						case SAXCOMPLETE:
						case SAXPARSERERROR:
						case SAXRUNNING:
						case SAXUNINITIALIZED:
						case SETATTRCALLTYPE:
						case ROWUNMODIFIED:
						case ROWDELETED:
						case ROWMODIFIED:
						case ROWCREATED:
						{
							constant(_t);
							_t = _retTree;
							break;
						}
						case TODAY:
						{
							AST tmp3266_AST_in = (AST)_t;
							match(_t,TODAY);
							_t = _t.getNextSibling();
							break;
						}
						default:
						{
							throw new NoViableAltException(_t);
						}
						}
						}
					}
					else {
						break _loop1919;
					}
					
				} while (true);
				}
				_t = __t1913;
				_t = _t.getNextSibling();
				break;
			}
			case TOOLTIP:
			{
				tooltip_expr(_t);
				_t = _retTree;
				break;
			}
			default:
			{
				break _loop1920;
			}
			}
		} while (true);
		}
		_t = __t1908;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void selectionlistphrase(AST _t) throws RecognitionException {
		
		AST selectionlistphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2081 = _t;
		AST tmp3267_AST_in = (AST)_t;
		match(_t,SELECTIONLIST);
		_t = _t.getFirstChild();
		{
		_loop2091:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case SINGLE:
			{
				AST tmp3268_AST_in = (AST)_t;
				match(_t,SINGLE);
				_t = _t.getNextSibling();
				break;
			}
			case MULTIPLE:
			{
				AST tmp3269_AST_in = (AST)_t;
				match(_t,MULTIPLE);
				_t = _t.getNextSibling();
				break;
			}
			case NODRAG:
			{
				AST tmp3270_AST_in = (AST)_t;
				match(_t,NODRAG);
				_t = _t.getNextSibling();
				break;
			}
			case LISTITEMS:
			{
				AST __t2083 = _t;
				AST tmp3271_AST_in = (AST)_t;
				match(_t,LISTITEMS);
				_t = _t.getFirstChild();
				constant(_t);
				_t = _retTree;
				{
				_loop2085:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_t.getType()==COMMA)) {
						AST tmp3272_AST_in = (AST)_t;
						match(_t,COMMA);
						_t = _t.getNextSibling();
						constant(_t);
						_t = _retTree;
					}
					else {
						break _loop2085;
					}
					
				} while (true);
				}
				_t = __t2083;
				_t = _t.getNextSibling();
				break;
			}
			case LISTITEMPAIRS:
			{
				AST __t2086 = _t;
				AST tmp3273_AST_in = (AST)_t;
				match(_t,LISTITEMPAIRS);
				_t = _t.getFirstChild();
				constant(_t);
				_t = _retTree;
				{
				_loop2088:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_t.getType()==COMMA)) {
						AST tmp3274_AST_in = (AST)_t;
						match(_t,COMMA);
						_t = _t.getNextSibling();
						constant(_t);
						_t = _retTree;
					}
					else {
						break _loop2088;
					}
					
				} while (true);
				}
				_t = __t2086;
				_t = _t.getNextSibling();
				break;
			}
			case SCROLLBARHORIZONTAL:
			{
				AST tmp3275_AST_in = (AST)_t;
				match(_t,SCROLLBARHORIZONTAL);
				_t = _t.getNextSibling();
				break;
			}
			case SCROLLBARVERTICAL:
			{
				AST tmp3276_AST_in = (AST)_t;
				match(_t,SCROLLBARVERTICAL);
				_t = _t.getNextSibling();
				break;
			}
			case INNERCHARS:
			{
				AST __t2089 = _t;
				AST tmp3277_AST_in = (AST)_t;
				match(_t,INNERCHARS);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t2089;
				_t = _t.getNextSibling();
				break;
			}
			case INNERLINES:
			{
				AST __t2090 = _t;
				AST tmp3278_AST_in = (AST)_t;
				match(_t,INNERLINES);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t2090;
				_t = _t.getNextSibling();
				break;
			}
			case SORT:
			{
				AST tmp3279_AST_in = (AST)_t;
				match(_t,SORT);
				_t = _t.getNextSibling();
				break;
			}
			case TOOLTIP:
			{
				tooltip_expr(_t);
				_t = _retTree;
				break;
			}
			case SIZE:
			case SIZECHARS:
			case SIZEPIXELS:
			{
				sizephrase(_t);
				_t = _retTree;
				break;
			}
			default:
			{
				break _loop2091;
			}
			}
		} while (true);
		}
		_t = __t2081;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void sliderphrase(AST _t) throws RecognitionException {
		
		AST sliderphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2129 = _t;
		AST tmp3280_AST_in = (AST)_t;
		match(_t,SLIDER);
		_t = _t.getFirstChild();
		{
		_loop2137:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case HORIZONTAL:
			{
				AST tmp3281_AST_in = (AST)_t;
				match(_t,HORIZONTAL);
				_t = _t.getNextSibling();
				break;
			}
			case MAXVALUE:
			{
				AST __t2131 = _t;
				AST tmp3282_AST_in = (AST)_t;
				match(_t,MAXVALUE);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t2131;
				_t = _t.getNextSibling();
				break;
			}
			case MINVALUE:
			{
				AST __t2132 = _t;
				AST tmp3283_AST_in = (AST)_t;
				match(_t,MINVALUE);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t2132;
				_t = _t.getNextSibling();
				break;
			}
			case VERTICAL:
			{
				AST tmp3284_AST_in = (AST)_t;
				match(_t,VERTICAL);
				_t = _t.getNextSibling();
				break;
			}
			case NOCURRENTVALUE:
			{
				AST tmp3285_AST_in = (AST)_t;
				match(_t,NOCURRENTVALUE);
				_t = _t.getNextSibling();
				break;
			}
			case LARGETOSMALL:
			{
				AST tmp3286_AST_in = (AST)_t;
				match(_t,LARGETOSMALL);
				_t = _t.getNextSibling();
				break;
			}
			case TICMARKS:
			{
				AST __t2133 = _t;
				AST tmp3287_AST_in = (AST)_t;
				match(_t,TICMARKS);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case NONE:
				{
					AST tmp3288_AST_in = (AST)_t;
					match(_t,NONE);
					_t = _t.getNextSibling();
					break;
				}
				case TOP:
				{
					AST tmp3289_AST_in = (AST)_t;
					match(_t,TOP);
					_t = _t.getNextSibling();
					break;
				}
				case BOTTOM:
				{
					AST tmp3290_AST_in = (AST)_t;
					match(_t,BOTTOM);
					_t = _t.getNextSibling();
					break;
				}
				case LEFT:
				{
					AST tmp3291_AST_in = (AST)_t;
					match(_t,LEFT);
					_t = _t.getNextSibling();
					break;
				}
				case RIGHT:
				{
					AST tmp3292_AST_in = (AST)_t;
					match(_t,RIGHT);
					_t = _t.getNextSibling();
					break;
				}
				case BOTH:
				{
					AST tmp3293_AST_in = (AST)_t;
					match(_t,BOTH);
					_t = _t.getNextSibling();
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case FREQUENCY:
				{
					AST __t2136 = _t;
					AST tmp3294_AST_in = (AST)_t;
					match(_t,FREQUENCY);
					_t = _t.getFirstChild();
					expression(_t);
					_t = _retTree;
					_t = __t2136;
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				_t = __t2133;
				_t = _t.getNextSibling();
				break;
			}
			case TOOLTIP:
			{
				tooltip_expr(_t);
				_t = _retTree;
				break;
			}
			case SIZE:
			case SIZECHARS:
			case SIZEPIXELS:
			{
				sizephrase(_t);
				_t = _retTree;
				break;
			}
			default:
			{
				break _loop2137;
			}
			}
		} while (true);
		}
		_t = __t2129;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void textphrase(AST _t) throws RecognitionException {
		
		AST textphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2238 = _t;
		AST tmp3295_AST_in = (AST)_t;
		match(_t,TEXT);
		_t = _t.getFirstChild();
		{
		_loop2240:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case SIZE:
			case SIZECHARS:
			case SIZEPIXELS:
			{
				sizephrase(_t);
				_t = _retTree;
				break;
			}
			case TOOLTIP:
			{
				tooltip_expr(_t);
				_t = _retTree;
				break;
			}
			default:
			{
				break _loop2240;
			}
			}
		} while (true);
		}
		_t = __t2238;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void toggleboxphrase(AST _t) throws RecognitionException {
		
		AST toggleboxphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2253 = _t;
		AST tmp3296_AST_in = (AST)_t;
		match(_t,TOGGLEBOX);
		_t = _t.getFirstChild();
		{
		_loop2255:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case SIZE:
			case SIZECHARS:
			case SIZEPIXELS:
			{
				sizephrase(_t);
				_t = _retTree;
				break;
			}
			case TOOLTIP:
			{
				tooltip_expr(_t);
				_t = _retTree;
				break;
			}
			default:
			{
				break _loop2255;
			}
			}
		} while (true);
		}
		_t = __t2253;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void sqlupdatestate(AST _t) throws RecognitionException {
		
		AST sqlupdatestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2568 = _t;
		AST tmp3297_AST_in = (AST)_t;
		match(_t,UPDATE);
		_t = _t.getFirstChild();
		record_name(_t);
		_t = _retTree;
		AST tmp3298_AST_in = (AST)_t;
		match(_t,SET);
		_t = _t.getNextSibling();
		sqlupdate_equal(_t);
		_t = _retTree;
		{
		_loop2570:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==COMMA)) {
				AST tmp3299_AST_in = (AST)_t;
				match(_t,COMMA);
				_t = _t.getNextSibling();
				sqlupdate_equal(_t);
				_t = _retTree;
			}
			else {
				break _loop2570;
			}
			
		} while (true);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case WHERE:
		{
			AST __t2572 = _t;
			AST tmp3300_AST_in = (AST)_t;
			match(_t,WHERE);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_14.member(_t.getType()))) {
				sqlexpression(_t);
				_t = _retTree;
			}
			else if ((_t.getType()==CURRENT)) {
				AST tmp3301_AST_in = (AST)_t;
				match(_t,CURRENT);
				_t = _t.getNextSibling();
				AST tmp3302_AST_in = (AST)_t;
				match(_t,OF);
				_t = _t.getNextSibling();
				AST tmp3303_AST_in = (AST)_t;
				match(_t,ID);
				_t = _t.getNextSibling();
			}
			else {
				throw new NoViableAltException(_t);
			}
			
			}
			_t = __t2572;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2568;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void updatestate(AST _t) throws RecognitionException {
		
		AST updatestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2344 = _t;
		AST tmp3304_AST_in = (AST)_t;
		match(_t,UPDATE);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case UNLESSHIDDEN:
		{
			AST tmp3305_AST_in = (AST)_t;
			match(_t,UNLESSHIDDEN);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case EXCEPT:
		case GOON:
		case IN_KW:
		case NOERROR_KW:
		case WITH:
		case Editing_phrase:
		case Form_item:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		if ( inputState.guessing==0 ) {
			tpSupport.updating(true);
		}
		{
		_loop2347:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==Form_item)) {
				form_item(_t);
				_t = _retTree;
			}
			else {
				break _loop2347;
			}
			
		} while (true);
		}
		if ( inputState.guessing==0 ) {
			tpSupport.updating(false);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case GOON:
		{
			goonphrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case EXCEPT:
		case IN_KW:
		case NOERROR_KW:
		case WITH:
		case Editing_phrase:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case EXCEPT:
		{
			AST __t2350 = _t;
			AST tmp3306_AST_in = (AST)_t;
			match(_t,EXCEPT);
			_t = _t.getFirstChild();
			{
			_loop2352:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==Field_ref)) {
					field(_t);
					_t = _retTree;
				}
				else {
					break _loop2352;
				}
				
			} while (true);
			}
			_t = __t2350;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case IN_KW:
		case NOERROR_KW:
		case WITH:
		case Editing_phrase:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case IN_KW:
		{
			AST __t2354 = _t;
			AST tmp3307_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getFirstChild();
			AST tmp3308_AST_in = (AST)_t;
			match(_t,WINDOW);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			_t = __t2354;
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		case WITH:
		case Editing_phrase:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case WITH:
		{
			framephrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		case Editing_phrase:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case Editing_phrase:
		{
			editingphrase(_t);
			_t = _retTree;
			break;
		}
		case EOF:
		case PERIOD:
		case NOERROR_KW:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case NOERROR_KW:
		{
			AST tmp3309_AST_in = (AST)_t;
			match(_t,NOERROR_KW);
			_t = _t.getNextSibling();
			break;
		}
		case EOF:
		case PERIOD:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		state_end(_t);
		_t = _retTree;
		_t = __t2344;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void unreservedkeyword(AST _t) throws RecognitionException {
		
		AST unreservedkeyword_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case AACBIT:
		{
			AST tmp3310_AST_in = (AST)_t;
			match(_t,AACBIT);
			_t = _t.getNextSibling();
			break;
		}
		case AACONTROL:
		{
			AST tmp3311_AST_in = (AST)_t;
			match(_t,AACONTROL);
			_t = _t.getNextSibling();
			break;
		}
		case AALIST:
		{
			AST tmp3312_AST_in = (AST)_t;
			match(_t,AALIST);
			_t = _t.getNextSibling();
			break;
		}
		case AAMEMORY:
		{
			AST tmp3313_AST_in = (AST)_t;
			match(_t,AAMEMORY);
			_t = _t.getNextSibling();
			break;
		}
		case AAMSG:
		{
			AST tmp3314_AST_in = (AST)_t;
			match(_t,AAMSG);
			_t = _t.getNextSibling();
			break;
		}
		case AAPCONTROL:
		{
			AST tmp3315_AST_in = (AST)_t;
			match(_t,AAPCONTROL);
			_t = _t.getNextSibling();
			break;
		}
		case AASERIAL:
		{
			AST tmp3316_AST_in = (AST)_t;
			match(_t,AASERIAL);
			_t = _t.getNextSibling();
			break;
		}
		case AATRACE:
		{
			AST tmp3317_AST_in = (AST)_t;
			match(_t,AATRACE);
			_t = _t.getNextSibling();
			break;
		}
		case ABSOLUTE:
		{
			AST tmp3318_AST_in = (AST)_t;
			match(_t,ABSOLUTE);
			_t = _t.getNextSibling();
			break;
		}
		case ACCELERATOR:
		{
			AST tmp3319_AST_in = (AST)_t;
			match(_t,ACCELERATOR);
			_t = _t.getNextSibling();
			break;
		}
		case ADDINTERVAL:
		{
			AST tmp3320_AST_in = (AST)_t;
			match(_t,ADDINTERVAL);
			_t = _t.getNextSibling();
			break;
		}
		case ADVISE:
		{
			AST tmp3321_AST_in = (AST)_t;
			match(_t,ADVISE);
			_t = _t.getNextSibling();
			break;
		}
		case ALERTBOX:
		{
			AST tmp3322_AST_in = (AST)_t;
			match(_t,ALERTBOX);
			_t = _t.getNextSibling();
			break;
		}
		case ALLOWREPLICATION:
		{
			AST tmp3323_AST_in = (AST)_t;
			match(_t,ALLOWREPLICATION);
			_t = _t.getNextSibling();
			break;
		}
		case ALTERNATEKEY:
		{
			AST tmp3324_AST_in = (AST)_t;
			match(_t,ALTERNATEKEY);
			_t = _t.getNextSibling();
			break;
		}
		case ANALYZE:
		{
			AST tmp3325_AST_in = (AST)_t;
			match(_t,ANALYZE);
			_t = _t.getNextSibling();
			break;
		}
		case ANSIONLY:
		{
			AST tmp3326_AST_in = (AST)_t;
			match(_t,ANSIONLY);
			_t = _t.getNextSibling();
			break;
		}
		case ANYWHERE:
		{
			AST tmp3327_AST_in = (AST)_t;
			match(_t,ANYWHERE);
			_t = _t.getNextSibling();
			break;
		}
		case APPEND:
		{
			AST tmp3328_AST_in = (AST)_t;
			match(_t,APPEND);
			_t = _t.getNextSibling();
			break;
		}
		case APPLICATION:
		{
			AST tmp3329_AST_in = (AST)_t;
			match(_t,APPLICATION);
			_t = _t.getNextSibling();
			break;
		}
		case ARRAYMESSAGE:
		{
			AST tmp3330_AST_in = (AST)_t;
			match(_t,ARRAYMESSAGE);
			_t = _t.getNextSibling();
			break;
		}
		case AS:
		{
			AST tmp3331_AST_in = (AST)_t;
			match(_t,AS);
			_t = _t.getNextSibling();
			break;
		}
		case ASC:
		{
			AST tmp3332_AST_in = (AST)_t;
			match(_t,ASC);
			_t = _t.getNextSibling();
			break;
		}
		case ASKOVERWRITE:
		{
			AST tmp3333_AST_in = (AST)_t;
			match(_t,ASKOVERWRITE);
			_t = _t.getNextSibling();
			break;
		}
		case ASYNCHRONOUS:
		{
			AST tmp3334_AST_in = (AST)_t;
			match(_t,ASYNCHRONOUS);
			_t = _t.getNextSibling();
			break;
		}
		case ATTACHMENT:
		{
			AST tmp3335_AST_in = (AST)_t;
			match(_t,ATTACHMENT);
			_t = _t.getNextSibling();
			break;
		}
		case AUTOCOMPLETION:
		{
			AST tmp3336_AST_in = (AST)_t;
			match(_t,AUTOCOMPLETION);
			_t = _t.getNextSibling();
			break;
		}
		case AUTOENDKEY:
		{
			AST tmp3337_AST_in = (AST)_t;
			match(_t,AUTOENDKEY);
			_t = _t.getNextSibling();
			break;
		}
		case AUTOGO:
		{
			AST tmp3338_AST_in = (AST)_t;
			match(_t,AUTOGO);
			_t = _t.getNextSibling();
			break;
		}
		case AUTOMATIC:
		{
			AST tmp3339_AST_in = (AST)_t;
			match(_t,AUTOMATIC);
			_t = _t.getNextSibling();
			break;
		}
		case AVERAGE:
		{
			AST tmp3340_AST_in = (AST)_t;
			match(_t,AVERAGE);
			_t = _t.getNextSibling();
			break;
		}
		case AVG:
		{
			AST tmp3341_AST_in = (AST)_t;
			match(_t,AVG);
			_t = _t.getNextSibling();
			break;
		}
		case BACKWARDS:
		{
			AST tmp3342_AST_in = (AST)_t;
			match(_t,BACKWARDS);
			_t = _t.getNextSibling();
			break;
		}
		case BASE64:
		{
			AST tmp3343_AST_in = (AST)_t;
			match(_t,BASE64);
			_t = _t.getNextSibling();
			break;
		}
		case BASEKEY:
		{
			AST tmp3344_AST_in = (AST)_t;
			match(_t,BASEKEY);
			_t = _t.getNextSibling();
			break;
		}
		case BGCOLOR:
		{
			AST tmp3345_AST_in = (AST)_t;
			match(_t,BGCOLOR);
			_t = _t.getNextSibling();
			break;
		}
		case BINARY:
		{
			AST tmp3346_AST_in = (AST)_t;
			match(_t,BINARY);
			_t = _t.getNextSibling();
			break;
		}
		case BINDWHERE:
		{
			AST tmp3347_AST_in = (AST)_t;
			match(_t,BINDWHERE);
			_t = _t.getNextSibling();
			break;
		}
		case BLOB:
		{
			AST tmp3348_AST_in = (AST)_t;
			match(_t,BLOB);
			_t = _t.getNextSibling();
			break;
		}
		case BOTH:
		{
			AST tmp3349_AST_in = (AST)_t;
			match(_t,BOTH);
			_t = _t.getNextSibling();
			break;
		}
		case BOTTOM:
		{
			AST tmp3350_AST_in = (AST)_t;
			match(_t,BOTTOM);
			_t = _t.getNextSibling();
			break;
		}
		case BROWSE:
		{
			AST tmp3351_AST_in = (AST)_t;
			match(_t,BROWSE);
			_t = _t.getNextSibling();
			break;
		}
		case BTOS:
		{
			AST tmp3352_AST_in = (AST)_t;
			match(_t,BTOS);
			_t = _t.getNextSibling();
			break;
		}
		case BUFFER:
		{
			AST tmp3353_AST_in = (AST)_t;
			match(_t,BUFFER);
			_t = _t.getNextSibling();
			break;
		}
		case BUFFERCHARS:
		{
			AST tmp3354_AST_in = (AST)_t;
			match(_t,BUFFERCHARS);
			_t = _t.getNextSibling();
			break;
		}
		case BUFFERLINES:
		{
			AST tmp3355_AST_in = (AST)_t;
			match(_t,BUFFERLINES);
			_t = _t.getNextSibling();
			break;
		}
		case BUFFERNAME:
		{
			AST tmp3356_AST_in = (AST)_t;
			match(_t,BUFFERNAME);
			_t = _t.getNextSibling();
			break;
		}
		case BUTTON:
		{
			AST tmp3357_AST_in = (AST)_t;
			match(_t,BUTTON);
			_t = _t.getNextSibling();
			break;
		}
		case BUTTONS:
		{
			AST tmp3358_AST_in = (AST)_t;
			match(_t,BUTTONS);
			_t = _t.getNextSibling();
			break;
		}
		case BYREFERENCE:
		{
			AST tmp3359_AST_in = (AST)_t;
			match(_t,BYREFERENCE);
			_t = _t.getNextSibling();
			break;
		}
		case BYVALUE:
		{
			AST tmp3360_AST_in = (AST)_t;
			match(_t,BYVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case BYTE:
		{
			AST tmp3361_AST_in = (AST)_t;
			match(_t,BYTE);
			_t = _t.getNextSibling();
			break;
		}
		case CACHE:
		{
			AST tmp3362_AST_in = (AST)_t;
			match(_t,CACHE);
			_t = _t.getNextSibling();
			break;
		}
		case CACHESIZE:
		{
			AST tmp3363_AST_in = (AST)_t;
			match(_t,CACHESIZE);
			_t = _t.getNextSibling();
			break;
		}
		case CANQUERY:
		{
			AST tmp3364_AST_in = (AST)_t;
			match(_t,CANQUERY);
			_t = _t.getNextSibling();
			break;
		}
		case CANSET:
		{
			AST tmp3365_AST_in = (AST)_t;
			match(_t,CANSET);
			_t = _t.getNextSibling();
			break;
		}
		case CANCELBUTTON:
		{
			AST tmp3366_AST_in = (AST)_t;
			match(_t,CANCELBUTTON);
			_t = _t.getNextSibling();
			break;
		}
		case CAPS:
		{
			AST tmp3367_AST_in = (AST)_t;
			match(_t,CAPS);
			_t = _t.getNextSibling();
			break;
		}
		case CDECL_KW:
		{
			AST tmp3368_AST_in = (AST)_t;
			match(_t,CDECL_KW);
			_t = _t.getNextSibling();
			break;
		}
		case CHAINED:
		{
			AST tmp3369_AST_in = (AST)_t;
			match(_t,CHAINED);
			_t = _t.getNextSibling();
			break;
		}
		case CHARACTER:
		{
			AST tmp3370_AST_in = (AST)_t;
			match(_t,CHARACTER);
			_t = _t.getNextSibling();
			break;
		}
		case CHARACTERLENGTH:
		{
			AST tmp3371_AST_in = (AST)_t;
			match(_t,CHARACTERLENGTH);
			_t = _t.getNextSibling();
			break;
		}
		case CHOOSE:
		{
			AST tmp3372_AST_in = (AST)_t;
			match(_t,CHOOSE);
			_t = _t.getNextSibling();
			break;
		}
		case CLOB:
		{
			AST tmp3373_AST_in = (AST)_t;
			match(_t,CLOB);
			_t = _t.getNextSibling();
			break;
		}
		case CLOSE:
		{
			AST tmp3374_AST_in = (AST)_t;
			match(_t,CLOSE);
			_t = _t.getNextSibling();
			break;
		}
		case CODEBASELOCATOR:
		{
			AST tmp3375_AST_in = (AST)_t;
			match(_t,CODEBASELOCATOR);
			_t = _t.getNextSibling();
			break;
		}
		case CODEPAGE:
		{
			AST tmp3376_AST_in = (AST)_t;
			match(_t,CODEPAGE);
			_t = _t.getNextSibling();
			break;
		}
		case CODEPAGECONVERT:
		{
			AST tmp3377_AST_in = (AST)_t;
			match(_t,CODEPAGECONVERT);
			_t = _t.getNextSibling();
			break;
		}
		case COLLATE:
		{
			AST tmp3378_AST_in = (AST)_t;
			match(_t,COLLATE);
			_t = _t.getNextSibling();
			break;
		}
		case COLOF:
		{
			AST tmp3379_AST_in = (AST)_t;
			match(_t,COLOF);
			_t = _t.getNextSibling();
			break;
		}
		case COLONALIGNED:
		{
			AST tmp3380_AST_in = (AST)_t;
			match(_t,COLONALIGNED);
			_t = _t.getNextSibling();
			break;
		}
		case COLORTABLE:
		{
			AST tmp3381_AST_in = (AST)_t;
			match(_t,COLORTABLE);
			_t = _t.getNextSibling();
			break;
		}
		case COLUMN:
		{
			AST tmp3382_AST_in = (AST)_t;
			match(_t,COLUMN);
			_t = _t.getNextSibling();
			break;
		}
		case COLUMNBGCOLOR:
		{
			AST tmp3383_AST_in = (AST)_t;
			match(_t,COLUMNBGCOLOR);
			_t = _t.getNextSibling();
			break;
		}
		case COLUMNCODEPAGE:
		{
			AST tmp3384_AST_in = (AST)_t;
			match(_t,COLUMNCODEPAGE);
			_t = _t.getNextSibling();
			break;
		}
		case COLUMNDCOLOR:
		{
			AST tmp3385_AST_in = (AST)_t;
			match(_t,COLUMNDCOLOR);
			_t = _t.getNextSibling();
			break;
		}
		case COLUMNFGCOLOR:
		{
			AST tmp3386_AST_in = (AST)_t;
			match(_t,COLUMNFGCOLOR);
			_t = _t.getNextSibling();
			break;
		}
		case COLUMNFONT:
		{
			AST tmp3387_AST_in = (AST)_t;
			match(_t,COLUMNFONT);
			_t = _t.getNextSibling();
			break;
		}
		case COLUMNOF:
		{
			AST tmp3388_AST_in = (AST)_t;
			match(_t,COLUMNOF);
			_t = _t.getNextSibling();
			break;
		}
		case COLUMNPFCOLOR:
		{
			AST tmp3389_AST_in = (AST)_t;
			match(_t,COLUMNPFCOLOR);
			_t = _t.getNextSibling();
			break;
		}
		case COLUMNS:
		{
			AST tmp3390_AST_in = (AST)_t;
			match(_t,COLUMNS);
			_t = _t.getNextSibling();
			break;
		}
		case COMHANDLE:
		{
			AST tmp3391_AST_in = (AST)_t;
			match(_t,COMHANDLE);
			_t = _t.getNextSibling();
			break;
		}
		case COMBOBOX:
		{
			AST tmp3392_AST_in = (AST)_t;
			match(_t,COMBOBOX);
			_t = _t.getNextSibling();
			break;
		}
		case COMMAND:
		{
			AST tmp3393_AST_in = (AST)_t;
			match(_t,COMMAND);
			_t = _t.getNextSibling();
			break;
		}
		case COMPARES:
		{
			AST tmp3394_AST_in = (AST)_t;
			match(_t,COMPARES);
			_t = _t.getNextSibling();
			break;
		}
		case COMPLETE:
		{
			AST tmp3395_AST_in = (AST)_t;
			match(_t,COMPLETE);
			_t = _t.getNextSibling();
			break;
		}
		case COMPILE:
		{
			AST tmp3396_AST_in = (AST)_t;
			match(_t,COMPILE);
			_t = _t.getNextSibling();
			break;
		}
		case CONFIGNAME:
		{
			AST tmp3397_AST_in = (AST)_t;
			match(_t,CONFIGNAME);
			_t = _t.getNextSibling();
			break;
		}
		case CONNECT:
		{
			AST tmp3398_AST_in = (AST)_t;
			match(_t,CONNECT);
			_t = _t.getNextSibling();
			break;
		}
		case CONTAINS:
		{
			AST tmp3399_AST_in = (AST)_t;
			match(_t,CONTAINS);
			_t = _t.getNextSibling();
			break;
		}
		case CONTENTS:
		{
			AST tmp3400_AST_in = (AST)_t;
			match(_t,CONTENTS);
			_t = _t.getNextSibling();
			break;
		}
		case CONTEXT:
		{
			AST tmp3401_AST_in = (AST)_t;
			match(_t,CONTEXT);
			_t = _t.getNextSibling();
			break;
		}
		case CONTEXTHELP:
		{
			AST tmp3402_AST_in = (AST)_t;
			match(_t,CONTEXTHELP);
			_t = _t.getNextSibling();
			break;
		}
		case CONTEXTHELPFILE:
		{
			AST tmp3403_AST_in = (AST)_t;
			match(_t,CONTEXTHELPFILE);
			_t = _t.getNextSibling();
			break;
		}
		case CONTEXTHELPID:
		{
			AST tmp3404_AST_in = (AST)_t;
			match(_t,CONTEXTHELPID);
			_t = _t.getNextSibling();
			break;
		}
		case CONTEXTPOPUP:
		{
			AST tmp3405_AST_in = (AST)_t;
			match(_t,CONTEXTPOPUP);
			_t = _t.getNextSibling();
			break;
		}
		case CONTROLFRAME:
		{
			AST tmp3406_AST_in = (AST)_t;
			match(_t,CONTROLFRAME);
			_t = _t.getNextSibling();
			break;
		}
		case CONVERT:
		{
			AST tmp3407_AST_in = (AST)_t;
			match(_t,CONVERT);
			_t = _t.getNextSibling();
			break;
		}
		case CONVERT3DCOLORS:
		{
			AST tmp3408_AST_in = (AST)_t;
			match(_t,CONVERT3DCOLORS);
			_t = _t.getNextSibling();
			break;
		}
		case COUNT:
		{
			AST tmp3409_AST_in = (AST)_t;
			match(_t,COUNT);
			_t = _t.getNextSibling();
			break;
		}
		case CREATETESTFILE:
		{
			AST tmp3410_AST_in = (AST)_t;
			match(_t,CREATETESTFILE);
			_t = _t.getNextSibling();
			break;
		}
		case CURRENCY:
		{
			AST tmp3411_AST_in = (AST)_t;
			match(_t,CURRENCY);
			_t = _t.getNextSibling();
			break;
		}
		case CURRENTENVIRONMENT:
		{
			AST tmp3412_AST_in = (AST)_t;
			match(_t,CURRENTENVIRONMENT);
			_t = _t.getNextSibling();
			break;
		}
		case CURRENTRESULTROW:
		{
			AST tmp3413_AST_in = (AST)_t;
			match(_t,CURRENTRESULTROW);
			_t = _t.getNextSibling();
			break;
		}
		case CURRENTVALUE:
		{
			AST tmp3414_AST_in = (AST)_t;
			match(_t,CURRENTVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case DATABIND:
		{
			AST tmp3415_AST_in = (AST)_t;
			match(_t,DATABIND);
			_t = _t.getNextSibling();
			break;
		}
		case DATE:
		{
			AST tmp3416_AST_in = (AST)_t;
			match(_t,DATE);
			_t = _t.getNextSibling();
			break;
		}
		case DATETIME:
		{
			AST tmp3417_AST_in = (AST)_t;
			match(_t,DATETIME);
			_t = _t.getNextSibling();
			break;
		}
		case DATETIMETZ:
		{
			AST tmp3418_AST_in = (AST)_t;
			match(_t,DATETIMETZ);
			_t = _t.getNextSibling();
			break;
		}
		case DAY:
		{
			AST tmp3419_AST_in = (AST)_t;
			match(_t,DAY);
			_t = _t.getNextSibling();
			break;
		}
		case DBIMS:
		{
			AST tmp3420_AST_in = (AST)_t;
			match(_t,DBIMS);
			_t = _t.getNextSibling();
			break;
		}
		case DCOLOR:
		{
			AST tmp3421_AST_in = (AST)_t;
			match(_t,DCOLOR);
			_t = _t.getNextSibling();
			break;
		}
		case DEBUG:
		{
			AST tmp3422_AST_in = (AST)_t;
			match(_t,DEBUG);
			_t = _t.getNextSibling();
			break;
		}
		case DECIMAL:
		{
			AST tmp3423_AST_in = (AST)_t;
			match(_t,DECIMAL);
			_t = _t.getNextSibling();
			break;
		}
		case DEFAULTBUTTON:
		{
			AST tmp3424_AST_in = (AST)_t;
			match(_t,DEFAULTBUTTON);
			_t = _t.getNextSibling();
			break;
		}
		case DEFAULTEXTENSION:
		{
			AST tmp3425_AST_in = (AST)_t;
			match(_t,DEFAULTEXTENSION);
			_t = _t.getNextSibling();
			break;
		}
		case DEFAULTNOXLATE:
		{
			AST tmp3426_AST_in = (AST)_t;
			match(_t,DEFAULTNOXLATE);
			_t = _t.getNextSibling();
			break;
		}
		case DEFERLOBFETCH:
		{
			AST tmp3427_AST_in = (AST)_t;
			match(_t,DEFERLOBFETCH);
			_t = _t.getNextSibling();
			break;
		}
		case DEFINED:
		{
			AST tmp3428_AST_in = (AST)_t;
			match(_t,DEFINED);
			_t = _t.getNextSibling();
			break;
		}
		case DELETERESULTLISTENTRY:
		{
			AST tmp3429_AST_in = (AST)_t;
			match(_t,DELETERESULTLISTENTRY);
			_t = _t.getNextSibling();
			break;
		}
		case DESC:
		{
			AST tmp3430_AST_in = (AST)_t;
			match(_t,DESC);
			_t = _t.getNextSibling();
			break;
		}
		case DESELECTION:
		{
			AST tmp3431_AST_in = (AST)_t;
			match(_t,DESELECTION);
			_t = _t.getNextSibling();
			break;
		}
		case DIALOGBOX:
		{
			AST tmp3432_AST_in = (AST)_t;
			match(_t,DIALOGBOX);
			_t = _t.getNextSibling();
			break;
		}
		case DIALOGHELP:
		{
			AST tmp3433_AST_in = (AST)_t;
			match(_t,DIALOGHELP);
			_t = _t.getNextSibling();
			break;
		}
		case DIR:
		{
			AST tmp3434_AST_in = (AST)_t;
			match(_t,DIR);
			_t = _t.getNextSibling();
			break;
		}
		case DISABLED:
		{
			AST tmp3435_AST_in = (AST)_t;
			match(_t,DISABLED);
			_t = _t.getNextSibling();
			break;
		}
		case DOUBLE:
		{
			AST tmp3436_AST_in = (AST)_t;
			match(_t,DOUBLE);
			_t = _t.getNextSibling();
			break;
		}
		case DROPDOWN:
		{
			AST tmp3437_AST_in = (AST)_t;
			match(_t,DROPDOWN);
			_t = _t.getNextSibling();
			break;
		}
		case DROPDOWNLIST:
		{
			AST tmp3438_AST_in = (AST)_t;
			match(_t,DROPDOWNLIST);
			_t = _t.getNextSibling();
			break;
		}
		case DROPFILENOTIFY:
		{
			AST tmp3439_AST_in = (AST)_t;
			match(_t,DROPFILENOTIFY);
			_t = _t.getNextSibling();
			break;
		}
		case DROPTARGET:
		{
			AST tmp3440_AST_in = (AST)_t;
			match(_t,DROPTARGET);
			_t = _t.getNextSibling();
			break;
		}
		case DUMP:
		{
			AST tmp3441_AST_in = (AST)_t;
			match(_t,DUMP);
			_t = _t.getNextSibling();
			break;
		}
		case DYNAMIC:
		{
			AST tmp3442_AST_in = (AST)_t;
			match(_t,DYNAMIC);
			_t = _t.getNextSibling();
			break;
		}
		case DYNAMICCURRENTVALUE:
		{
			AST tmp3443_AST_in = (AST)_t;
			match(_t,DYNAMICCURRENTVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case DYNAMICNEXTVALUE:
		{
			AST tmp3444_AST_in = (AST)_t;
			match(_t,DYNAMICNEXTVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case ECHO:
		{
			AST tmp3445_AST_in = (AST)_t;
			match(_t,ECHO);
			_t = _t.getNextSibling();
			break;
		}
		case EDGECHARS:
		{
			AST tmp3446_AST_in = (AST)_t;
			match(_t,EDGECHARS);
			_t = _t.getNextSibling();
			break;
		}
		case EDGEPIXELS:
		{
			AST tmp3447_AST_in = (AST)_t;
			match(_t,EDGEPIXELS);
			_t = _t.getNextSibling();
			break;
		}
		case EDITUNDO:
		{
			AST tmp3448_AST_in = (AST)_t;
			match(_t,EDITUNDO);
			_t = _t.getNextSibling();
			break;
		}
		case EDITOR:
		{
			AST tmp3449_AST_in = (AST)_t;
			match(_t,EDITOR);
			_t = _t.getNextSibling();
			break;
		}
		case EMPTY:
		{
			AST tmp3450_AST_in = (AST)_t;
			match(_t,EMPTY);
			_t = _t.getNextSibling();
			break;
		}
		case ENDMOVE:
		{
			AST tmp3451_AST_in = (AST)_t;
			match(_t,ENDMOVE);
			_t = _t.getNextSibling();
			break;
		}
		case ENDRESIZE:
		{
			AST tmp3452_AST_in = (AST)_t;
			match(_t,ENDRESIZE);
			_t = _t.getNextSibling();
			break;
		}
		case ENDROWRESIZE:
		{
			AST tmp3453_AST_in = (AST)_t;
			match(_t,ENDROWRESIZE);
			_t = _t.getNextSibling();
			break;
		}
		case ENDKEY:
		{
			AST tmp3454_AST_in = (AST)_t;
			match(_t,ENDKEY);
			_t = _t.getNextSibling();
			break;
		}
		case ENTERED:
		{
			AST tmp3455_AST_in = (AST)_t;
			match(_t,ENTERED);
			_t = _t.getNextSibling();
			break;
		}
		case EQ:
		{
			AST tmp3456_AST_in = (AST)_t;
			match(_t,EQ);
			_t = _t.getNextSibling();
			break;
		}
		case ERROR:
		{
			AST tmp3457_AST_in = (AST)_t;
			match(_t,ERROR);
			_t = _t.getNextSibling();
			break;
		}
		case ERRORCODE:
		{
			AST tmp3458_AST_in = (AST)_t;
			match(_t,ERRORCODE);
			_t = _t.getNextSibling();
			break;
		}
		case EVENTPROCEDURE:
		{
			AST tmp3459_AST_in = (AST)_t;
			match(_t,EVENTPROCEDURE);
			_t = _t.getNextSibling();
			break;
		}
		case EVENTS:
		{
			AST tmp3460_AST_in = (AST)_t;
			match(_t,EVENTS);
			_t = _t.getNextSibling();
			break;
		}
		case EXCLUSIVEID:
		{
			AST tmp3461_AST_in = (AST)_t;
			match(_t,EXCLUSIVEID);
			_t = _t.getNextSibling();
			break;
		}
		case EXCLUSIVEWEBUSER:
		{
			AST tmp3462_AST_in = (AST)_t;
			match(_t,EXCLUSIVEWEBUSER);
			_t = _t.getNextSibling();
			break;
		}
		case EXECUTE:
		{
			AST tmp3463_AST_in = (AST)_t;
			match(_t,EXECUTE);
			_t = _t.getNextSibling();
			break;
		}
		case EXP:
		{
			AST tmp3464_AST_in = (AST)_t;
			match(_t,EXP);
			_t = _t.getNextSibling();
			break;
		}
		case EXPAND:
		{
			AST tmp3465_AST_in = (AST)_t;
			match(_t,EXPAND);
			_t = _t.getNextSibling();
			break;
		}
		case EXPANDABLE:
		{
			AST tmp3466_AST_in = (AST)_t;
			match(_t,EXPANDABLE);
			_t = _t.getNextSibling();
			break;
		}
		case EXPLICIT:
		{
			AST tmp3467_AST_in = (AST)_t;
			match(_t,EXPLICIT);
			_t = _t.getNextSibling();
			break;
		}
		case EXTENDED:
		{
			AST tmp3468_AST_in = (AST)_t;
			match(_t,EXTENDED);
			_t = _t.getNextSibling();
			break;
		}
		case EXTENT:
		{
			AST tmp3469_AST_in = (AST)_t;
			match(_t,EXTENT);
			_t = _t.getNextSibling();
			break;
		}
		case EXTERNAL:
		{
			AST tmp3470_AST_in = (AST)_t;
			match(_t,EXTERNAL);
			_t = _t.getNextSibling();
			break;
		}
		case FGCOLOR:
		{
			AST tmp3471_AST_in = (AST)_t;
			match(_t,FGCOLOR);
			_t = _t.getNextSibling();
			break;
		}
		case FILE:
		{
			AST tmp3472_AST_in = (AST)_t;
			match(_t,FILE);
			_t = _t.getNextSibling();
			break;
		}
		case FILLIN:
		{
			AST tmp3473_AST_in = (AST)_t;
			match(_t,FILLIN);
			_t = _t.getNextSibling();
			break;
		}
		case FILTERS:
		{
			AST tmp3474_AST_in = (AST)_t;
			match(_t,FILTERS);
			_t = _t.getNextSibling();
			break;
		}
		case FINDER:
		{
			AST tmp3475_AST_in = (AST)_t;
			match(_t,FINDER);
			_t = _t.getNextSibling();
			break;
		}
		case FITLASTCOLUMN:
		{
			AST tmp3476_AST_in = (AST)_t;
			match(_t,FITLASTCOLUMN);
			_t = _t.getNextSibling();
			break;
		}
		case FIXCODEPAGE:
		{
			AST tmp3477_AST_in = (AST)_t;
			match(_t,FIXCODEPAGE);
			_t = _t.getNextSibling();
			break;
		}
		case FIXEDONLY:
		{
			AST tmp3478_AST_in = (AST)_t;
			match(_t,FIXEDONLY);
			_t = _t.getNextSibling();
			break;
		}
		case FLATBUTTON:
		{
			AST tmp3479_AST_in = (AST)_t;
			match(_t,FLATBUTTON);
			_t = _t.getNextSibling();
			break;
		}
		case FLOAT:
		{
			AST tmp3480_AST_in = (AST)_t;
			match(_t,FLOAT);
			_t = _t.getNextSibling();
			break;
		}
		case FONTTABLE:
		{
			AST tmp3481_AST_in = (AST)_t;
			match(_t,FONTTABLE);
			_t = _t.getNextSibling();
			break;
		}
		case FORCEFILE:
		{
			AST tmp3482_AST_in = (AST)_t;
			match(_t,FORCEFILE);
			_t = _t.getNextSibling();
			break;
		}
		case FORMINPUT:
		{
			AST tmp3483_AST_in = (AST)_t;
			match(_t,FORMINPUT);
			_t = _t.getNextSibling();
			break;
		}
		case FORWARDS:
		{
			AST tmp3484_AST_in = (AST)_t;
			match(_t,FORWARDS);
			_t = _t.getNextSibling();
			break;
		}
		case FREQUENCY:
		{
			AST tmp3485_AST_in = (AST)_t;
			match(_t,FREQUENCY);
			_t = _t.getNextSibling();
			break;
		}
		case FROMCURRENT:
		{
			AST tmp3486_AST_in = (AST)_t;
			match(_t,FROMCURRENT);
			_t = _t.getNextSibling();
			break;
		}
		case FUNCTION:
		{
			AST tmp3487_AST_in = (AST)_t;
			match(_t,FUNCTION);
			_t = _t.getNextSibling();
			break;
		}
		case GE:
		{
			AST tmp3488_AST_in = (AST)_t;
			match(_t,GE);
			_t = _t.getNextSibling();
			break;
		}
		case GENERATEMD5:
		{
			AST tmp3489_AST_in = (AST)_t;
			match(_t,GENERATEMD5);
			_t = _t.getNextSibling();
			break;
		}
		case GET:
		{
			AST tmp3490_AST_in = (AST)_t;
			match(_t,GET);
			_t = _t.getNextSibling();
			break;
		}
		case GETBITS:
		{
			AST tmp3491_AST_in = (AST)_t;
			match(_t,GETBITS);
			_t = _t.getNextSibling();
			break;
		}
		case GETBYTE:
		{
			AST tmp3492_AST_in = (AST)_t;
			match(_t,GETBYTE);
			_t = _t.getNextSibling();
			break;
		}
		case GETBYTES:
		{
			AST tmp3493_AST_in = (AST)_t;
			match(_t,GETBYTES);
			_t = _t.getNextSibling();
			break;
		}
		case GETBYTEORDER:
		{
			AST tmp3494_AST_in = (AST)_t;
			match(_t,GETBYTEORDER);
			_t = _t.getNextSibling();
			break;
		}
		case GETCGILIST:
		{
			AST tmp3495_AST_in = (AST)_t;
			match(_t,GETCGILIST);
			_t = _t.getNextSibling();
			break;
		}
		case GETCGIVALUE:
		{
			AST tmp3496_AST_in = (AST)_t;
			match(_t,GETCGIVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case GETCONFIGVALUE:
		{
			AST tmp3497_AST_in = (AST)_t;
			match(_t,GETCONFIGVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case GETDIR:
		{
			AST tmp3498_AST_in = (AST)_t;
			match(_t,GETDIR);
			_t = _t.getNextSibling();
			break;
		}
		case GETDOUBLE:
		{
			AST tmp3499_AST_in = (AST)_t;
			match(_t,GETDOUBLE);
			_t = _t.getNextSibling();
			break;
		}
		case GETFILE:
		{
			AST tmp3500_AST_in = (AST)_t;
			match(_t,GETFILE);
			_t = _t.getNextSibling();
			break;
		}
		case GETFLOAT:
		{
			AST tmp3501_AST_in = (AST)_t;
			match(_t,GETFLOAT);
			_t = _t.getNextSibling();
			break;
		}
		case GETLICENSE:
		{
			AST tmp3502_AST_in = (AST)_t;
			match(_t,GETLICENSE);
			_t = _t.getNextSibling();
			break;
		}
		case GETLONG:
		{
			AST tmp3503_AST_in = (AST)_t;
			match(_t,GETLONG);
			_t = _t.getNextSibling();
			break;
		}
		case GETPOINTERVALUE:
		{
			AST tmp3504_AST_in = (AST)_t;
			match(_t,GETPOINTERVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case GETSHORT:
		{
			AST tmp3505_AST_in = (AST)_t;
			match(_t,GETSHORT);
			_t = _t.getNextSibling();
			break;
		}
		case GETSIZE:
		{
			AST tmp3506_AST_in = (AST)_t;
			match(_t,GETSIZE);
			_t = _t.getNextSibling();
			break;
		}
		case GETSTRING:
		{
			AST tmp3507_AST_in = (AST)_t;
			match(_t,GETSTRING);
			_t = _t.getNextSibling();
			break;
		}
		case GETUNSIGNEDSHORT:
		{
			AST tmp3508_AST_in = (AST)_t;
			match(_t,GETUNSIGNEDSHORT);
			_t = _t.getNextSibling();
			break;
		}
		case GTHAN:
		{
			AST tmp3509_AST_in = (AST)_t;
			match(_t,GTHAN);
			_t = _t.getNextSibling();
			break;
		}
		case HANDLE:
		{
			AST tmp3510_AST_in = (AST)_t;
			match(_t,HANDLE);
			_t = _t.getNextSibling();
			break;
		}
		case HEIGHT:
		{
			AST tmp3511_AST_in = (AST)_t;
			match(_t,HEIGHT);
			_t = _t.getNextSibling();
			break;
		}
		case HELPTOPIC:
		{
			AST tmp3512_AST_in = (AST)_t;
			match(_t,HELPTOPIC);
			_t = _t.getNextSibling();
			break;
		}
		case HINT:
		{
			AST tmp3513_AST_in = (AST)_t;
			match(_t,HINT);
			_t = _t.getNextSibling();
			break;
		}
		case HORIZONTAL:
		{
			AST tmp3514_AST_in = (AST)_t;
			match(_t,HORIZONTAL);
			_t = _t.getNextSibling();
			break;
		}
		case HTMLENDOFLINE:
		{
			AST tmp3515_AST_in = (AST)_t;
			match(_t,HTMLENDOFLINE);
			_t = _t.getNextSibling();
			break;
		}
		case HTMLFRAMEBEGIN:
		{
			AST tmp3516_AST_in = (AST)_t;
			match(_t,HTMLFRAMEBEGIN);
			_t = _t.getNextSibling();
			break;
		}
		case HTMLFRAMEEND:
		{
			AST tmp3517_AST_in = (AST)_t;
			match(_t,HTMLFRAMEEND);
			_t = _t.getNextSibling();
			break;
		}
		case HTMLHEADERBEGIN:
		{
			AST tmp3518_AST_in = (AST)_t;
			match(_t,HTMLHEADERBEGIN);
			_t = _t.getNextSibling();
			break;
		}
		case HTMLHEADEREND:
		{
			AST tmp3519_AST_in = (AST)_t;
			match(_t,HTMLHEADEREND);
			_t = _t.getNextSibling();
			break;
		}
		case HTMLTITLEBEGIN:
		{
			AST tmp3520_AST_in = (AST)_t;
			match(_t,HTMLTITLEBEGIN);
			_t = _t.getNextSibling();
			break;
		}
		case HTMLTITLEEND:
		{
			AST tmp3521_AST_in = (AST)_t;
			match(_t,HTMLTITLEEND);
			_t = _t.getNextSibling();
			break;
		}
		case IMAGE:
		{
			AST tmp3522_AST_in = (AST)_t;
			match(_t,IMAGE);
			_t = _t.getNextSibling();
			break;
		}
		case IMAGEDOWN:
		{
			AST tmp3523_AST_in = (AST)_t;
			match(_t,IMAGEDOWN);
			_t = _t.getNextSibling();
			break;
		}
		case IMAGEINSENSITIVE:
		{
			AST tmp3524_AST_in = (AST)_t;
			match(_t,IMAGEINSENSITIVE);
			_t = _t.getNextSibling();
			break;
		}
		case IMAGESIZE:
		{
			AST tmp3525_AST_in = (AST)_t;
			match(_t,IMAGESIZE);
			_t = _t.getNextSibling();
			break;
		}
		case IMAGESIZECHARS:
		{
			AST tmp3526_AST_in = (AST)_t;
			match(_t,IMAGESIZECHARS);
			_t = _t.getNextSibling();
			break;
		}
		case IMAGESIZEPIXELS:
		{
			AST tmp3527_AST_in = (AST)_t;
			match(_t,IMAGESIZEPIXELS);
			_t = _t.getNextSibling();
			break;
		}
		case IMAGEUP:
		{
			AST tmp3528_AST_in = (AST)_t;
			match(_t,IMAGEUP);
			_t = _t.getNextSibling();
			break;
		}
		case INCREMENTEXCLUSIVEID:
		{
			AST tmp3529_AST_in = (AST)_t;
			match(_t,INCREMENTEXCLUSIVEID);
			_t = _t.getNextSibling();
			break;
		}
		case INDEXHINT:
		{
			AST tmp3530_AST_in = (AST)_t;
			match(_t,INDEXHINT);
			_t = _t.getNextSibling();
			break;
		}
		case INDEXEDREPOSITION:
		{
			AST tmp3531_AST_in = (AST)_t;
			match(_t,INDEXEDREPOSITION);
			_t = _t.getNextSibling();
			break;
		}
		case INFORMATION:
		{
			AST tmp3532_AST_in = (AST)_t;
			match(_t,INFORMATION);
			_t = _t.getNextSibling();
			break;
		}
		case INITIAL:
		{
			AST tmp3533_AST_in = (AST)_t;
			match(_t,INITIAL);
			_t = _t.getNextSibling();
			break;
		}
		case INITIALDIR:
		{
			AST tmp3534_AST_in = (AST)_t;
			match(_t,INITIALDIR);
			_t = _t.getNextSibling();
			break;
		}
		case INITIALFILTER:
		{
			AST tmp3535_AST_in = (AST)_t;
			match(_t,INITIALFILTER);
			_t = _t.getNextSibling();
			break;
		}
		case INITIATE:
		{
			AST tmp3536_AST_in = (AST)_t;
			match(_t,INITIATE);
			_t = _t.getNextSibling();
			break;
		}
		case INNER:
		{
			AST tmp3537_AST_in = (AST)_t;
			match(_t,INNER);
			_t = _t.getNextSibling();
			break;
		}
		case INNERCHARS:
		{
			AST tmp3538_AST_in = (AST)_t;
			match(_t,INNERCHARS);
			_t = _t.getNextSibling();
			break;
		}
		case INNERLINES:
		{
			AST tmp3539_AST_in = (AST)_t;
			match(_t,INNERLINES);
			_t = _t.getNextSibling();
			break;
		}
		case INTEGER:
		{
			AST tmp3540_AST_in = (AST)_t;
			match(_t,INTEGER);
			_t = _t.getNextSibling();
			break;
		}
		case INTERVAL:
		{
			AST tmp3541_AST_in = (AST)_t;
			match(_t,INTERVAL);
			_t = _t.getNextSibling();
			break;
		}
		case ITEM:
		{
			AST tmp3542_AST_in = (AST)_t;
			match(_t,ITEM);
			_t = _t.getNextSibling();
			break;
		}
		case ISCODEPAGEFIXED:
		{
			AST tmp3543_AST_in = (AST)_t;
			match(_t,ISCODEPAGEFIXED);
			_t = _t.getNextSibling();
			break;
		}
		case ISCOLUMNCODEPAGE:
		{
			AST tmp3544_AST_in = (AST)_t;
			match(_t,ISCOLUMNCODEPAGE);
			_t = _t.getNextSibling();
			break;
		}
		case ISODATE:
		{
			AST tmp3545_AST_in = (AST)_t;
			match(_t,ISODATE);
			_t = _t.getNextSibling();
			break;
		}
		case IUNKNOWN:
		{
			AST tmp3546_AST_in = (AST)_t;
			match(_t,IUNKNOWN);
			_t = _t.getNextSibling();
			break;
		}
		case JOINBYSQLDB:
		{
			AST tmp3547_AST_in = (AST)_t;
			match(_t,JOINBYSQLDB);
			_t = _t.getNextSibling();
			break;
		}
		case KEEPMESSAGES:
		{
			AST tmp3548_AST_in = (AST)_t;
			match(_t,KEEPMESSAGES);
			_t = _t.getNextSibling();
			break;
		}
		case KEEPTABORDER:
		{
			AST tmp3549_AST_in = (AST)_t;
			match(_t,KEEPTABORDER);
			_t = _t.getNextSibling();
			break;
		}
		case KEY:
		{
			AST tmp3550_AST_in = (AST)_t;
			match(_t,KEY);
			_t = _t.getNextSibling();
			break;
		}
		case KEYCODE:
		{
			AST tmp3551_AST_in = (AST)_t;
			match(_t,KEYCODE);
			_t = _t.getNextSibling();
			break;
		}
		case KEYFUNCTION:
		{
			AST tmp3552_AST_in = (AST)_t;
			match(_t,KEYFUNCTION);
			_t = _t.getNextSibling();
			break;
		}
		case KEYLABEL:
		{
			AST tmp3553_AST_in = (AST)_t;
			match(_t,KEYLABEL);
			_t = _t.getNextSibling();
			break;
		}
		case KEYWORDALL:
		{
			AST tmp3554_AST_in = (AST)_t;
			match(_t,KEYWORDALL);
			_t = _t.getNextSibling();
			break;
		}
		case LABELBGCOLOR:
		{
			AST tmp3555_AST_in = (AST)_t;
			match(_t,LABELBGCOLOR);
			_t = _t.getNextSibling();
			break;
		}
		case LABELDCOLOR:
		{
			AST tmp3556_AST_in = (AST)_t;
			match(_t,LABELDCOLOR);
			_t = _t.getNextSibling();
			break;
		}
		case LABELFGCOLOR:
		{
			AST tmp3557_AST_in = (AST)_t;
			match(_t,LABELFGCOLOR);
			_t = _t.getNextSibling();
			break;
		}
		case LABELFONT:
		{
			AST tmp3558_AST_in = (AST)_t;
			match(_t,LABELFONT);
			_t = _t.getNextSibling();
			break;
		}
		case LANDSCAPE:
		{
			AST tmp3559_AST_in = (AST)_t;
			match(_t,LANDSCAPE);
			_t = _t.getNextSibling();
			break;
		}
		case LANGUAGES:
		{
			AST tmp3560_AST_in = (AST)_t;
			match(_t,LANGUAGES);
			_t = _t.getNextSibling();
			break;
		}
		case LARGE:
		{
			AST tmp3561_AST_in = (AST)_t;
			match(_t,LARGE);
			_t = _t.getNextSibling();
			break;
		}
		case LARGETOSMALL:
		{
			AST tmp3562_AST_in = (AST)_t;
			match(_t,LARGETOSMALL);
			_t = _t.getNextSibling();
			break;
		}
		case LC:
		{
			AST tmp3563_AST_in = (AST)_t;
			match(_t,LC);
			_t = _t.getNextSibling();
			break;
		}
		case LE:
		{
			AST tmp3564_AST_in = (AST)_t;
			match(_t,LE);
			_t = _t.getNextSibling();
			break;
		}
		case LEFT:
		{
			AST tmp3565_AST_in = (AST)_t;
			match(_t,LEFT);
			_t = _t.getNextSibling();
			break;
		}
		case LEFTALIGNED:
		{
			AST tmp3566_AST_in = (AST)_t;
			match(_t,LEFTALIGNED);
			_t = _t.getNextSibling();
			break;
		}
		case LEFTTRIM:
		{
			AST tmp3567_AST_in = (AST)_t;
			match(_t,LEFTTRIM);
			_t = _t.getNextSibling();
			break;
		}
		case LENGTH:
		{
			AST tmp3568_AST_in = (AST)_t;
			match(_t,LENGTH);
			_t = _t.getNextSibling();
			break;
		}
		case LISTEVENTS:
		{
			AST tmp3569_AST_in = (AST)_t;
			match(_t,LISTEVENTS);
			_t = _t.getNextSibling();
			break;
		}
		case LISTITEMPAIRS:
		{
			AST tmp3570_AST_in = (AST)_t;
			match(_t,LISTITEMPAIRS);
			_t = _t.getNextSibling();
			break;
		}
		case LISTITEMS:
		{
			AST tmp3571_AST_in = (AST)_t;
			match(_t,LISTITEMS);
			_t = _t.getNextSibling();
			break;
		}
		case LISTQUERYATTRS:
		{
			AST tmp3572_AST_in = (AST)_t;
			match(_t,LISTQUERYATTRS);
			_t = _t.getNextSibling();
			break;
		}
		case LISTSETATTRS:
		{
			AST tmp3573_AST_in = (AST)_t;
			match(_t,LISTSETATTRS);
			_t = _t.getNextSibling();
			break;
		}
		case LISTWIDGETS:
		{
			AST tmp3574_AST_in = (AST)_t;
			match(_t,LISTWIDGETS);
			_t = _t.getNextSibling();
			break;
		}
		case LOAD:
		{
			AST tmp3575_AST_in = (AST)_t;
			match(_t,LOAD);
			_t = _t.getNextSibling();
			break;
		}
		case LOADPICTURE:
		{
			AST tmp3576_AST_in = (AST)_t;
			match(_t,LOADPICTURE);
			_t = _t.getNextSibling();
			break;
		}
		case LOBDIR:
		{
			AST tmp3577_AST_in = (AST)_t;
			match(_t,LOBDIR);
			_t = _t.getNextSibling();
			break;
		}
		case LOG:
		{
			AST tmp3578_AST_in = (AST)_t;
			match(_t,LOG);
			_t = _t.getNextSibling();
			break;
		}
		case LOGICAL:
		{
			AST tmp3579_AST_in = (AST)_t;
			match(_t,LOGICAL);
			_t = _t.getNextSibling();
			break;
		}
		case LONG:
		{
			AST tmp3580_AST_in = (AST)_t;
			match(_t,LONG);
			_t = _t.getNextSibling();
			break;
		}
		case LONGCHAR:
		{
			AST tmp3581_AST_in = (AST)_t;
			match(_t,LONGCHAR);
			_t = _t.getNextSibling();
			break;
		}
		case LOOKAHEAD:
		{
			AST tmp3582_AST_in = (AST)_t;
			match(_t,LOOKAHEAD);
			_t = _t.getNextSibling();
			break;
		}
		case LTHAN:
		{
			AST tmp3583_AST_in = (AST)_t;
			match(_t,LTHAN);
			_t = _t.getNextSibling();
			break;
		}
		case MACHINECLASS:
		{
			AST tmp3584_AST_in = (AST)_t;
			match(_t,MACHINECLASS);
			_t = _t.getNextSibling();
			break;
		}
		case MARGINEXTRA:
		{
			AST tmp3585_AST_in = (AST)_t;
			match(_t,MARGINEXTRA);
			_t = _t.getNextSibling();
			break;
		}
		case MATCHES:
		{
			AST tmp3586_AST_in = (AST)_t;
			match(_t,MATCHES);
			_t = _t.getNextSibling();
			break;
		}
		case MAX:
		{
			AST tmp3587_AST_in = (AST)_t;
			match(_t,MAX);
			_t = _t.getNextSibling();
			break;
		}
		case MAXCHARS:
		{
			AST tmp3588_AST_in = (AST)_t;
			match(_t,MAXCHARS);
			_t = _t.getNextSibling();
			break;
		}
		case MAXROWS:
		{
			AST tmp3589_AST_in = (AST)_t;
			match(_t,MAXROWS);
			_t = _t.getNextSibling();
			break;
		}
		case MAXSIZE:
		{
			AST tmp3590_AST_in = (AST)_t;
			match(_t,MAXSIZE);
			_t = _t.getNextSibling();
			break;
		}
		case MAXVALUE:
		{
			AST tmp3591_AST_in = (AST)_t;
			match(_t,MAXVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case MAXIMIZE:
		{
			AST tmp3592_AST_in = (AST)_t;
			match(_t,MAXIMIZE);
			_t = _t.getNextSibling();
			break;
		}
		case MAXIMUM:
		{
			AST tmp3593_AST_in = (AST)_t;
			match(_t,MAXIMUM);
			_t = _t.getNextSibling();
			break;
		}
		case MEMPTR:
		{
			AST tmp3594_AST_in = (AST)_t;
			match(_t,MEMPTR);
			_t = _t.getNextSibling();
			break;
		}
		case MENU:
		{
			AST tmp3595_AST_in = (AST)_t;
			match(_t,MENU);
			_t = _t.getNextSibling();
			break;
		}
		case MENUITEM:
		{
			AST tmp3596_AST_in = (AST)_t;
			match(_t,MENUITEM);
			_t = _t.getNextSibling();
			break;
		}
		case MENUBAR:
		{
			AST tmp3597_AST_in = (AST)_t;
			match(_t,MENUBAR);
			_t = _t.getNextSibling();
			break;
		}
		case MESSAGELINE:
		{
			AST tmp3598_AST_in = (AST)_t;
			match(_t,MESSAGELINE);
			_t = _t.getNextSibling();
			break;
		}
		case MIN:
		{
			AST tmp3599_AST_in = (AST)_t;
			match(_t,MIN);
			_t = _t.getNextSibling();
			break;
		}
		case MINSIZE:
		{
			AST tmp3600_AST_in = (AST)_t;
			match(_t,MINSIZE);
			_t = _t.getNextSibling();
			break;
		}
		case MINVALUE:
		{
			AST tmp3601_AST_in = (AST)_t;
			match(_t,MINVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case MINIMUM:
		{
			AST tmp3602_AST_in = (AST)_t;
			match(_t,MINIMUM);
			_t = _t.getNextSibling();
			break;
		}
		case MODULO:
		{
			AST tmp3603_AST_in = (AST)_t;
			match(_t,MODULO);
			_t = _t.getNextSibling();
			break;
		}
		case MONTH:
		{
			AST tmp3604_AST_in = (AST)_t;
			match(_t,MONTH);
			_t = _t.getNextSibling();
			break;
		}
		case MOUSE:
		{
			AST tmp3605_AST_in = (AST)_t;
			match(_t,MOUSE);
			_t = _t.getNextSibling();
			break;
		}
		case MOUSEPOINTER:
		{
			AST tmp3606_AST_in = (AST)_t;
			match(_t,MOUSEPOINTER);
			_t = _t.getNextSibling();
			break;
		}
		case MPE:
		{
			AST tmp3607_AST_in = (AST)_t;
			match(_t,MPE);
			_t = _t.getNextSibling();
			break;
		}
		case MTIME:
		{
			AST tmp3608_AST_in = (AST)_t;
			match(_t,MTIME);
			_t = _t.getNextSibling();
			break;
		}
		case MULTIPLE:
		{
			AST tmp3609_AST_in = (AST)_t;
			match(_t,MULTIPLE);
			_t = _t.getNextSibling();
			break;
		}
		case MULTIPLEKEY:
		{
			AST tmp3610_AST_in = (AST)_t;
			match(_t,MULTIPLEKEY);
			_t = _t.getNextSibling();
			break;
		}
		case MUSTEXIST:
		{
			AST tmp3611_AST_in = (AST)_t;
			match(_t,MUSTEXIST);
			_t = _t.getNextSibling();
			break;
		}
		case NATIVE:
		{
			AST tmp3612_AST_in = (AST)_t;
			match(_t,NATIVE);
			_t = _t.getNextSibling();
			break;
		}
		case NE:
		{
			AST tmp3613_AST_in = (AST)_t;
			match(_t,NE);
			_t = _t.getNextSibling();
			break;
		}
		case NEXTVALUE:
		{
			AST tmp3614_AST_in = (AST)_t;
			match(_t,NEXTVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case NOAPPLY:
		{
			AST tmp3615_AST_in = (AST)_t;
			match(_t,NOAPPLY);
			_t = _t.getNextSibling();
			break;
		}
		case NOARRAYMESSAGE:
		{
			AST tmp3616_AST_in = (AST)_t;
			match(_t,NOARRAYMESSAGE);
			_t = _t.getNextSibling();
			break;
		}
		case NOASSIGN:
		{
			AST tmp3617_AST_in = (AST)_t;
			match(_t,NOASSIGN);
			_t = _t.getNextSibling();
			break;
		}
		case NOAUTOVALIDATE:
		{
			AST tmp3618_AST_in = (AST)_t;
			match(_t,NOAUTOVALIDATE);
			_t = _t.getNextSibling();
			break;
		}
		case NOBINDWHERE:
		{
			AST tmp3619_AST_in = (AST)_t;
			match(_t,NOBINDWHERE);
			_t = _t.getNextSibling();
			break;
		}
		case NOBOX:
		{
			AST tmp3620_AST_in = (AST)_t;
			match(_t,NOBOX);
			_t = _t.getNextSibling();
			break;
		}
		case NOCOLUMNSCROLLING:
		{
			AST tmp3621_AST_in = (AST)_t;
			match(_t,NOCOLUMNSCROLLING);
			_t = _t.getNextSibling();
			break;
		}
		case NOCONSOLE:
		{
			AST tmp3622_AST_in = (AST)_t;
			match(_t,NOCONSOLE);
			_t = _t.getNextSibling();
			break;
		}
		case NOCONVERT:
		{
			AST tmp3623_AST_in = (AST)_t;
			match(_t,NOCONVERT);
			_t = _t.getNextSibling();
			break;
		}
		case NOCONVERT3DCOLORS:
		{
			AST tmp3624_AST_in = (AST)_t;
			match(_t,NOCONVERT3DCOLORS);
			_t = _t.getNextSibling();
			break;
		}
		case NOCURRENTVALUE:
		{
			AST tmp3625_AST_in = (AST)_t;
			match(_t,NOCURRENTVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case NODEBUG:
		{
			AST tmp3626_AST_in = (AST)_t;
			match(_t,NODEBUG);
			_t = _t.getNextSibling();
			break;
		}
		case NODRAG:
		{
			AST tmp3627_AST_in = (AST)_t;
			match(_t,NODRAG);
			_t = _t.getNextSibling();
			break;
		}
		case NOECHO:
		{
			AST tmp3628_AST_in = (AST)_t;
			match(_t,NOECHO);
			_t = _t.getNextSibling();
			break;
		}
		case NOEMPTYSPACE:
		{
			AST tmp3629_AST_in = (AST)_t;
			match(_t,NOEMPTYSPACE);
			_t = _t.getNextSibling();
			break;
		}
		case NOINDEXHINT:
		{
			AST tmp3630_AST_in = (AST)_t;
			match(_t,NOINDEXHINT);
			_t = _t.getNextSibling();
			break;
		}
		case NOJOINBYSQLDB:
		{
			AST tmp3631_AST_in = (AST)_t;
			match(_t,NOJOINBYSQLDB);
			_t = _t.getNextSibling();
			break;
		}
		case NOLOOKAHEAD:
		{
			AST tmp3632_AST_in = (AST)_t;
			match(_t,NOLOOKAHEAD);
			_t = _t.getNextSibling();
			break;
		}
		case NONE:
		{
			AST tmp3633_AST_in = (AST)_t;
			match(_t,NONE);
			_t = _t.getNextSibling();
			break;
		}
		case NORMAL:
		{
			AST tmp3634_AST_in = (AST)_t;
			match(_t,NORMAL);
			_t = _t.getNextSibling();
			break;
		}
		case NOROWMARKERS:
		{
			AST tmp3635_AST_in = (AST)_t;
			match(_t,NOROWMARKERS);
			_t = _t.getNextSibling();
			break;
		}
		case NOSCROLLBARVERTICAL:
		{
			AST tmp3636_AST_in = (AST)_t;
			match(_t,NOSCROLLBARVERTICAL);
			_t = _t.getNextSibling();
			break;
		}
		case NOSEPARATECONNECTION:
		{
			AST tmp3637_AST_in = (AST)_t;
			match(_t,NOSEPARATECONNECTION);
			_t = _t.getNextSibling();
			break;
		}
		case NOSEPARATORS:
		{
			AST tmp3638_AST_in = (AST)_t;
			match(_t,NOSEPARATORS);
			_t = _t.getNextSibling();
			break;
		}
		case NOTABSTOP:
		{
			AST tmp3639_AST_in = (AST)_t;
			match(_t,NOTABSTOP);
			_t = _t.getNextSibling();
			break;
		}
		case NOUNDERLINE:
		{
			AST tmp3640_AST_in = (AST)_t;
			match(_t,NOUNDERLINE);
			_t = _t.getNextSibling();
			break;
		}
		case NOWORDWRAP:
		{
			AST tmp3641_AST_in = (AST)_t;
			match(_t,NOWORDWRAP);
			_t = _t.getNextSibling();
			break;
		}
		case NUMCOPIES:
		{
			AST tmp3642_AST_in = (AST)_t;
			match(_t,NUMCOPIES);
			_t = _t.getNextSibling();
			break;
		}
		case NUMRESULTS:
		{
			AST tmp3643_AST_in = (AST)_t;
			match(_t,NUMRESULTS);
			_t = _t.getNextSibling();
			break;
		}
		case NUMERIC:
		{
			AST tmp3644_AST_in = (AST)_t;
			match(_t,NUMERIC);
			_t = _t.getNextSibling();
			break;
		}
		case OBJECT:
		{
			AST tmp3645_AST_in = (AST)_t;
			match(_t,OBJECT);
			_t = _t.getNextSibling();
			break;
		}
		case OCTETLENGTH:
		{
			AST tmp3646_AST_in = (AST)_t;
			match(_t,OCTETLENGTH);
			_t = _t.getNextSibling();
			break;
		}
		case OK:
		{
			AST tmp3647_AST_in = (AST)_t;
			match(_t,OK);
			_t = _t.getNextSibling();
			break;
		}
		case OKCANCEL:
		{
			AST tmp3648_AST_in = (AST)_t;
			match(_t,OKCANCEL);
			_t = _t.getNextSibling();
			break;
		}
		case ONLY:
		{
			AST tmp3649_AST_in = (AST)_t;
			match(_t,ONLY);
			_t = _t.getNextSibling();
			break;
		}
		case ORDER:
		{
			AST tmp3650_AST_in = (AST)_t;
			match(_t,ORDER);
			_t = _t.getNextSibling();
			break;
		}
		case ORDEREDJOIN:
		{
			AST tmp3651_AST_in = (AST)_t;
			match(_t,ORDEREDJOIN);
			_t = _t.getNextSibling();
			break;
		}
		case ORDINAL:
		{
			AST tmp3652_AST_in = (AST)_t;
			match(_t,ORDINAL);
			_t = _t.getNextSibling();
			break;
		}
		case OS2:
		{
			AST tmp3653_AST_in = (AST)_t;
			match(_t,OS2);
			_t = _t.getNextSibling();
			break;
		}
		case OS400:
		{
			AST tmp3654_AST_in = (AST)_t;
			match(_t,OS400);
			_t = _t.getNextSibling();
			break;
		}
		case OSDRIVES:
		{
			AST tmp3655_AST_in = (AST)_t;
			match(_t,OSDRIVES);
			_t = _t.getNextSibling();
			break;
		}
		case OSERROR:
		{
			AST tmp3656_AST_in = (AST)_t;
			match(_t,OSERROR);
			_t = _t.getNextSibling();
			break;
		}
		case OSGETENV:
		{
			AST tmp3657_AST_in = (AST)_t;
			match(_t,OSGETENV);
			_t = _t.getNextSibling();
			break;
		}
		case OUTER:
		{
			AST tmp3658_AST_in = (AST)_t;
			match(_t,OUTER);
			_t = _t.getNextSibling();
			break;
		}
		case OUTERJOIN:
		{
			AST tmp3659_AST_in = (AST)_t;
			match(_t,OUTERJOIN);
			_t = _t.getNextSibling();
			break;
		}
		case OVERRIDE:
		{
			AST tmp3660_AST_in = (AST)_t;
			match(_t,OVERRIDE);
			_t = _t.getNextSibling();
			break;
		}
		case PAGESIZE_KW:
		{
			AST tmp3661_AST_in = (AST)_t;
			match(_t,PAGESIZE_KW);
			_t = _t.getNextSibling();
			break;
		}
		case PAGEWIDTH:
		{
			AST tmp3662_AST_in = (AST)_t;
			match(_t,PAGEWIDTH);
			_t = _t.getNextSibling();
			break;
		}
		case PAGED:
		{
			AST tmp3663_AST_in = (AST)_t;
			match(_t,PAGED);
			_t = _t.getNextSibling();
			break;
		}
		case PARENT:
		{
			AST tmp3664_AST_in = (AST)_t;
			match(_t,PARENT);
			_t = _t.getNextSibling();
			break;
		}
		case PARTIALKEY:
		{
			AST tmp3665_AST_in = (AST)_t;
			match(_t,PARTIALKEY);
			_t = _t.getNextSibling();
			break;
		}
		case PASCAL_KW:
		{
			AST tmp3666_AST_in = (AST)_t;
			match(_t,PASCAL_KW);
			_t = _t.getNextSibling();
			break;
		}
		case PERFORMANCE:
		{
			AST tmp3667_AST_in = (AST)_t;
			match(_t,PERFORMANCE);
			_t = _t.getNextSibling();
			break;
		}
		case PFCOLOR:
		{
			AST tmp3668_AST_in = (AST)_t;
			match(_t,PFCOLOR);
			_t = _t.getNextSibling();
			break;
		}
		case PINNABLE:
		{
			AST tmp3669_AST_in = (AST)_t;
			match(_t,PINNABLE);
			_t = _t.getNextSibling();
			break;
		}
		case PORTRAIT:
		{
			AST tmp3670_AST_in = (AST)_t;
			match(_t,PORTRAIT);
			_t = _t.getNextSibling();
			break;
		}
		case POSITION:
		{
			AST tmp3671_AST_in = (AST)_t;
			match(_t,POSITION);
			_t = _t.getNextSibling();
			break;
		}
		case PRECISION:
		{
			AST tmp3672_AST_in = (AST)_t;
			match(_t,PRECISION);
			_t = _t.getNextSibling();
			break;
		}
		case PRESELECT:
		{
			AST tmp3673_AST_in = (AST)_t;
			match(_t,PRESELECT);
			_t = _t.getNextSibling();
			break;
		}
		case PREV:
		{
			AST tmp3674_AST_in = (AST)_t;
			match(_t,PREV);
			_t = _t.getNextSibling();
			break;
		}
		case PRIMARY:
		{
			AST tmp3675_AST_in = (AST)_t;
			match(_t,PRIMARY);
			_t = _t.getNextSibling();
			break;
		}
		case PRINTER:
		{
			AST tmp3676_AST_in = (AST)_t;
			match(_t,PRINTER);
			_t = _t.getNextSibling();
			break;
		}
		case PRINTERSETUP:
		{
			AST tmp3677_AST_in = (AST)_t;
			match(_t,PRINTERSETUP);
			_t = _t.getNextSibling();
			break;
		}
		case PRIVATE:
		{
			AST tmp3678_AST_in = (AST)_t;
			match(_t,PRIVATE);
			_t = _t.getNextSibling();
			break;
		}
		case PROCTEXT:
		{
			AST tmp3679_AST_in = (AST)_t;
			match(_t,PROCTEXT);
			_t = _t.getNextSibling();
			break;
		}
		case PROCTEXTBUFFER:
		{
			AST tmp3680_AST_in = (AST)_t;
			match(_t,PROCTEXTBUFFER);
			_t = _t.getNextSibling();
			break;
		}
		case PROCEDURE:
		{
			AST tmp3681_AST_in = (AST)_t;
			match(_t,PROCEDURE);
			_t = _t.getNextSibling();
			break;
		}
		case PROFILER:
		{
			AST tmp3682_AST_in = (AST)_t;
			match(_t,PROFILER);
			_t = _t.getNextSibling();
			break;
		}
		case PROMPT:
		{
			AST tmp3683_AST_in = (AST)_t;
			match(_t,PROMPT);
			_t = _t.getNextSibling();
			break;
		}
		case PUBLIC:
		{
			AST tmp3684_AST_in = (AST)_t;
			match(_t,PUBLIC);
			_t = _t.getNextSibling();
			break;
		}
		case PUBLISH:
		{
			AST tmp3685_AST_in = (AST)_t;
			match(_t,PUBLISH);
			_t = _t.getNextSibling();
			break;
		}
		case PUTBITS:
		{
			AST tmp3686_AST_in = (AST)_t;
			match(_t,PUTBITS);
			_t = _t.getNextSibling();
			break;
		}
		case PUTBYTES:
		{
			AST tmp3687_AST_in = (AST)_t;
			match(_t,PUTBYTES);
			_t = _t.getNextSibling();
			break;
		}
		case PUTDOUBLE:
		{
			AST tmp3688_AST_in = (AST)_t;
			match(_t,PUTDOUBLE);
			_t = _t.getNextSibling();
			break;
		}
		case PUTFLOAT:
		{
			AST tmp3689_AST_in = (AST)_t;
			match(_t,PUTFLOAT);
			_t = _t.getNextSibling();
			break;
		}
		case PUTLONG:
		{
			AST tmp3690_AST_in = (AST)_t;
			match(_t,PUTLONG);
			_t = _t.getNextSibling();
			break;
		}
		case PUTSHORT:
		{
			AST tmp3691_AST_in = (AST)_t;
			match(_t,PUTSHORT);
			_t = _t.getNextSibling();
			break;
		}
		case PUTSTRING:
		{
			AST tmp3692_AST_in = (AST)_t;
			match(_t,PUTSTRING);
			_t = _t.getNextSibling();
			break;
		}
		case QUESTION:
		{
			AST tmp3693_AST_in = (AST)_t;
			match(_t,QUESTION);
			_t = _t.getNextSibling();
			break;
		}
		case QUOTER:
		{
			AST tmp3694_AST_in = (AST)_t;
			match(_t,QUOTER);
			_t = _t.getNextSibling();
			break;
		}
		case RADIOBUTTONS:
		{
			AST tmp3695_AST_in = (AST)_t;
			match(_t,RADIOBUTTONS);
			_t = _t.getNextSibling();
			break;
		}
		case RADIOSET:
		{
			AST tmp3696_AST_in = (AST)_t;
			match(_t,RADIOSET);
			_t = _t.getNextSibling();
			break;
		}
		case RANDOM:
		{
			AST tmp3697_AST_in = (AST)_t;
			match(_t,RANDOM);
			_t = _t.getNextSibling();
			break;
		}
		case RAW:
		{
			AST tmp3698_AST_in = (AST)_t;
			match(_t,RAW);
			_t = _t.getNextSibling();
			break;
		}
		case RAWTRANSFER:
		{
			AST tmp3699_AST_in = (AST)_t;
			match(_t,RAWTRANSFER);
			_t = _t.getNextSibling();
			break;
		}
		case READ:
		{
			AST tmp3700_AST_in = (AST)_t;
			match(_t,READ);
			_t = _t.getNextSibling();
			break;
		}
		case READONLY:
		{
			AST tmp3701_AST_in = (AST)_t;
			match(_t,READONLY);
			_t = _t.getNextSibling();
			break;
		}
		case REAL:
		{
			AST tmp3702_AST_in = (AST)_t;
			match(_t,REAL);
			_t = _t.getNextSibling();
			break;
		}
		case RECORDLENGTH:
		{
			AST tmp3703_AST_in = (AST)_t;
			match(_t,RECORDLENGTH);
			_t = _t.getNextSibling();
			break;
		}
		case RECURSIVE:
		{
			AST tmp3704_AST_in = (AST)_t;
			match(_t,RECURSIVE);
			_t = _t.getNextSibling();
			break;
		}
		case RELATIONFIELDS:
		{
			AST tmp3705_AST_in = (AST)_t;
			match(_t,RELATIONFIELDS);
			_t = _t.getNextSibling();
			break;
		}
		case REPLACE:
		{
			AST tmp3706_AST_in = (AST)_t;
			match(_t,REPLACE);
			_t = _t.getNextSibling();
			break;
		}
		case REPLICATIONCREATE:
		{
			AST tmp3707_AST_in = (AST)_t;
			match(_t,REPLICATIONCREATE);
			_t = _t.getNextSibling();
			break;
		}
		case REPLICATIONDELETE:
		{
			AST tmp3708_AST_in = (AST)_t;
			match(_t,REPLICATIONDELETE);
			_t = _t.getNextSibling();
			break;
		}
		case REPLICATIONWRITE:
		{
			AST tmp3709_AST_in = (AST)_t;
			match(_t,REPLICATIONWRITE);
			_t = _t.getNextSibling();
			break;
		}
		case REPOSITIONFORWARD:
		{
			AST tmp3710_AST_in = (AST)_t;
			match(_t,REPOSITIONFORWARD);
			_t = _t.getNextSibling();
			break;
		}
		case REQUEST:
		{
			AST tmp3711_AST_in = (AST)_t;
			match(_t,REQUEST);
			_t = _t.getNextSibling();
			break;
		}
		case RESULT:
		{
			AST tmp3712_AST_in = (AST)_t;
			match(_t,RESULT);
			_t = _t.getNextSibling();
			break;
		}
		case RETAINSHAPE:
		{
			AST tmp3713_AST_in = (AST)_t;
			match(_t,RETAINSHAPE);
			_t = _t.getNextSibling();
			break;
		}
		case RETRYCANCEL:
		{
			AST tmp3714_AST_in = (AST)_t;
			match(_t,RETRYCANCEL);
			_t = _t.getNextSibling();
			break;
		}
		case RETURNS:
		{
			AST tmp3715_AST_in = (AST)_t;
			match(_t,RETURNS);
			_t = _t.getNextSibling();
			break;
		}
		case RETURNTOSTARTDIR:
		{
			AST tmp3716_AST_in = (AST)_t;
			match(_t,RETURNTOSTARTDIR);
			_t = _t.getNextSibling();
			break;
		}
		case RETURNVALUE:
		{
			AST tmp3717_AST_in = (AST)_t;
			match(_t,RETURNVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case REVERSEFROM:
		{
			AST tmp3718_AST_in = (AST)_t;
			match(_t,REVERSEFROM);
			_t = _t.getNextSibling();
			break;
		}
		case RGBVALUE:
		{
			AST tmp3719_AST_in = (AST)_t;
			match(_t,RGBVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case RIGHT:
		{
			AST tmp3720_AST_in = (AST)_t;
			match(_t,RIGHT);
			_t = _t.getNextSibling();
			break;
		}
		case RIGHTALIGNED:
		{
			AST tmp3721_AST_in = (AST)_t;
			match(_t,RIGHTALIGNED);
			_t = _t.getNextSibling();
			break;
		}
		case RIGHTTRIM:
		{
			AST tmp3722_AST_in = (AST)_t;
			match(_t,RIGHTTRIM);
			_t = _t.getNextSibling();
			break;
		}
		case ROUND:
		{
			AST tmp3723_AST_in = (AST)_t;
			match(_t,ROUND);
			_t = _t.getNextSibling();
			break;
		}
		case ROW:
		{
			AST tmp3724_AST_in = (AST)_t;
			match(_t,ROW);
			_t = _t.getNextSibling();
			break;
		}
		case ROWHEIGHTCHARS:
		{
			AST tmp3725_AST_in = (AST)_t;
			match(_t,ROWHEIGHTCHARS);
			_t = _t.getNextSibling();
			break;
		}
		case ROWHEIGHTPIXELS:
		{
			AST tmp3726_AST_in = (AST)_t;
			match(_t,ROWHEIGHTPIXELS);
			_t = _t.getNextSibling();
			break;
		}
		case ROWID:
		{
			AST tmp3727_AST_in = (AST)_t;
			match(_t,ROWID);
			_t = _t.getNextSibling();
			break;
		}
		case ROWOF:
		{
			AST tmp3728_AST_in = (AST)_t;
			match(_t,ROWOF);
			_t = _t.getNextSibling();
			break;
		}
		case RULE:
		{
			AST tmp3729_AST_in = (AST)_t;
			match(_t,RULE);
			_t = _t.getNextSibling();
			break;
		}
		case RUNPROCEDURE:
		{
			AST tmp3730_AST_in = (AST)_t;
			match(_t,RUNPROCEDURE);
			_t = _t.getNextSibling();
			break;
		}
		case SAVECACHE:
		{
			AST tmp3731_AST_in = (AST)_t;
			match(_t,SAVECACHE);
			_t = _t.getNextSibling();
			break;
		}
		case SAVEAS:
		{
			AST tmp3732_AST_in = (AST)_t;
			match(_t,SAVEAS);
			_t = _t.getNextSibling();
			break;
		}
		case SAXREADER:
		{
			AST tmp3733_AST_in = (AST)_t;
			match(_t,SAXREADER);
			_t = _t.getNextSibling();
			break;
		}
		case SCROLLABLE:
		{
			AST tmp3734_AST_in = (AST)_t;
			match(_t,SCROLLABLE);
			_t = _t.getNextSibling();
			break;
		}
		case SCROLLBARHORIZONTAL:
		{
			AST tmp3735_AST_in = (AST)_t;
			match(_t,SCROLLBARHORIZONTAL);
			_t = _t.getNextSibling();
			break;
		}
		case SCROLLBARVERTICAL:
		{
			AST tmp3736_AST_in = (AST)_t;
			match(_t,SCROLLBARVERTICAL);
			_t = _t.getNextSibling();
			break;
		}
		case SCROLLING:
		{
			AST tmp3737_AST_in = (AST)_t;
			match(_t,SCROLLING);
			_t = _t.getNextSibling();
			break;
		}
		case SECTION:
		{
			AST tmp3738_AST_in = (AST)_t;
			match(_t,SECTION);
			_t = _t.getNextSibling();
			break;
		}
		case SELECTION:
		{
			AST tmp3739_AST_in = (AST)_t;
			match(_t,SELECTION);
			_t = _t.getNextSibling();
			break;
		}
		case SELECTIONLIST:
		{
			AST tmp3740_AST_in = (AST)_t;
			match(_t,SELECTIONLIST);
			_t = _t.getNextSibling();
			break;
		}
		case SEND:
		{
			AST tmp3741_AST_in = (AST)_t;
			match(_t,SEND);
			_t = _t.getNextSibling();
			break;
		}
		case SENDSQLSTATEMENT:
		{
			AST tmp3742_AST_in = (AST)_t;
			match(_t,SENDSQLSTATEMENT);
			_t = _t.getNextSibling();
			break;
		}
		case SEPARATECONNECTION:
		{
			AST tmp3743_AST_in = (AST)_t;
			match(_t,SEPARATECONNECTION);
			_t = _t.getNextSibling();
			break;
		}
		case SEPARATORS:
		{
			AST tmp3744_AST_in = (AST)_t;
			match(_t,SEPARATORS);
			_t = _t.getNextSibling();
			break;
		}
		case SERVER:
		{
			AST tmp3745_AST_in = (AST)_t;
			match(_t,SERVER);
			_t = _t.getNextSibling();
			break;
		}
		case SERVERSOCKET:
		{
			AST tmp3746_AST_in = (AST)_t;
			match(_t,SERVERSOCKET);
			_t = _t.getNextSibling();
			break;
		}
		case SETBYTEORDER:
		{
			AST tmp3747_AST_in = (AST)_t;
			match(_t,SETBYTEORDER);
			_t = _t.getNextSibling();
			break;
		}
		case SETCONTENTS:
		{
			AST tmp3748_AST_in = (AST)_t;
			match(_t,SETCONTENTS);
			_t = _t.getNextSibling();
			break;
		}
		case SETCURRENTVALUE:
		{
			AST tmp3749_AST_in = (AST)_t;
			match(_t,SETCURRENTVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case SETPOINTERVALUE:
		{
			AST tmp3750_AST_in = (AST)_t;
			match(_t,SETPOINTERVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case SETSIZE:
		{
			AST tmp3751_AST_in = (AST)_t;
			match(_t,SETSIZE);
			_t = _t.getNextSibling();
			break;
		}
		case SIDELABELS:
		{
			AST tmp3752_AST_in = (AST)_t;
			match(_t,SIDELABELS);
			_t = _t.getNextSibling();
			break;
		}
		case SILENT:
		{
			AST tmp3753_AST_in = (AST)_t;
			match(_t,SILENT);
			_t = _t.getNextSibling();
			break;
		}
		case SIMPLE:
		{
			AST tmp3754_AST_in = (AST)_t;
			match(_t,SIMPLE);
			_t = _t.getNextSibling();
			break;
		}
		case SINGLE:
		{
			AST tmp3755_AST_in = (AST)_t;
			match(_t,SINGLE);
			_t = _t.getNextSibling();
			break;
		}
		case SIZE:
		{
			AST tmp3756_AST_in = (AST)_t;
			match(_t,SIZE);
			_t = _t.getNextSibling();
			break;
		}
		case SIZECHARS:
		{
			AST tmp3757_AST_in = (AST)_t;
			match(_t,SIZECHARS);
			_t = _t.getNextSibling();
			break;
		}
		case SIZEPIXELS:
		{
			AST tmp3758_AST_in = (AST)_t;
			match(_t,SIZEPIXELS);
			_t = _t.getNextSibling();
			break;
		}
		case SHORT:
		{
			AST tmp3759_AST_in = (AST)_t;
			match(_t,SHORT);
			_t = _t.getNextSibling();
			break;
		}
		case SLIDER:
		{
			AST tmp3760_AST_in = (AST)_t;
			match(_t,SLIDER);
			_t = _t.getNextSibling();
			break;
		}
		case SMALLINT:
		{
			AST tmp3761_AST_in = (AST)_t;
			match(_t,SMALLINT);
			_t = _t.getNextSibling();
			break;
		}
		case SOAPHEADER:
		{
			AST tmp3762_AST_in = (AST)_t;
			match(_t,SOAPHEADER);
			_t = _t.getNextSibling();
			break;
		}
		case SOAPHEADERENTRYREF:
		{
			AST tmp3763_AST_in = (AST)_t;
			match(_t,SOAPHEADERENTRYREF);
			_t = _t.getNextSibling();
			break;
		}
		case SOCKET:
		{
			AST tmp3764_AST_in = (AST)_t;
			match(_t,SOCKET);
			_t = _t.getNextSibling();
			break;
		}
		case SORT:
		{
			AST tmp3765_AST_in = (AST)_t;
			match(_t,SORT);
			_t = _t.getNextSibling();
			break;
		}
		case SOURCE:
		{
			AST tmp3766_AST_in = (AST)_t;
			match(_t,SOURCE);
			_t = _t.getNextSibling();
			break;
		}
		case SOURCEPROCEDURE:
		{
			AST tmp3767_AST_in = (AST)_t;
			match(_t,SOURCEPROCEDURE);
			_t = _t.getNextSibling();
			break;
		}
		case SQL:
		{
			AST tmp3768_AST_in = (AST)_t;
			match(_t,SQL);
			_t = _t.getNextSibling();
			break;
		}
		case SQRT:
		{
			AST tmp3769_AST_in = (AST)_t;
			match(_t,SQRT);
			_t = _t.getNextSibling();
			break;
		}
		case START:
		{
			AST tmp3770_AST_in = (AST)_t;
			match(_t,START);
			_t = _t.getNextSibling();
			break;
		}
		case STARTING:
		{
			AST tmp3771_AST_in = (AST)_t;
			match(_t,STARTING);
			_t = _t.getNextSibling();
			break;
		}
		case STARTMOVE:
		{
			AST tmp3772_AST_in = (AST)_t;
			match(_t,STARTMOVE);
			_t = _t.getNextSibling();
			break;
		}
		case STARTRESIZE:
		{
			AST tmp3773_AST_in = (AST)_t;
			match(_t,STARTRESIZE);
			_t = _t.getNextSibling();
			break;
		}
		case STARTROWRESIZE:
		{
			AST tmp3774_AST_in = (AST)_t;
			match(_t,STARTROWRESIZE);
			_t = _t.getNextSibling();
			break;
		}
		case STATUSBAR:
		{
			AST tmp3775_AST_in = (AST)_t;
			match(_t,STATUSBAR);
			_t = _t.getNextSibling();
			break;
		}
		case STDCALL_KW:
		{
			AST tmp3776_AST_in = (AST)_t;
			match(_t,STDCALL_KW);
			_t = _t.getNextSibling();
			break;
		}
		case STRETCHTOFIT:
		{
			AST tmp3777_AST_in = (AST)_t;
			match(_t,STRETCHTOFIT);
			_t = _t.getNextSibling();
			break;
		}
		case STOP:
		{
			AST tmp3778_AST_in = (AST)_t;
			match(_t,STOP);
			_t = _t.getNextSibling();
			break;
		}
		case STOREDPROCEDURE:
		{
			AST tmp3779_AST_in = (AST)_t;
			match(_t,STOREDPROCEDURE);
			_t = _t.getNextSibling();
			break;
		}
		case STRING:
		{
			AST tmp3780_AST_in = (AST)_t;
			match(_t,STRING);
			_t = _t.getNextSibling();
			break;
		}
		case STRINGXREF:
		{
			AST tmp3781_AST_in = (AST)_t;
			match(_t,STRINGXREF);
			_t = _t.getNextSibling();
			break;
		}
		case SUBAVERAGE:
		{
			AST tmp3782_AST_in = (AST)_t;
			match(_t,SUBAVERAGE);
			_t = _t.getNextSibling();
			break;
		}
		case SUBCOUNT:
		{
			AST tmp3783_AST_in = (AST)_t;
			match(_t,SUBCOUNT);
			_t = _t.getNextSibling();
			break;
		}
		case SUBMAXIMUM:
		{
			AST tmp3784_AST_in = (AST)_t;
			match(_t,SUBMAXIMUM);
			_t = _t.getNextSibling();
			break;
		}
		case SUBMENU:
		{
			AST tmp3785_AST_in = (AST)_t;
			match(_t,SUBMENU);
			_t = _t.getNextSibling();
			break;
		}
		case SUBMENUHELP:
		{
			AST tmp3786_AST_in = (AST)_t;
			match(_t,SUBMENUHELP);
			_t = _t.getNextSibling();
			break;
		}
		case SUBMINIMUM:
		{
			AST tmp3787_AST_in = (AST)_t;
			match(_t,SUBMINIMUM);
			_t = _t.getNextSibling();
			break;
		}
		case SUBTOTAL:
		{
			AST tmp3788_AST_in = (AST)_t;
			match(_t,SUBTOTAL);
			_t = _t.getNextSibling();
			break;
		}
		case SUBSCRIBE:
		{
			AST tmp3789_AST_in = (AST)_t;
			match(_t,SUBSCRIBE);
			_t = _t.getNextSibling();
			break;
		}
		case SUBSTITUTE:
		{
			AST tmp3790_AST_in = (AST)_t;
			match(_t,SUBSTITUTE);
			_t = _t.getNextSibling();
			break;
		}
		case SUBSTRING:
		{
			AST tmp3791_AST_in = (AST)_t;
			match(_t,SUBSTRING);
			_t = _t.getNextSibling();
			break;
		}
		case SUM:
		{
			AST tmp3792_AST_in = (AST)_t;
			match(_t,SUM);
			_t = _t.getNextSibling();
			break;
		}
		case SUMMARY:
		{
			AST tmp3793_AST_in = (AST)_t;
			match(_t,SUMMARY);
			_t = _t.getNextSibling();
			break;
		}
		case SUPER:
		{
			AST tmp3794_AST_in = (AST)_t;
			match(_t,SUPER);
			_t = _t.getNextSibling();
			break;
		}
		case SYSTEMHELP:
		{
			AST tmp3795_AST_in = (AST)_t;
			match(_t,SYSTEMHELP);
			_t = _t.getNextSibling();
			break;
		}
		case TARGET:
		{
			AST tmp3796_AST_in = (AST)_t;
			match(_t,TARGET);
			_t = _t.getNextSibling();
			break;
		}
		case TARGETPROCEDURE:
		{
			AST tmp3797_AST_in = (AST)_t;
			match(_t,TARGETPROCEDURE);
			_t = _t.getNextSibling();
			break;
		}
		case TEMPTABLE:
		{
			AST tmp3798_AST_in = (AST)_t;
			match(_t,TEMPTABLE);
			_t = _t.getNextSibling();
			break;
		}
		case TERMINATE:
		{
			AST tmp3799_AST_in = (AST)_t;
			match(_t,TERMINATE);
			_t = _t.getNextSibling();
			break;
		}
		case TEXTCURSOR:
		{
			AST tmp3800_AST_in = (AST)_t;
			match(_t,TEXTCURSOR);
			_t = _t.getNextSibling();
			break;
		}
		case TEXTSEGGROW:
		{
			AST tmp3801_AST_in = (AST)_t;
			match(_t,TEXTSEGGROW);
			_t = _t.getNextSibling();
			break;
		}
		case THREED:
		{
			AST tmp3802_AST_in = (AST)_t;
			match(_t,THREED);
			_t = _t.getNextSibling();
			break;
		}
		case THROUGH:
		{
			AST tmp3803_AST_in = (AST)_t;
			match(_t,THROUGH);
			_t = _t.getNextSibling();
			break;
		}
		case TICMARKS:
		{
			AST tmp3804_AST_in = (AST)_t;
			match(_t,TICMARKS);
			_t = _t.getNextSibling();
			break;
		}
		case TIMEZONE:
		{
			AST tmp3805_AST_in = (AST)_t;
			match(_t,TIMEZONE);
			_t = _t.getNextSibling();
			break;
		}
		case TODAY:
		{
			AST tmp3806_AST_in = (AST)_t;
			match(_t,TODAY);
			_t = _t.getNextSibling();
			break;
		}
		case TOGGLEBOX:
		{
			AST tmp3807_AST_in = (AST)_t;
			match(_t,TOGGLEBOX);
			_t = _t.getNextSibling();
			break;
		}
		case TOOLBAR:
		{
			AST tmp3808_AST_in = (AST)_t;
			match(_t,TOOLBAR);
			_t = _t.getNextSibling();
			break;
		}
		case TOOLTIP:
		{
			AST tmp3809_AST_in = (AST)_t;
			match(_t,TOOLTIP);
			_t = _t.getNextSibling();
			break;
		}
		case TOP:
		{
			AST tmp3810_AST_in = (AST)_t;
			match(_t,TOP);
			_t = _t.getNextSibling();
			break;
		}
		case TOPIC:
		{
			AST tmp3811_AST_in = (AST)_t;
			match(_t,TOPIC);
			_t = _t.getNextSibling();
			break;
		}
		case TOTAL:
		{
			AST tmp3812_AST_in = (AST)_t;
			match(_t,TOTAL);
			_t = _t.getNextSibling();
			break;
		}
		case TRANSACTIONMODE:
		{
			AST tmp3813_AST_in = (AST)_t;
			match(_t,TRANSACTIONMODE);
			_t = _t.getNextSibling();
			break;
		}
		case TRANSPARENT:
		{
			AST tmp3814_AST_in = (AST)_t;
			match(_t,TRANSPARENT);
			_t = _t.getNextSibling();
			break;
		}
		case TRAILING:
		{
			AST tmp3815_AST_in = (AST)_t;
			match(_t,TRAILING);
			_t = _t.getNextSibling();
			break;
		}
		case TRUNCATE:
		{
			AST tmp3816_AST_in = (AST)_t;
			match(_t,TRUNCATE);
			_t = _t.getNextSibling();
			break;
		}
		case TTCODEPAGE:
		{
			AST tmp3817_AST_in = (AST)_t;
			match(_t,TTCODEPAGE);
			_t = _t.getNextSibling();
			break;
		}
		case UNBUFFERED:
		{
			AST tmp3818_AST_in = (AST)_t;
			match(_t,UNBUFFERED);
			_t = _t.getNextSibling();
			break;
		}
		case UNIQUEMATCH:
		{
			AST tmp3819_AST_in = (AST)_t;
			match(_t,UNIQUEMATCH);
			_t = _t.getNextSibling();
			break;
		}
		case UNLOAD:
		{
			AST tmp3820_AST_in = (AST)_t;
			match(_t,UNLOAD);
			_t = _t.getNextSibling();
			break;
		}
		case UNSIGNEDBYTE:
		{
			AST tmp3821_AST_in = (AST)_t;
			match(_t,UNSIGNEDBYTE);
			_t = _t.getNextSibling();
			break;
		}
		case UNSIGNEDSHORT:
		{
			AST tmp3822_AST_in = (AST)_t;
			match(_t,UNSIGNEDSHORT);
			_t = _t.getNextSibling();
			break;
		}
		case UNSUBSCRIBE:
		{
			AST tmp3823_AST_in = (AST)_t;
			match(_t,UNSUBSCRIBE);
			_t = _t.getNextSibling();
			break;
		}
		case URLDECODE:
		{
			AST tmp3824_AST_in = (AST)_t;
			match(_t,URLDECODE);
			_t = _t.getNextSibling();
			break;
		}
		case URLENCODE:
		{
			AST tmp3825_AST_in = (AST)_t;
			match(_t,URLENCODE);
			_t = _t.getNextSibling();
			break;
		}
		case USE:
		{
			AST tmp3826_AST_in = (AST)_t;
			match(_t,USE);
			_t = _t.getNextSibling();
			break;
		}
		case USEDICTEXPS:
		{
			AST tmp3827_AST_in = (AST)_t;
			match(_t,USEDICTEXPS);
			_t = _t.getNextSibling();
			break;
		}
		case USEFILENAME:
		{
			AST tmp3828_AST_in = (AST)_t;
			match(_t,USEFILENAME);
			_t = _t.getNextSibling();
			break;
		}
		case USEREVVIDEO:
		{
			AST tmp3829_AST_in = (AST)_t;
			match(_t,USEREVVIDEO);
			_t = _t.getNextSibling();
			break;
		}
		case USETEXT:
		{
			AST tmp3830_AST_in = (AST)_t;
			match(_t,USETEXT);
			_t = _t.getNextSibling();
			break;
		}
		case USEUNDERLINE:
		{
			AST tmp3831_AST_in = (AST)_t;
			match(_t,USEUNDERLINE);
			_t = _t.getNextSibling();
			break;
		}
		case USER:
		{
			AST tmp3832_AST_in = (AST)_t;
			match(_t,USER);
			_t = _t.getNextSibling();
			break;
		}
		case VALIDEVENT:
		{
			AST tmp3833_AST_in = (AST)_t;
			match(_t,VALIDEVENT);
			_t = _t.getNextSibling();
			break;
		}
		case VALIDHANDLE:
		{
			AST tmp3834_AST_in = (AST)_t;
			match(_t,VALIDHANDLE);
			_t = _t.getNextSibling();
			break;
		}
		case VALIDATE:
		{
			AST tmp3835_AST_in = (AST)_t;
			match(_t,VALIDATE);
			_t = _t.getNextSibling();
			break;
		}
		case VARIABLE:
		{
			AST tmp3836_AST_in = (AST)_t;
			match(_t,VARIABLE);
			_t = _t.getNextSibling();
			break;
		}
		case VERBOSE:
		{
			AST tmp3837_AST_in = (AST)_t;
			match(_t,VERBOSE);
			_t = _t.getNextSibling();
			break;
		}
		case VERTICAL:
		{
			AST tmp3838_AST_in = (AST)_t;
			match(_t,VERTICAL);
			_t = _t.getNextSibling();
			break;
		}
		case VMS:
		{
			AST tmp3839_AST_in = (AST)_t;
			match(_t,VMS);
			_t = _t.getNextSibling();
			break;
		}
		case WAIT:
		{
			AST tmp3840_AST_in = (AST)_t;
			match(_t,WAIT);
			_t = _t.getNextSibling();
			break;
		}
		case WARNING:
		{
			AST tmp3841_AST_in = (AST)_t;
			match(_t,WARNING);
			_t = _t.getNextSibling();
			break;
		}
		case WEBCONTEXT:
		{
			AST tmp3842_AST_in = (AST)_t;
			match(_t,WEBCONTEXT);
			_t = _t.getNextSibling();
			break;
		}
		case WEEKDAY:
		{
			AST tmp3843_AST_in = (AST)_t;
			match(_t,WEEKDAY);
			_t = _t.getNextSibling();
			break;
		}
		case WIDGET:
		{
			AST tmp3844_AST_in = (AST)_t;
			match(_t,WIDGET);
			_t = _t.getNextSibling();
			break;
		}
		case WIDGETHANDLE:
		{
			AST tmp3845_AST_in = (AST)_t;
			match(_t,WIDGETHANDLE);
			_t = _t.getNextSibling();
			break;
		}
		case WIDGETPOOL:
		{
			AST tmp3846_AST_in = (AST)_t;
			match(_t,WIDGETPOOL);
			_t = _t.getNextSibling();
			break;
		}
		case WIDTH:
		{
			AST tmp3847_AST_in = (AST)_t;
			match(_t,WIDTH);
			_t = _t.getNextSibling();
			break;
		}
		case WIDTHCHARS:
		{
			AST tmp3848_AST_in = (AST)_t;
			match(_t,WIDTHCHARS);
			_t = _t.getNextSibling();
			break;
		}
		case WIDTHPIXELS:
		{
			AST tmp3849_AST_in = (AST)_t;
			match(_t,WIDTHPIXELS);
			_t = _t.getNextSibling();
			break;
		}
		case WINDOWNAME:
		{
			AST tmp3850_AST_in = (AST)_t;
			match(_t,WINDOWNAME);
			_t = _t.getNextSibling();
			break;
		}
		case WORDINDEX:
		{
			AST tmp3851_AST_in = (AST)_t;
			match(_t,WORDINDEX);
			_t = _t.getNextSibling();
			break;
		}
		case X:
		{
			AST tmp3852_AST_in = (AST)_t;
			match(_t,X);
			_t = _t.getNextSibling();
			break;
		}
		case XDOCUMENT:
		{
			AST tmp3853_AST_in = (AST)_t;
			match(_t,XDOCUMENT);
			_t = _t.getNextSibling();
			break;
		}
		case XNODEREF:
		{
			AST tmp3854_AST_in = (AST)_t;
			match(_t,XNODEREF);
			_t = _t.getNextSibling();
			break;
		}
		case XOF:
		{
			AST tmp3855_AST_in = (AST)_t;
			match(_t,XOF);
			_t = _t.getNextSibling();
			break;
		}
		case Y:
		{
			AST tmp3856_AST_in = (AST)_t;
			match(_t,Y);
			_t = _t.getNextSibling();
			break;
		}
		case YOF:
		{
			AST tmp3857_AST_in = (AST)_t;
			match(_t,YOF);
			_t = _t.getNextSibling();
			break;
		}
		case YEAR:
		{
			AST tmp3858_AST_in = (AST)_t;
			match(_t,YEAR);
			_t = _t.getNextSibling();
			break;
		}
		case YESNO:
		{
			AST tmp3859_AST_in = (AST)_t;
			match(_t,YESNO);
			_t = _t.getNextSibling();
			break;
		}
		case YESNOCANCEL:
		{
			AST tmp3860_AST_in = (AST)_t;
			match(_t,YESNOCANCEL);
			_t = _t.getNextSibling();
			break;
		}
		case BASE64DECODE:
		{
			AST tmp3861_AST_in = (AST)_t;
			match(_t,BASE64DECODE);
			_t = _t.getNextSibling();
			break;
		}
		case BASE64ENCODE:
		{
			AST tmp3862_AST_in = (AST)_t;
			match(_t,BASE64ENCODE);
			_t = _t.getNextSibling();
			break;
		}
		case BATCHSIZE:
		{
			AST tmp3863_AST_in = (AST)_t;
			match(_t,BATCHSIZE);
			_t = _t.getNextSibling();
			break;
		}
		case BEFORETABLE:
		{
			AST tmp3864_AST_in = (AST)_t;
			match(_t,BEFORETABLE);
			_t = _t.getNextSibling();
			break;
		}
		case COPYDATASET:
		{
			AST tmp3865_AST_in = (AST)_t;
			match(_t,COPYDATASET);
			_t = _t.getNextSibling();
			break;
		}
		case COPYTEMPTABLE:
		{
			AST tmp3866_AST_in = (AST)_t;
			match(_t,COPYTEMPTABLE);
			_t = _t.getNextSibling();
			break;
		}
		case DATASOURCEMODIFIED:
		{
			AST tmp3867_AST_in = (AST)_t;
			match(_t,DATASOURCEMODIFIED);
			_t = _t.getNextSibling();
			break;
		}
		case DECRYPT:
		{
			AST tmp3868_AST_in = (AST)_t;
			match(_t,DECRYPT);
			_t = _t.getNextSibling();
			break;
		}
		case DELETECHARACTER:
		{
			AST tmp3869_AST_in = (AST)_t;
			match(_t,DELETECHARACTER);
			_t = _t.getNextSibling();
			break;
		}
		case ENABLEDFIELDS:
		{
			AST tmp3870_AST_in = (AST)_t;
			match(_t,ENABLEDFIELDS);
			_t = _t.getNextSibling();
			break;
		}
		case ENCRYPT:
		{
			AST tmp3871_AST_in = (AST)_t;
			match(_t,ENCRYPT);
			_t = _t.getNextSibling();
			break;
		}
		case ENCRYPTIONSALT:
		{
			AST tmp3872_AST_in = (AST)_t;
			match(_t,ENCRYPTIONSALT);
			_t = _t.getNextSibling();
			break;
		}
		case FORMLONGINPUT:
		{
			AST tmp3873_AST_in = (AST)_t;
			match(_t,FORMLONGINPUT);
			_t = _t.getNextSibling();
			break;
		}
		case GENERATEPBEKEY:
		{
			AST tmp3874_AST_in = (AST)_t;
			match(_t,GENERATEPBEKEY);
			_t = _t.getNextSibling();
			break;
		}
		case GENERATEPBESALT:
		{
			AST tmp3875_AST_in = (AST)_t;
			match(_t,GENERATEPBESALT);
			_t = _t.getNextSibling();
			break;
		}
		case GENERATERANDOMKEY:
		{
			AST tmp3876_AST_in = (AST)_t;
			match(_t,GENERATERANDOMKEY);
			_t = _t.getNextSibling();
			break;
		}
		case GETCGILONGVALUE:
		{
			AST tmp3877_AST_in = (AST)_t;
			match(_t,GETCGILONGVALUE);
			_t = _t.getNextSibling();
			break;
		}
		case LASTBATCH:
		{
			AST tmp3878_AST_in = (AST)_t;
			match(_t,LASTBATCH);
			_t = _t.getNextSibling();
			break;
		}
		case MD5DIGEST:
		{
			AST tmp3879_AST_in = (AST)_t;
			match(_t,MD5DIGEST);
			_t = _t.getNextSibling();
			break;
		}
		case MERGEBYFIELD:
		{
			AST tmp3880_AST_in = (AST)_t;
			match(_t,MERGEBYFIELD);
			_t = _t.getNextSibling();
			break;
		}
		case NORMALIZE:
		{
			AST tmp3881_AST_in = (AST)_t;
			match(_t,NORMALIZE);
			_t = _t.getNextSibling();
			break;
		}
		case PBEHASHALGORITHM:
		{
			AST tmp3882_AST_in = (AST)_t;
			match(_t,PBEHASHALGORITHM);
			_t = _t.getNextSibling();
			break;
		}
		case PBEKEYROUNDS:
		{
			AST tmp3883_AST_in = (AST)_t;
			match(_t,PBEKEYROUNDS);
			_t = _t.getNextSibling();
			break;
		}
		case PREFERDATASET:
		{
			AST tmp3884_AST_in = (AST)_t;
			match(_t,PREFERDATASET);
			_t = _t.getNextSibling();
			break;
		}
		case REJECTED:
		{
			AST tmp3885_AST_in = (AST)_t;
			match(_t,REJECTED);
			_t = _t.getNextSibling();
			break;
		}
		case REPOSITIONMODE:
		{
			AST tmp3886_AST_in = (AST)_t;
			match(_t,REPOSITIONMODE);
			_t = _t.getNextSibling();
			break;
		}
		case ROWSTATE:
		{
			AST tmp3887_AST_in = (AST)_t;
			match(_t,ROWSTATE);
			_t = _t.getNextSibling();
			AST tmp3888_AST_in = (AST)_t;
			match(_t,SHA1DIGEST);
			_t = _t.getNextSibling();
			break;
		}
		case SSLSERVERNAME:
		{
			AST tmp3889_AST_in = (AST)_t;
			match(_t,SSLSERVERNAME);
			_t = _t.getNextSibling();
			break;
		}
		case SYMMETRICENCRYPTIONALGORITHM:
		{
			AST tmp3890_AST_in = (AST)_t;
			match(_t,SYMMETRICENCRYPTIONALGORITHM);
			_t = _t.getNextSibling();
			break;
		}
		case SYMMETRICENCRYPTIONIV:
		{
			AST tmp3891_AST_in = (AST)_t;
			match(_t,SYMMETRICENCRYPTIONIV);
			_t = _t.getNextSibling();
			break;
		}
		case SYMMETRICENCRYPTIONKEY:
		{
			AST tmp3892_AST_in = (AST)_t;
			match(_t,SYMMETRICENCRYPTIONKEY);
			_t = _t.getNextSibling();
			break;
		}
		case SYMMETRICSUPPORT:
		{
			AST tmp3893_AST_in = (AST)_t;
			match(_t,SYMMETRICSUPPORT);
			_t = _t.getNextSibling();
			break;
		}
		case TRANSINITPROCEDURE:
		{
			AST tmp3894_AST_in = (AST)_t;
			match(_t,TRANSINITPROCEDURE);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void sql_col_def(AST _t) throws RecognitionException {
		
		AST sql_col_def_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2586 = _t;
		AST tmp3895_AST_in = (AST)_t;
		match(_t,ID);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		if ((_tokenSet_19.member(_t.getType()))) {
			keyword(_t);
			_t = _retTree;
		}
		else if ((_t.getType()==ID)) {
			AST tmp3896_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case PRECISION:
		{
			AST tmp3897_AST_in = (AST)_t;
			match(_t,PRECISION);
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		case CASESENSITIVE:
		case COLUMNLABEL:
		case DEFAULT:
		case FORMAT:
		case LABEL:
		case LEFTPAREN:
		case Not_casesens:
		case Not_null:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case LEFTPAREN:
		{
			AST tmp3898_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getNextSibling();
			AST tmp3899_AST_in = (AST)_t;
			match(_t,NUMBER);
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case COMMA:
			{
				AST tmp3900_AST_in = (AST)_t;
				match(_t,COMMA);
				_t = _t.getNextSibling();
				AST tmp3901_AST_in = (AST)_t;
				match(_t,NUMBER);
				_t = _t.getNextSibling();
				break;
			}
			case RIGHTPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp3902_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		case CASESENSITIVE:
		case COLUMNLABEL:
		case DEFAULT:
		case FORMAT:
		case LABEL:
		case Not_casesens:
		case Not_null:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case Not_null:
		{
			AST __t2592 = _t;
			AST tmp3903_AST_in = (AST)_t;
			match(_t,Not_null);
			_t = _t.getFirstChild();
			AST tmp3904_AST_in = (AST)_t;
			match(_t,NOT);
			_t = _t.getNextSibling();
			AST tmp3905_AST_in = (AST)_t;
			match(_t,NULL_KW);
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case UNIQUE:
			{
				AST tmp3906_AST_in = (AST)_t;
				match(_t,UNIQUE);
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t2592;
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		case CASESENSITIVE:
		case COLUMNLABEL:
		case DEFAULT:
		case FORMAT:
		case LABEL:
		case Not_casesens:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop2597:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case COLUMNLABEL:
			case LABEL:
			{
				label_constant(_t);
				_t = _retTree;
				break;
			}
			case DEFAULT:
			{
				AST __t2595 = _t;
				AST tmp3907_AST_in = (AST)_t;
				match(_t,DEFAULT);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t2595;
				_t = _t.getNextSibling();
				break;
			}
			case FORMAT:
			{
				AST __t2596 = _t;
				AST tmp3908_AST_in = (AST)_t;
				match(_t,FORMAT);
				_t = _t.getFirstChild();
				expression(_t);
				_t = _retTree;
				_t = __t2596;
				_t = _t.getNextSibling();
				break;
			}
			case CASESENSITIVE:
			case Not_casesens:
			{
				casesens_or_not(_t);
				_t = _retTree;
				break;
			}
			default:
			{
				break _loop2597;
			}
			}
		} while (true);
		}
		_t = __t2586;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void selectstatea(AST _t) throws RecognitionException {
		
		AST selectstatea_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2506 = _t;
		AST tmp3909_AST_in = (AST)_t;
		match(_t,SELECT);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case ALL:
		{
			AST tmp3910_AST_in = (AST)_t;
			match(_t,ALL);
			_t = _t.getNextSibling();
			break;
		}
		case DISTINCT:
		{
			AST tmp3911_AST_in = (AST)_t;
			match(_t,DISTINCT);
			_t = _t.getNextSibling();
			break;
		}
		case STAR:
		case Sql_select_what:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case STAR:
		{
			AST tmp3912_AST_in = (AST)_t;
			match(_t,STAR);
			_t = _t.getNextSibling();
			break;
		}
		case Sql_select_what:
		{
			AST __t2509 = _t;
			AST tmp3913_AST_in = (AST)_t;
			match(_t,Sql_select_what);
			_t = _t.getFirstChild();
			{
			boolean synPredMatched2512 = false;
			if (((_t.getType()==LEFTPAREN))) {
				AST __t2512 = _t;
				synPredMatched2512 = true;
				inputState.guessing++;
				try {
					{
					AST tmp3914_AST_in = (AST)_t;
					match(_t,LEFTPAREN);
					_t = _t.getNextSibling();
					}
				}
				catch (RecognitionException pe) {
					synPredMatched2512 = false;
				}
				_t = __t2512;
				inputState.guessing--;
			}
			if ( synPredMatched2512 ) {
				AST tmp3915_AST_in = (AST)_t;
				match(_t,LEFTPAREN);
				_t = _t.getNextSibling();
				sqlexpression(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case Format_phrase:
				{
					formatphrase(_t);
					_t = _retTree;
					break;
				}
				case RIGHTPAREN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				AST tmp3916_AST_in = (AST)_t;
				match(_t,RIGHTPAREN);
				_t = _t.getNextSibling();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case Format_phrase:
				{
					formatphrase(_t);
					_t = _retTree;
					break;
				}
				case 3:
				case COMMA:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
			}
			else if ((_tokenSet_14.member(_t.getType()))) {
				sqlexpression(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case Format_phrase:
				{
					formatphrase(_t);
					_t = _retTree;
					break;
				}
				case 3:
				case COMMA:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
			}
			else {
				throw new NoViableAltException(_t);
			}
			
			}
			{
			_loop2518:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==COMMA)) {
					AST tmp3917_AST_in = (AST)_t;
					match(_t,COMMA);
					_t = _t.getNextSibling();
					sqlexpression(_t);
					_t = _retTree;
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case Format_phrase:
					{
						formatphrase(_t);
						_t = _retTree;
						break;
					}
					case 3:
					case COMMA:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
				}
				else {
					break _loop2518;
				}
				
			} while (true);
			}
			_t = __t2509;
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case INTO:
		{
			AST __t2520 = _t;
			AST tmp3918_AST_in = (AST)_t;
			match(_t,INTO);
			_t = _t.getFirstChild();
			field(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case INDICATOR:
			case Field_ref:
			{
				fetch_indicator(_t);
				_t = _retTree;
				break;
			}
			case 3:
			case COMMA:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			{
			_loop2524:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==COMMA)) {
					AST tmp3919_AST_in = (AST)_t;
					match(_t,COMMA);
					_t = _t.getNextSibling();
					field(_t);
					_t = _retTree;
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case INDICATOR:
					case Field_ref:
					{
						fetch_indicator(_t);
						_t = _retTree;
						break;
					}
					case 3:
					case COMMA:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
				}
				else {
					break _loop2524;
				}
				
			} while (true);
			}
			_t = __t2520;
			_t = _t.getNextSibling();
			break;
		}
		case FROM:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST __t2525 = _t;
		AST tmp3920_AST_in = (AST)_t;
		match(_t,FROM);
		_t = _t.getFirstChild();
		select_from_spec(_t);
		_t = _retTree;
		{
		_loop2527:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==COMMA)) {
				AST tmp3921_AST_in = (AST)_t;
				match(_t,COMMA);
				_t = _t.getNextSibling();
				select_from_spec(_t);
				_t = _retTree;
			}
			else {
				break _loop2527;
			}
			
		} while (true);
		}
		_t = __t2525;
		_t = _t.getNextSibling();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case GROUP:
		{
			AST __t2529 = _t;
			AST tmp3922_AST_in = (AST)_t;
			match(_t,GROUP);
			_t = _t.getFirstChild();
			AST tmp3923_AST_in = (AST)_t;
			match(_t,BY);
			_t = _t.getNextSibling();
			expression(_t);
			_t = _retTree;
			{
			_loop2531:
			do {
				if (_t==null) _t=ASTNULL;
				if ((_t.getType()==COMMA)) {
					AST tmp3924_AST_in = (AST)_t;
					match(_t,COMMA);
					_t = _t.getNextSibling();
					expression(_t);
					_t = _retTree;
				}
				else {
					break _loop2531;
				}
				
			} while (true);
			}
			_t = __t2529;
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		case BY:
		case HAVING:
		case ORDER:
		case UNION:
		case WITH:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case HAVING:
		{
			AST __t2533 = _t;
			AST tmp3925_AST_in = (AST)_t;
			match(_t,HAVING);
			_t = _t.getFirstChild();
			sqlexpression(_t);
			_t = _retTree;
			_t = __t2533;
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		case BY:
		case ORDER:
		case UNION:
		case WITH:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case ORDER:
		{
			AST __t2535 = _t;
			AST tmp3926_AST_in = (AST)_t;
			match(_t,ORDER);
			_t = _t.getFirstChild();
			AST tmp3927_AST_in = (AST)_t;
			match(_t,BY);
			_t = _t.getNextSibling();
			select_order_expr(_t);
			_t = _retTree;
			_t = __t2535;
			_t = _t.getNextSibling();
			break;
		}
		case BY:
		{
			AST __t2536 = _t;
			AST tmp3928_AST_in = (AST)_t;
			match(_t,BY);
			_t = _t.getFirstChild();
			select_order_expr(_t);
			_t = _retTree;
			_t = __t2536;
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		case UNION:
		case WITH:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		if (((_t.getType()==3||_t.getType()==UNION||_t.getType()==WITH))&&(_t != null)) {
			{
			boolean synPredMatched2541 = false;
			if ((((_t.getType()==WITH))&&(_t != null))) {
				AST __t2541 = _t;
				synPredMatched2541 = true;
				inputState.guessing++;
				try {
					{
					AST __t2540 = _t;
					AST tmp3929_AST_in = (AST)_t;
					match(_t,WITH);
					_t = _t.getFirstChild();
					AST tmp3930_AST_in = (AST)_t;
					match(_t,CHECK);
					_t = _t.getNextSibling();
					AST tmp3931_AST_in = (AST)_t;
					match(_t,OPTION);
					_t = _t.getNextSibling();
					_t = __t2540;
					_t = _t.getNextSibling();
					}
				}
				catch (RecognitionException pe) {
					synPredMatched2541 = false;
				}
				_t = __t2541;
				inputState.guessing--;
			}
			if ( synPredMatched2541 ) {
				AST __t2542 = _t;
				AST tmp3932_AST_in = (AST)_t;
				match(_t,WITH);
				_t = _t.getFirstChild();
				AST tmp3933_AST_in = (AST)_t;
				match(_t,CHECK);
				_t = _t.getNextSibling();
				AST tmp3934_AST_in = (AST)_t;
				match(_t,OPTION);
				_t = _t.getNextSibling();
				_t = __t2542;
				_t = _t.getNextSibling();
			}
			else if ((_t.getType()==3||_t.getType()==UNION||_t.getType()==WITH)) {
			}
			else {
				throw new NoViableAltException(_t);
			}
			
			}
		}
		else if ((_t.getType()==3||_t.getType()==UNION||_t.getType()==WITH)) {
		}
		else {
			throw new NoViableAltException(_t);
		}
		
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case WITH:
		{
			framephrase(_t);
			_t = _retTree;
			break;
		}
		case 3:
		case UNION:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case UNION:
		{
			AST __t2545 = _t;
			AST tmp3935_AST_in = (AST)_t;
			match(_t,UNION);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case ALL:
			{
				AST tmp3936_AST_in = (AST)_t;
				match(_t,ALL);
				_t = _t.getNextSibling();
				break;
			}
			case SELECT:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			selectstatea(_t);
			_t = _retTree;
			_t = __t2545;
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t2506;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void sqlexpression(AST _t) throws RecognitionException {
		
		AST sqlexpression_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case OR:
		{
			AST __t2599 = _t;
			AST tmp3937_AST_in = (AST)_t;
			match(_t,OR);
			_t = _t.getFirstChild();
			sqlexpression(_t);
			_t = _retTree;
			sqlexpression(_t);
			_t = _retTree;
			_t = __t2599;
			_t = _t.getNextSibling();
			break;
		}
		case AND:
		{
			AST __t2600 = _t;
			AST tmp3938_AST_in = (AST)_t;
			match(_t,AND);
			_t = _t.getFirstChild();
			sqlexpression(_t);
			_t = _retTree;
			sqlexpression(_t);
			_t = _retTree;
			_t = __t2600;
			_t = _t.getNextSibling();
			break;
		}
		case NOT:
		{
			AST __t2601 = _t;
			AST tmp3939_AST_in = (AST)_t;
			match(_t,NOT);
			_t = _t.getFirstChild();
			sqlexpression(_t);
			_t = _retTree;
			_t = __t2601;
			_t = _t.getNextSibling();
			break;
		}
		case MATCHES:
		{
			AST __t2602 = _t;
			AST tmp3940_AST_in = (AST)_t;
			match(_t,MATCHES);
			_t = _t.getFirstChild();
			sqlscalar(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_40.member(_t.getType()))) {
				sqlscalar(_t);
				_t = _retTree;
			}
			else if ((_t.getType()==Sql_comp_query)) {
				sql_comp_query(_t);
				_t = _retTree;
			}
			else {
				throw new NoViableAltException(_t);
			}
			
			}
			_t = __t2602;
			_t = _t.getNextSibling();
			break;
		}
		case BEGINS:
		{
			AST __t2604 = _t;
			AST tmp3941_AST_in = (AST)_t;
			match(_t,BEGINS);
			_t = _t.getFirstChild();
			sqlscalar(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_40.member(_t.getType()))) {
				sqlscalar(_t);
				_t = _retTree;
			}
			else if ((_t.getType()==Sql_comp_query)) {
				sql_comp_query(_t);
				_t = _retTree;
			}
			else {
				throw new NoViableAltException(_t);
			}
			
			}
			_t = __t2604;
			_t = _t.getNextSibling();
			break;
		}
		case CONTAINS:
		{
			AST __t2606 = _t;
			AST tmp3942_AST_in = (AST)_t;
			match(_t,CONTAINS);
			_t = _t.getFirstChild();
			sqlscalar(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_40.member(_t.getType()))) {
				sqlscalar(_t);
				_t = _retTree;
			}
			else if ((_t.getType()==Sql_comp_query)) {
				sql_comp_query(_t);
				_t = _retTree;
			}
			else {
				throw new NoViableAltException(_t);
			}
			
			}
			_t = __t2606;
			_t = _t.getNextSibling();
			break;
		}
		case EQ:
		{
			AST __t2608 = _t;
			AST tmp3943_AST_in = (AST)_t;
			match(_t,EQ);
			_t = _t.getFirstChild();
			sqlscalar(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_40.member(_t.getType()))) {
				sqlscalar(_t);
				_t = _retTree;
			}
			else if ((_t.getType()==Sql_comp_query)) {
				sql_comp_query(_t);
				_t = _retTree;
			}
			else {
				throw new NoViableAltException(_t);
			}
			
			}
			_t = __t2608;
			_t = _t.getNextSibling();
			break;
		}
		case NE:
		{
			AST __t2610 = _t;
			AST tmp3944_AST_in = (AST)_t;
			match(_t,NE);
			_t = _t.getFirstChild();
			sqlscalar(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_40.member(_t.getType()))) {
				sqlscalar(_t);
				_t = _retTree;
			}
			else if ((_t.getType()==Sql_comp_query)) {
				sql_comp_query(_t);
				_t = _retTree;
			}
			else {
				throw new NoViableAltException(_t);
			}
			
			}
			_t = __t2610;
			_t = _t.getNextSibling();
			break;
		}
		case GTHAN:
		{
			AST __t2612 = _t;
			AST tmp3945_AST_in = (AST)_t;
			match(_t,GTHAN);
			_t = _t.getFirstChild();
			sqlscalar(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_40.member(_t.getType()))) {
				sqlscalar(_t);
				_t = _retTree;
			}
			else if ((_t.getType()==Sql_comp_query)) {
				sql_comp_query(_t);
				_t = _retTree;
			}
			else {
				throw new NoViableAltException(_t);
			}
			
			}
			_t = __t2612;
			_t = _t.getNextSibling();
			break;
		}
		case GE:
		{
			AST __t2614 = _t;
			AST tmp3946_AST_in = (AST)_t;
			match(_t,GE);
			_t = _t.getFirstChild();
			sqlscalar(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_40.member(_t.getType()))) {
				sqlscalar(_t);
				_t = _retTree;
			}
			else if ((_t.getType()==Sql_comp_query)) {
				sql_comp_query(_t);
				_t = _retTree;
			}
			else {
				throw new NoViableAltException(_t);
			}
			
			}
			_t = __t2614;
			_t = _t.getNextSibling();
			break;
		}
		case LTHAN:
		{
			AST __t2616 = _t;
			AST tmp3947_AST_in = (AST)_t;
			match(_t,LTHAN);
			_t = _t.getFirstChild();
			sqlscalar(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_40.member(_t.getType()))) {
				sqlscalar(_t);
				_t = _retTree;
			}
			else if ((_t.getType()==Sql_comp_query)) {
				sql_comp_query(_t);
				_t = _retTree;
			}
			else {
				throw new NoViableAltException(_t);
			}
			
			}
			_t = __t2616;
			_t = _t.getNextSibling();
			break;
		}
		case LE:
		{
			AST __t2618 = _t;
			AST tmp3948_AST_in = (AST)_t;
			match(_t,LE);
			_t = _t.getFirstChild();
			sqlscalar(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_40.member(_t.getType()))) {
				sqlscalar(_t);
				_t = _retTree;
			}
			else if ((_t.getType()==Sql_comp_query)) {
				sql_comp_query(_t);
				_t = _retTree;
			}
			else {
				throw new NoViableAltException(_t);
			}
			
			}
			_t = __t2618;
			_t = _t.getNextSibling();
			break;
		}
		case EXISTS:
		{
			AST __t2620 = _t;
			AST tmp3949_AST_in = (AST)_t;
			match(_t,EXISTS);
			_t = _t.getFirstChild();
			AST tmp3950_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getNextSibling();
			selectstatea(_t);
			_t = _retTree;
			AST tmp3951_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			_t = __t2620;
			_t = _t.getNextSibling();
			break;
		}
		case Sql_begins:
		{
			AST __t2621 = _t;
			AST tmp3952_AST_in = (AST)_t;
			match(_t,Sql_begins);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case NOT:
			{
				AST tmp3953_AST_in = (AST)_t;
				match(_t,NOT);
				_t = _t.getNextSibling();
				break;
			}
			case BEGINS:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp3954_AST_in = (AST)_t;
			match(_t,BEGINS);
			_t = _t.getNextSibling();
			sqlscalar(_t);
			_t = _retTree;
			_t = __t2621;
			_t = _t.getNextSibling();
			break;
		}
		case Sql_between:
		{
			AST __t2623 = _t;
			AST tmp3955_AST_in = (AST)_t;
			match(_t,Sql_between);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case NOT:
			{
				AST tmp3956_AST_in = (AST)_t;
				match(_t,NOT);
				_t = _t.getNextSibling();
				break;
			}
			case BETWEEN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp3957_AST_in = (AST)_t;
			match(_t,BETWEEN);
			_t = _t.getNextSibling();
			sqlscalar(_t);
			_t = _retTree;
			AST tmp3958_AST_in = (AST)_t;
			match(_t,AND);
			_t = _t.getNextSibling();
			sqlscalar(_t);
			_t = _retTree;
			_t = __t2623;
			_t = _t.getNextSibling();
			break;
		}
		case Sql_in:
		{
			AST __t2625 = _t;
			AST tmp3959_AST_in = (AST)_t;
			match(_t,Sql_in);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case NOT:
			{
				AST tmp3960_AST_in = (AST)_t;
				match(_t,NOT);
				_t = _t.getNextSibling();
				break;
			}
			case IN_KW:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp3961_AST_in = (AST)_t;
			match(_t,IN_KW);
			_t = _t.getNextSibling();
			AST tmp3962_AST_in = (AST)_t;
			match(_t,LEFTPAREN);
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case SELECT:
			{
				selectstatea(_t);
				_t = _retTree;
				break;
			}
			case LEXDATE:
			case NUMBER:
			case QSTRING:
			case BIGENDIAN:
			case EXCLUSIVELOCK:
			case FALSE_KW:
			case FINDCASESENSITIVE:
			case FINDGLOBAL:
			case FINDNEXTOCCURRENCE:
			case FINDPREVOCCURRENCE:
			case FINDSELECT:
			case FINDWRAPAROUND:
			case HOSTBYTEORDER:
			case LITTLEENDIAN:
			case NO:
			case NOLOCK:
			case NOWAIT:
			case NULL_KW:
			case READAVAILABLE:
			case READEXACTNUM:
			case SEARCHSELF:
			case SEARCHTARGET:
			case SHARELOCK:
			case TRUE_KW:
			case USERID:
			case WINDOWDELAYEDMINIMIZE:
			case WINDOWMAXIMIZED:
			case WINDOWMINIMIZED:
			case WINDOWNORMAL:
			case YES:
			case UNKNOWNVALUE:
			case Field_ref:
			case FUNCTIONCALLTYPE:
			case GETATTRCALLTYPE:
			case PROCEDURECALLTYPE:
			case SAXCOMPLETE:
			case SAXPARSERERROR:
			case SAXRUNNING:
			case SAXUNINITIALIZED:
			case SETATTRCALLTYPE:
			case ROWUNMODIFIED:
			case ROWDELETED:
			case ROWMODIFIED:
			case ROWCREATED:
			{
				sql_in_val(_t);
				_t = _retTree;
				{
				_loop2629:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_t.getType()==COMMA)) {
						AST tmp3963_AST_in = (AST)_t;
						match(_t,COMMA);
						_t = _t.getNextSibling();
						sql_in_val(_t);
						_t = _retTree;
					}
					else {
						break _loop2629;
					}
					
				} while (true);
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp3964_AST_in = (AST)_t;
			match(_t,RIGHTPAREN);
			_t = _t.getNextSibling();
			_t = __t2625;
			_t = _t.getNextSibling();
			break;
		}
		case Sql_like:
		{
			AST __t2630 = _t;
			AST tmp3965_AST_in = (AST)_t;
			match(_t,Sql_like);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case NOT:
			{
				AST tmp3966_AST_in = (AST)_t;
				match(_t,NOT);
				_t = _t.getNextSibling();
				break;
			}
			case LIKE:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp3967_AST_in = (AST)_t;
			match(_t,LIKE);
			_t = _t.getNextSibling();
			sqlscalar(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case ESCAPE:
			{
				AST tmp3968_AST_in = (AST)_t;
				match(_t,ESCAPE);
				_t = _t.getNextSibling();
				sqlscalar(_t);
				_t = _retTree;
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t2630;
			_t = _t.getNextSibling();
			break;
		}
		case Sql_null_test:
		{
			AST __t2633 = _t;
			AST tmp3969_AST_in = (AST)_t;
			match(_t,Sql_null_test);
			_t = _t.getFirstChild();
			AST tmp3970_AST_in = (AST)_t;
			match(_t,IS);
			_t = _t.getNextSibling();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case NOT:
			{
				AST tmp3971_AST_in = (AST)_t;
				match(_t,NOT);
				_t = _t.getNextSibling();
				break;
			}
			case NULL_KW:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			AST tmp3972_AST_in = (AST)_t;
			match(_t,NULL_KW);
			_t = _t.getNextSibling();
			_t = __t2633;
			_t = _t.getNextSibling();
			break;
		}
		default:
			if (_t==null) _t=ASTNULL;
			if ((_tokenSet_40.member(_t.getType()))) {
				sqlscalar(_t);
				_t = _retTree;
			}
		else {
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void fetch_indicator(AST _t) throws RecognitionException {
		
		AST fetch_indicator_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case INDICATOR:
		{
			AST __t2461 = _t;
			AST tmp3973_AST_in = (AST)_t;
			match(_t,INDICATOR);
			_t = _t.getFirstChild();
			field(_t);
			_t = _retTree;
			_t = __t2461;
			_t = _t.getNextSibling();
			break;
		}
		case Field_ref:
		{
			field(_t);
			_t = _retTree;
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void grant_rev_opt(AST _t) throws RecognitionException {
		
		AST grant_rev_opt_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case ALL:
		{
			AST __t2468 = _t;
			AST tmp3974_AST_in = (AST)_t;
			match(_t,ALL);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case PRIVILEGES:
			{
				AST tmp3975_AST_in = (AST)_t;
				match(_t,PRIVILEGES);
				_t = _t.getNextSibling();
				break;
			}
			case 3:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t2468;
			_t = _t.getNextSibling();
			break;
		}
		case DELETE_KW:
		case INSERT:
		case SELECT:
		case UPDATE:
		case COMMA:
		{
			{
			int _cnt2476=0;
			_loop2476:
			do {
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case SELECT:
				{
					AST tmp3976_AST_in = (AST)_t;
					match(_t,SELECT);
					_t = _t.getNextSibling();
					break;
				}
				case INSERT:
				{
					AST tmp3977_AST_in = (AST)_t;
					match(_t,INSERT);
					_t = _t.getNextSibling();
					break;
				}
				case DELETE_KW:
				{
					AST tmp3978_AST_in = (AST)_t;
					match(_t,DELETE_KW);
					_t = _t.getNextSibling();
					break;
				}
				case UPDATE:
				{
					AST __t2471 = _t;
					AST tmp3979_AST_in = (AST)_t;
					match(_t,UPDATE);
					_t = _t.getFirstChild();
					{
					if (_t==null) _t=ASTNULL;
					switch ( _t.getType()) {
					case Field_list:
					{
						AST __t2473 = _t;
						AST tmp3980_AST_in = (AST)_t;
						match(_t,Field_list);
						_t = _t.getFirstChild();
						AST tmp3981_AST_in = (AST)_t;
						match(_t,LEFTPAREN);
						_t = _t.getNextSibling();
						field(_t);
						_t = _retTree;
						{
						_loop2475:
						do {
							if (_t==null) _t=ASTNULL;
							if ((_t.getType()==COMMA)) {
								AST tmp3982_AST_in = (AST)_t;
								match(_t,COMMA);
								_t = _t.getNextSibling();
								field(_t);
								_t = _retTree;
							}
							else {
								break _loop2475;
							}
							
						} while (true);
						}
						AST tmp3983_AST_in = (AST)_t;
						match(_t,RIGHTPAREN);
						_t = _t.getNextSibling();
						_t = __t2473;
						_t = _t.getNextSibling();
						break;
					}
					case 3:
					{
						break;
					}
					default:
					{
						throw new NoViableAltException(_t);
					}
					}
					}
					_t = __t2471;
					_t = _t.getNextSibling();
					break;
				}
				case COMMA:
				{
					AST tmp3984_AST_in = (AST)_t;
					match(_t,COMMA);
					_t = _t.getNextSibling();
					break;
				}
				default:
				{
					if ( _cnt2476>=1 ) { break _loop2476; } else {throw new NoViableAltException(_t);}
				}
				}
				_cnt2476++;
			} while (true);
			}
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void grant_rev_to(AST _t) throws RecognitionException {
		
		AST grant_rev_to_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case TO:
		{
			AST __t2478 = _t;
			AST tmp3985_AST_in = (AST)_t;
			match(_t,TO);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case PUBLIC:
			{
				AST tmp3986_AST_in = (AST)_t;
				match(_t,PUBLIC);
				_t = _t.getNextSibling();
				break;
			}
			case FILENAME:
			{
				AST tmp3987_AST_in = (AST)_t;
				match(_t,FILENAME);
				_t = _t.getNextSibling();
				{
				_loop2481:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_t.getType()==COMMA)) {
						AST tmp3988_AST_in = (AST)_t;
						match(_t,COMMA);
						_t = _t.getNextSibling();
						AST tmp3989_AST_in = (AST)_t;
						match(_t,FILENAME);
						_t = _t.getNextSibling();
					}
					else {
						break _loop2481;
					}
					
				} while (true);
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t2478;
			_t = _t.getNextSibling();
			break;
		}
		case FROM:
		{
			AST __t2482 = _t;
			AST tmp3990_AST_in = (AST)_t;
			match(_t,FROM);
			_t = _t.getFirstChild();
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case PUBLIC:
			{
				AST tmp3991_AST_in = (AST)_t;
				match(_t,PUBLIC);
				_t = _t.getNextSibling();
				break;
			}
			case FILENAME:
			{
				AST tmp3992_AST_in = (AST)_t;
				match(_t,FILENAME);
				_t = _t.getNextSibling();
				{
				_loop2485:
				do {
					if (_t==null) _t=ASTNULL;
					if ((_t.getType()==COMMA)) {
						AST tmp3993_AST_in = (AST)_t;
						match(_t,COMMA);
						_t = _t.getNextSibling();
						AST tmp3994_AST_in = (AST)_t;
						match(_t,FILENAME);
						_t = _t.getNextSibling();
					}
					else {
						break _loop2485;
					}
					
				} while (true);
				}
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			_t = __t2482;
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void select_from_spec(AST _t) throws RecognitionException {
		
		AST select_from_spec_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		select_sqltableref(_t);
		_t = _retTree;
		{
		_loop2556:
		do {
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case LEFT:
			{
				AST __t2549 = _t;
				AST tmp3995_AST_in = (AST)_t;
				match(_t,LEFT);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case OUTER:
				{
					AST tmp3996_AST_in = (AST)_t;
					match(_t,OUTER);
					_t = _t.getNextSibling();
					break;
				}
				case JOIN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				AST tmp3997_AST_in = (AST)_t;
				match(_t,JOIN);
				_t = _t.getNextSibling();
				select_sqltableref(_t);
				_t = _retTree;
				AST tmp3998_AST_in = (AST)_t;
				match(_t,ON);
				_t = _t.getNextSibling();
				sqlexpression(_t);
				_t = _retTree;
				_t = __t2549;
				_t = _t.getNextSibling();
				break;
			}
			case RIGHT:
			{
				AST __t2551 = _t;
				AST tmp3999_AST_in = (AST)_t;
				match(_t,RIGHT);
				_t = _t.getFirstChild();
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case OUTER:
				{
					AST tmp4000_AST_in = (AST)_t;
					match(_t,OUTER);
					_t = _t.getNextSibling();
					break;
				}
				case JOIN:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
				AST tmp4001_AST_in = (AST)_t;
				match(_t,JOIN);
				_t = _t.getNextSibling();
				select_sqltableref(_t);
				_t = _retTree;
				AST tmp4002_AST_in = (AST)_t;
				match(_t,ON);
				_t = _t.getNextSibling();
				sqlexpression(_t);
				_t = _retTree;
				_t = __t2551;
				_t = _t.getNextSibling();
				break;
			}
			case INNER:
			{
				AST __t2553 = _t;
				AST tmp4003_AST_in = (AST)_t;
				match(_t,INNER);
				_t = _t.getFirstChild();
				AST tmp4004_AST_in = (AST)_t;
				match(_t,JOIN);
				_t = _t.getNextSibling();
				select_sqltableref(_t);
				_t = _retTree;
				AST tmp4005_AST_in = (AST)_t;
				match(_t,ON);
				_t = _t.getNextSibling();
				sqlexpression(_t);
				_t = _retTree;
				_t = __t2553;
				_t = _t.getNextSibling();
				break;
			}
			case OUTER:
			{
				AST __t2554 = _t;
				AST tmp4006_AST_in = (AST)_t;
				match(_t,OUTER);
				_t = _t.getFirstChild();
				AST tmp4007_AST_in = (AST)_t;
				match(_t,JOIN);
				_t = _t.getNextSibling();
				select_sqltableref(_t);
				_t = _retTree;
				AST tmp4008_AST_in = (AST)_t;
				match(_t,ON);
				_t = _t.getNextSibling();
				sqlexpression(_t);
				_t = _retTree;
				_t = __t2554;
				_t = _t.getNextSibling();
				break;
			}
			case JOIN:
			{
				AST __t2555 = _t;
				AST tmp4009_AST_in = (AST)_t;
				match(_t,JOIN);
				_t = _t.getFirstChild();
				select_sqltableref(_t);
				_t = _retTree;
				AST tmp4010_AST_in = (AST)_t;
				match(_t,ON);
				_t = _t.getNextSibling();
				sqlexpression(_t);
				_t = _retTree;
				_t = __t2555;
				_t = _t.getNextSibling();
				break;
			}
			default:
			{
				break _loop2556;
			}
			}
		} while (true);
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case WHERE:
		{
			AST __t2558 = _t;
			AST tmp4011_AST_in = (AST)_t;
			match(_t,WHERE);
			_t = _t.getFirstChild();
			sqlexpression(_t);
			_t = _retTree;
			_t = __t2558;
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		case COMMA:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_retTree = _t;
	}
	
	public final void select_order_expr(AST _t) throws RecognitionException {
		
		AST select_order_expr_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		sqlscalar(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case ASC:
		{
			AST tmp4012_AST_in = (AST)_t;
			match(_t,ASC);
			_t = _t.getNextSibling();
			break;
		}
		case DESCENDING:
		{
			AST tmp4013_AST_in = (AST)_t;
			match(_t,DESCENDING);
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		case COMMA:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		_loop2566:
		do {
			if (_t==null) _t=ASTNULL;
			if ((_t.getType()==COMMA)) {
				AST tmp4014_AST_in = (AST)_t;
				match(_t,COMMA);
				_t = _t.getNextSibling();
				sqlscalar(_t);
				_t = _retTree;
				{
				if (_t==null) _t=ASTNULL;
				switch ( _t.getType()) {
				case ASC:
				{
					AST tmp4015_AST_in = (AST)_t;
					match(_t,ASC);
					_t = _t.getNextSibling();
					break;
				}
				case DESCENDING:
				{
					AST tmp4016_AST_in = (AST)_t;
					match(_t,DESCENDING);
					_t = _t.getNextSibling();
					break;
				}
				case 3:
				case COMMA:
				{
					break;
				}
				default:
				{
					throw new NoViableAltException(_t);
				}
				}
				}
			}
			else {
				break _loop2566;
			}
			
		} while (true);
		}
		_retTree = _t;
	}
	
	public final void select_sqltableref(AST _t) throws RecognitionException {
		
		AST select_sqltableref_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case RECORD_NAME:
		{
			record_name(_t);
			_t = _retTree;
			break;
		}
		case ID:
		{
			AST tmp4017_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case ID:
		{
			AST tmp4018_AST_in = (AST)_t;
			match(_t,ID);
			_t = _t.getNextSibling();
			break;
		}
		case 3:
		case INNER:
		case JOIN:
		case LEFT:
		case ON:
		case OUTER:
		case RIGHT:
		case WHERE:
		case COMMA:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_retTree = _t;
	}
	
	public final void sqlscalar(AST _t) throws RecognitionException {
		
		AST sqlscalar_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case PLUS:
		{
			AST __t2641 = _t;
			AST tmp4019_AST_in = (AST)_t;
			match(_t,PLUS);
			_t = _t.getFirstChild();
			sqlscalar(_t);
			_t = _retTree;
			sqlscalar(_t);
			_t = _retTree;
			_t = __t2641;
			_t = _t.getNextSibling();
			break;
		}
		case MINUS:
		{
			AST __t2642 = _t;
			AST tmp4020_AST_in = (AST)_t;
			match(_t,MINUS);
			_t = _t.getFirstChild();
			sqlscalar(_t);
			_t = _retTree;
			sqlscalar(_t);
			_t = _retTree;
			_t = __t2642;
			_t = _t.getNextSibling();
			break;
		}
		case MULTIPLY:
		{
			AST __t2643 = _t;
			AST tmp4021_AST_in = (AST)_t;
			match(_t,MULTIPLY);
			_t = _t.getFirstChild();
			sqlscalar(_t);
			_t = _retTree;
			sqlscalar(_t);
			_t = _retTree;
			_t = __t2643;
			_t = _t.getNextSibling();
			break;
		}
		case DIVIDE:
		{
			AST __t2644 = _t;
			AST tmp4022_AST_in = (AST)_t;
			match(_t,DIVIDE);
			_t = _t.getFirstChild();
			sqlscalar(_t);
			_t = _retTree;
			sqlscalar(_t);
			_t = _retTree;
			_t = __t2644;
			_t = _t.getNextSibling();
			break;
		}
		case MODULO:
		{
			AST __t2645 = _t;
			AST tmp4023_AST_in = (AST)_t;
			match(_t,MODULO);
			_t = _t.getFirstChild();
			sqlscalar(_t);
			_t = _retTree;
			sqlscalar(_t);
			_t = _retTree;
			_t = __t2645;
			_t = _t.getNextSibling();
			break;
		}
		case UNARY_PLUS:
		{
			AST __t2646 = _t;
			AST tmp4024_AST_in = (AST)_t;
			match(_t,UNARY_PLUS);
			_t = _t.getFirstChild();
			exprt(_t);
			_t = _retTree;
			_t = __t2646;
			_t = _t.getNextSibling();
			break;
		}
		case UNARY_MINUS:
		{
			AST __t2647 = _t;
			AST tmp4025_AST_in = (AST)_t;
			match(_t,UNARY_MINUS);
			_t = _t.getFirstChild();
			exprt(_t);
			_t = _retTree;
			_t = __t2647;
			_t = _t.getNextSibling();
			break;
		}
		default:
			boolean synPredMatched2649 = false;
			if (((_t.getType()==LEFTPAREN))) {
				AST __t2649 = _t;
				synPredMatched2649 = true;
				inputState.guessing++;
				try {
					{
					AST tmp4026_AST_in = (AST)_t;
					match(_t,LEFTPAREN);
					_t = _t.getNextSibling();
					}
				}
				catch (RecognitionException pe) {
					synPredMatched2649 = false;
				}
				_t = __t2649;
				inputState.guessing--;
			}
			if ( synPredMatched2649 ) {
				AST __t2650 = _t;
				AST tmp4027_AST_in = (AST)_t;
				match(_t,LEFTPAREN);
				_t = _t.getFirstChild();
				sqlexpression(_t);
				_t = _retTree;
				AST tmp4028_AST_in = (AST)_t;
				match(_t,RIGHTPAREN);
				_t = _t.getNextSibling();
				_t = __t2650;
				_t = _t.getNextSibling();
			}
			else if ((_tokenSet_1.member(_t.getType()))) {
				exprt(_t);
				_t = _retTree;
			}
		else {
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	public final void sqlupdate_equal(AST _t) throws RecognitionException {
		
		AST sqlupdate_equal_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2575 = _t;
		AST tmp4029_AST_in = (AST)_t;
		match(_t,EQUAL);
		_t = _t.getFirstChild();
		field(_t);
		_t = _retTree;
		sqlexpression(_t);
		_t = _retTree;
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case INDICATOR:
		case Field_ref:
		{
			fetch_indicator(_t);
			_t = _retTree;
			break;
		}
		case 3:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		_t = __t2575;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void sql_comp_query(AST _t) throws RecognitionException {
		
		AST sql_comp_query_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		AST __t2636 = _t;
		AST tmp4030_AST_in = (AST)_t;
		match(_t,Sql_comp_query);
		_t = _t.getFirstChild();
		{
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case ANY:
		{
			AST tmp4031_AST_in = (AST)_t;
			match(_t,ANY);
			_t = _t.getNextSibling();
			break;
		}
		case ALL:
		{
			AST tmp4032_AST_in = (AST)_t;
			match(_t,ALL);
			_t = _t.getNextSibling();
			break;
		}
		case SOME:
		{
			AST tmp4033_AST_in = (AST)_t;
			match(_t,SOME);
			_t = _t.getNextSibling();
			break;
		}
		case LEFTPAREN:
		{
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		}
		AST tmp4034_AST_in = (AST)_t;
		match(_t,LEFTPAREN);
		_t = _t.getNextSibling();
		selectstatea(_t);
		_t = _retTree;
		AST tmp4035_AST_in = (AST)_t;
		match(_t,RIGHTPAREN);
		_t = _t.getNextSibling();
		_t = __t2636;
		_t = _t.getNextSibling();
		_retTree = _t;
	}
	
	public final void sql_in_val(AST _t) throws RecognitionException {
		
		AST sql_in_val_AST_in = (_t == ASTNULL) ? null : (AST)_t;
		
		if (_t==null) _t=ASTNULL;
		switch ( _t.getType()) {
		case Field_ref:
		{
			field(_t);
			_t = _retTree;
			{
			if (_t==null) _t=ASTNULL;
			switch ( _t.getType()) {
			case INDICATOR:
			case Field_ref:
			{
				fetch_indicator(_t);
				_t = _retTree;
				break;
			}
			case COMMA:
			case RIGHTPAREN:
			{
				break;
			}
			default:
			{
				throw new NoViableAltException(_t);
			}
			}
			}
			break;
		}
		case LEXDATE:
		case NUMBER:
		case QSTRING:
		case BIGENDIAN:
		case EXCLUSIVELOCK:
		case FALSE_KW:
		case FINDCASESENSITIVE:
		case FINDGLOBAL:
		case FINDNEXTOCCURRENCE:
		case FINDPREVOCCURRENCE:
		case FINDSELECT:
		case FINDWRAPAROUND:
		case HOSTBYTEORDER:
		case LITTLEENDIAN:
		case NO:
		case NOLOCK:
		case NOWAIT:
		case NULL_KW:
		case READAVAILABLE:
		case READEXACTNUM:
		case SEARCHSELF:
		case SEARCHTARGET:
		case SHARELOCK:
		case TRUE_KW:
		case WINDOWDELAYEDMINIMIZE:
		case WINDOWMAXIMIZED:
		case WINDOWMINIMIZED:
		case WINDOWNORMAL:
		case YES:
		case UNKNOWNVALUE:
		case FUNCTIONCALLTYPE:
		case GETATTRCALLTYPE:
		case PROCEDURECALLTYPE:
		case SAXCOMPLETE:
		case SAXPARSERERROR:
		case SAXRUNNING:
		case SAXUNINITIALIZED:
		case SETATTRCALLTYPE:
		case ROWUNMODIFIED:
		case ROWDELETED:
		case ROWMODIFIED:
		case ROWCREATED:
		{
			constant(_t);
			_t = _retTree;
			break;
		}
		case USERID:
		{
			AST tmp4036_AST_in = (AST)_t;
			match(_t,USERID);
			_t = _t.getNextSibling();
			break;
		}
		default:
		{
			throw new NoViableAltException(_t);
		}
		}
		_retTree = _t;
	}
	
	
	public static final String[] _tokenNames = { };
	
	private static final long[] mk_tokenSet_0() {
		long[] data = new long[170];
		data[0]=71477924201984L;
		data[1]=9099575545663490L;
		data[2]=145241088016254016L;
		data[3]=1649281804293L;
		data[4]=162129895823114372L;
		data[5]=-4611544730914520960L;
		data[6]=2251834173423617L;
		data[7]=3229618176L;
		data[8]=81662655424626688L;
		data[9]=580968854180593672L;
		data[10]=-4607160427476934270L;
		data[11]=1153071038188749824L;
		data[12]=89240839066222604L;
		data[13]=86048L;
		data[15]=2251834173423680L;
		return data;
	}
	public static final BitSet _tokenSet_0 = new BitSet(mk_tokenSet_0());
	private static final long[] mk_tokenSet_1() {
		long[] data = new long[170];
		data[0]=720584740915622224L;
		data[1]=19043554009546768L;
		data[2]=4666287662003390856L;
		data[3]=4912584968628076544L;
		data[4]=8360930528650874960L;
		data[5]=1126451810303830L;
		data[6]=1510339491481969202L;
		data[7]=576460765728620736L;
		data[8]=865183713961283584L;
		data[9]=-2998834386360598512L;
		data[10]=6775666242893120024L;
		data[11]=-2303590900162166268L;
		data[12]=3458766442362643714L;
		data[13]=422237178691608L;
		data[14]=130L;
		data[15]=361411877500092944L;
		data[16]=9197085240081350022L;
		return data;
	}
	public static final BitSet _tokenSet_1 = new BitSet(mk_tokenSet_1());
	private static final long[] mk_tokenSet_2() {
		long[] data = new long[170];
		data[1]=562949955519488L;
		data[5]=1048576L;
		data[8]=536870912L;
		data[9]=1125899906842624L;
		data[12]=4294967296L;
		data[13]=34363932672L;
		data[15]=4L;
		return data;
	}
	public static final BitSet _tokenSet_2 = new BitSet(mk_tokenSet_2());
	private static final long[] mk_tokenSet_3() {
		long[] data = new long[170];
		data[0]=720584758095491408L;
		data[1]=19043554009546769L;
		data[2]=4666287662003394952L;
		data[3]=4913147918581497856L;
		data[4]=8396959325669838928L;
		data[5]=1126451812400982L;
		data[6]=-7136571775889513934L;
		data[7]=576460783177449664L;
		data[8]=865183731141169152L;
		data[9]=-2998834386360598512L;
		data[10]=6775666242893120024L;
		data[11]=-2303590900162166268L;
		data[12]=3458766442362643714L;
		data[13]=-9222949799676084200L;
		data[14]=131L;
		data[15]=361411909712347664L;
		data[16]=9197085240081350022L;
		return data;
	}
	public static final BitSet _tokenSet_3 = new BitSet(mk_tokenSet_3());
	private static final long[] mk_tokenSet_4() {
		long[] data = new long[170];
		data[0]=720584758095491408L;
		data[1]=19043554009546769L;
		data[2]=4666287662003394952L;
		data[3]=4913147918581497856L;
		data[4]=8396959325669838928L;
		data[5]=1126451812400982L;
		data[6]=-7136571775889513934L;
		data[7]=576460765997580480L;
		data[8]=865183731141169152L;
		data[9]=-2998834386360598512L;
		data[10]=6775666242893120024L;
		data[11]=-2303590900162166268L;
		data[12]=3458766442362643714L;
		data[13]=-9222949799676084200L;
		data[14]=131L;
		data[15]=361411909712347664L;
		data[16]=9197085240081350022L;
		return data;
	}
	public static final BitSet _tokenSet_4 = new BitSet(mk_tokenSet_4());
	private static final long[] mk_tokenSet_5() {
		long[] data = new long[170];
		data[0]=720584758095491408L;
		data[1]=19043554009546769L;
		data[2]=4666287662003394952L;
		data[3]=4913147918581497856L;
		data[4]=8396959325669838928L;
		data[5]=1126451812400982L;
		data[6]=-7136571775889513934L;
		data[7]=576460765997580480L;
		data[8]=865183731141169152L;
		data[9]=-2998834386360598512L;
		data[10]=6775666242893120024L;
		data[11]=-2303590900162166268L;
		data[12]=3458766442362643714L;
		data[13]=-9222949799676084136L;
		data[14]=131L;
		data[15]=361411909712347664L;
		data[16]=9197085240081350022L;
		return data;
	}
	public static final BitSet _tokenSet_5 = new BitSet(mk_tokenSet_5());
	private static final long[] mk_tokenSet_6() {
		long[] data = new long[170];
		data[0]=720584758095491408L;
		data[1]=19043554009546769L;
		data[2]=4666287662003394952L;
		data[3]=4913147918581497856L;
		data[4]=8396959325669840976L;
		data[5]=1126451812400982L;
		data[6]=-7136571775889513934L;
		data[7]=576460765997580480L;
		data[8]=865183731145363456L;
		data[9]=-2998834386360598512L;
		data[10]=6775666242893120024L;
		data[11]=-2303590900162166268L;
		data[12]=3458766442362643714L;
		data[13]=-9222949799676084200L;
		data[14]=131L;
		data[15]=361411909712347664L;
		data[16]=9197085240081350022L;
		return data;
	}
	public static final BitSet _tokenSet_6 = new BitSet(mk_tokenSet_6());
	private static final long[] mk_tokenSet_7() {
		long[] data = new long[170];
		data[0]=720584758095491408L;
		data[1]=19043554009546769L;
		data[2]=4666287662003394952L;
		data[3]=4913147918581497856L;
		data[4]=8396959325669838928L;
		data[5]=1126451812400982L;
		data[6]=-7136571775889513934L;
		data[7]=576460765997580480L;
		data[8]=865183731145363456L;
		data[9]=-2998834386360598512L;
		data[10]=6775666242893120024L;
		data[11]=-2303590900162166268L;
		data[12]=3458766442362643714L;
		data[13]=-9222949799676084200L;
		data[14]=131L;
		data[15]=361411909712347664L;
		data[16]=9197085240081350022L;
		return data;
	}
	public static final BitSet _tokenSet_7 = new BitSet(mk_tokenSet_7());
	private static final long[] mk_tokenSet_8() {
		long[] data = new long[170];
		data[0]=514L;
		data[7]=2251799813685248L;
		data[9]=64L;
		return data;
	}
	public static final BitSet _tokenSet_8 = new BitSet(mk_tokenSet_8());
	private static final long[] mk_tokenSet_9() {
		long[] data = new long[170];
		data[4]=4503599627372544L;
		data[5]=61572651155456L;
		return data;
	}
	public static final BitSet _tokenSet_9 = new BitSet(mk_tokenSet_9());
	private static final long[] mk_tokenSet_10() {
		long[] data = new long[170];
		data[1]=8L;
		data[2]=562949953421312L;
		data[4]=4294967552L;
		data[6]=2199023255552L;
		data[7]=2048L;
		data[9]=384L;
		data[11]=144115188075855872L;
		data[12]=2097152L;
		return data;
	}
	public static final BitSet _tokenSet_10 = new BitSet(mk_tokenSet_10());
	private static final long[] mk_tokenSet_11() {
		long[] data = new long[170];
		data[7]=1024L;
		data[10]=2199023255552L;
		data[11]=72057594172145664L;
		return data;
	}
	public static final BitSet _tokenSet_11 = new BitSet(mk_tokenSet_11());
	private static final long[] mk_tokenSet_12() {
		long[] data = new long[170];
		data[0]=4398046511104L;
		data[6]=8L;
		data[9]=32768L;
		data[12]=70368744177664L;
		data[13]=68719476736L;
		return data;
	}
	public static final BitSet _tokenSet_12 = new BitSet(mk_tokenSet_12());
	private static final long[] mk_tokenSet_13() {
		long[] data = new long[170];
		data[0]=4398046511104L;
		data[1]=1152921538966585352L;
		data[2]=72620543991480320L;
		data[3]=134217728L;
		data[4]=279172874512L;
		data[5]=36028797086072832L;
		data[6]=2199023779840L;
		data[7]=4194304L;
		data[8]=1024L;
		data[9]=128L;
		data[13]=8192L;
		data[15]=65536L;
		data[16]=96L;
		return data;
	}
	public static final BitSet _tokenSet_13 = new BitSet(mk_tokenSet_13());
	private static final long[] mk_tokenSet_14() {
		long[] data = new long[170];
		data[0]=720584758095491408L;
		data[1]=19043554009546769L;
		data[2]=4666287662003394952L;
		data[3]=7218990927795191808L;
		data[4]=8396959325669838928L;
		data[5]=1126451812400982L;
		data[6]=-7136571775889513934L;
		data[7]=576460765997580480L;
		data[8]=865183731141169152L;
		data[9]=-2998834386360598512L;
		data[10]=6775666242893120024L;
		data[11]=-2303590900162166268L;
		data[12]=3458766442362643714L;
		data[13]=-9222949799676084200L;
		data[14]=131L;
		data[15]=361411909836079632L;
		data[16]=9197085240081350022L;
		return data;
	}
	public static final BitSet _tokenSet_14 = new BitSet(mk_tokenSet_14());
	private static final long[] mk_tokenSet_15() {
		long[] data = new long[170];
		data[0]=70368744177664L;
		data[2]=33554432L;
		data[3]=4L;
		data[4]=131072L;
		data[13]=274877906944L;
		return data;
	}
	public static final BitSet _tokenSet_15 = new BitSet(mk_tokenSet_15());
	private static final long[] mk_tokenSet_16() {
		long[] data = new long[170];
		data[0]=75875970713088L;
		data[1]=1162021114512248834L;
		data[2]=217298682054181952L;
		data[3]=1649281804293L;
		data[4]=162129895823114388L;
		data[5]=-4575515933895556992L;
		data[6]=2254033197203457L;
		data[7]=3229618176L;
		data[8]=117691452443591680L;
		data[9]=580968854180593736L;
		data[10]=-4607160426940063358L;
		data[11]=1153071038188749824L;
		data[12]=89240839066222604L;
		data[13]=86048L;
		data[15]=2251834173489216L;
		return data;
	}
	public static final BitSet _tokenSet_16 = new BitSet(mk_tokenSet_16());
	private static final long[] mk_tokenSet_17() {
		long[] data = new long[170];
		data[0]=71477924201984L;
		data[1]=9099575545663490L;
		data[2]=145241088016254016L;
		data[3]=1649281804293L;
		data[4]=162129895823114372L;
		data[5]=-4611544730914520960L;
		data[6]=2251834173423617L;
		data[7]=3229618176L;
		data[8]=117691452443590656L;
		data[9]=580968854180593736L;
		data[10]=-4607160426940063358L;
		data[11]=1153071038188749824L;
		data[12]=89240839066222604L;
		data[13]=86048L;
		data[15]=2251834173423680L;
		return data;
	}
	public static final BitSet _tokenSet_17 = new BitSet(mk_tokenSet_17());
	private static final long[] mk_tokenSet_18() {
		long[] data = new long[340];
		data[0]=-4096L;
		data[1]=-1L;
		for (int i = 2; i<=3; i++) { data[i]=-9L; }
		data[4]=-8589942785L;
		for (int i = 5; i<=8; i++) { data[i]=-1L; }
		data[9]=-70368744177665L;
		for (int i = 10; i<=12; i++) { data[i]=-1L; }
		data[13]=2251799813685247L;
		data[14]=131072L;
		data[15]=-1130297953353728L;
		data[16]=9223370937343148031L;
		data[17]=15L;
		data[169]=2305843009213693952L;
		return data;
	}
	public static final BitSet _tokenSet_18 = new BitSet(mk_tokenSet_18());
	private static final long[] mk_tokenSet_19() {
		long[] data = new long[340];
		data[0]=-4096L;
		data[1]=-1L;
		for (int i = 2; i<=3; i++) { data[i]=-9L; }
		data[4]=-8589942785L;
		for (int i = 5; i<=8; i++) { data[i]=-1L; }
		data[9]=-70368744177665L;
		for (int i = 10; i<=12; i++) { data[i]=-1L; }
		data[13]=2251799813685247L;
		data[15]=-1130297953353728L;
		data[16]=9223370937343148031L;
		data[17]=15L;
		data[169]=2305843009213693952L;
		return data;
	}
	public static final BitSet _tokenSet_19 = new BitSet(mk_tokenSet_19());
	private static final long[] mk_tokenSet_20() {
		long[] data = new long[340];
		data[0]=-528L;
		for (int i = 1; i<=9; i++) { data[i]=-1L; }
		data[10]=-65L;
		for (int i = 11; i<=12; i++) { data[i]=-1L; }
		data[13]=-65L;
		for (int i = 14; i<=168; i++) { data[i]=-1L; }
		data[169]=9223372036854775807L;
		return data;
	}
	public static final BitSet _tokenSet_20 = new BitSet(mk_tokenSet_20());
	private static final long[] mk_tokenSet_21() {
		long[] data = new long[170];
		data[0]=-9223372036854775294L;
		data[5]=281474976710656L;
		data[7]=4611686018427392000L;
		return data;
	}
	public static final BitSet _tokenSet_21 = new BitSet(mk_tokenSet_21());
	private static final long[] mk_tokenSet_22() {
		long[] data = new long[170];
		data[0]=720584758095491922L;
		data[1]=19043554009546769L;
		data[2]=4666287662003919240L;
		data[3]=4913147918581497856L;
		data[4]=8396959325669838928L;
		data[5]=1126451812400982L;
		data[6]=-7136571775889513934L;
		data[7]=576460765997580480L;
		data[8]=865183731141169152L;
		data[9]=-2998834386360598512L;
		data[10]=6775666242893120024L;
		data[11]=-2303590831308471804L;
		data[12]=3458784034548688130L;
		data[13]=-9222949799676084200L;
		data[14]=131L;
		data[15]=361411909712347664L;
		data[16]=9197085240081350022L;
		return data;
	}
	public static final BitSet _tokenSet_22 = new BitSet(mk_tokenSet_22());
	private static final long[] mk_tokenSet_23() {
		long[] data = new long[170];
		data[0]=720584758095491922L;
		data[1]=19043554009546769L;
		data[2]=4666287662003394952L;
		data[3]=4913147918581497856L;
		data[4]=8396959325669838928L;
		data[5]=1126451812400982L;
		data[6]=-7136571775889513934L;
		data[7]=576460765997580480L;
		data[8]=865183731141169152L;
		data[9]=-2998834386360598512L;
		data[10]=6775666242893120024L;
		data[11]=-2303590831308471804L;
		data[12]=3458766442362643714L;
		data[13]=-9222949799676084200L;
		data[14]=131L;
		data[15]=361411909712347664L;
		data[16]=9197085240081350022L;
		return data;
	}
	public static final BitSet _tokenSet_23 = new BitSet(mk_tokenSet_23());
	private static final long[] mk_tokenSet_24() {
		long[] data = new long[170];
		data[0]=720584758095491408L;
		data[1]=19043554009546769L;
		data[2]=4666287662003394952L;
		data[3]=4913147918581497856L;
		data[4]=8396959325669838928L;
		data[5]=1126451812400982L;
		data[6]=-7136571775889513934L;
		data[7]=576460765997580480L;
		data[8]=865183731141169152L;
		data[9]=-2998834386360598512L;
		data[10]=6775666242893120024L;
		data[11]=-2303590900162166268L;
		data[12]=3458766442366838018L;
		data[13]=-9222949799676084200L;
		data[14]=131L;
		data[15]=361411909712347664L;
		data[16]=9197085240081350022L;
		return data;
	}
	public static final BitSet _tokenSet_24 = new BitSet(mk_tokenSet_24());
	private static final long[] mk_tokenSet_25() {
		long[] data = new long[170];
		data[0]=720584758363926864L;
		data[1]=19043554009546769L;
		data[2]=4666287662003394952L;
		data[3]=4913147918581497856L;
		data[4]=8396959325669838928L;
		data[5]=1126451812400982L;
		data[6]=-7136571775889513934L;
		data[7]=576460765997580480L;
		data[8]=865183731141169152L;
		data[9]=-2998834386360598512L;
		data[10]=6775666242893120024L;
		data[11]=-2303590900162166268L;
		data[12]=3458766442366838018L;
		data[13]=-9222949799676084200L;
		data[14]=131L;
		data[15]=361411909712347664L;
		data[16]=9197085240081350022L;
		return data;
	}
	public static final BitSet _tokenSet_25 = new BitSet(mk_tokenSet_25());
	private static final long[] mk_tokenSet_26() {
		long[] data = new long[170];
		data[0]=720584758363926864L;
		data[1]=19043554009546769L;
		data[2]=4666287662003394952L;
		data[3]=4913147918581497856L;
		data[4]=8396959325669838928L;
		data[5]=1126451812400982L;
		data[6]=-7136571775889513934L;
		data[7]=576460765997580480L;
		data[8]=865183731141169152L;
		data[9]=-2998834386360598512L;
		data[10]=6775666242893120024L;
		data[11]=-2303590900162166268L;
		data[12]=3458766442362643714L;
		data[13]=-9222949799676084200L;
		data[14]=131L;
		data[15]=361411909712347664L;
		data[16]=9197085240081350022L;
		return data;
	}
	public static final BitSet _tokenSet_26 = new BitSet(mk_tokenSet_26());
	private static final long[] mk_tokenSet_27() {
		long[] data = new long[170];
		data[0]=720584758095491922L;
		data[1]=19043554009546769L;
		data[2]=4666287662003394952L;
		data[3]=4913147918581497856L;
		data[4]=8396959325669838928L;
		data[5]=1126451812400982L;
		data[6]=-7136571775889513934L;
		data[7]=576460765997580480L;
		data[8]=865183731141169152L;
		data[9]=-2998834386360598512L;
		data[10]=6775666242893120024L;
		data[11]=-2303027950208744956L;
		data[12]=3458766442362643714L;
		data[13]=-9222949765316345832L;
		data[14]=131L;
		data[15]=361411909712347664L;
		data[16]=9197085240081350022L;
		return data;
	}
	public static final BitSet _tokenSet_27 = new BitSet(mk_tokenSet_27());
	private static final long[] mk_tokenSet_28() {
		long[] data = new long[170];
		data[0]=514L;
		data[11]=562949953421312L;
		data[13]=34359738368L;
		return data;
	}
	public static final BitSet _tokenSet_28 = new BitSet(mk_tokenSet_28());
	private static final long[] mk_tokenSet_29() {
		long[] data = new long[170];
		data[0]=720584740907200512L;
		data[1]=853233639620608L;
		data[2]=36587236476585992L;
		data[3]=4622102792662679552L;
		data[4]=8360930509290749968L;
		data[5]=1126449662820182L;
		data[6]=1509213591038255666L;
		data[7]=4833165504L;
		data[8]=865183713961246720L;
		data[9]=459930127392833552L;
		data[10]=5046283985982849560L;
		data[11]=-2303590934522036224L;
		data[12]=3458765892606755842L;
		data[13]=140737505656856L;
		data[15]=288232575174967296L;
		data[16]=6963299824905584006L;
		return data;
	}
	public static final BitSet _tokenSet_29 = new BitSet(mk_tokenSet_29());
	private static final long[] mk_tokenSet_30() {
		long[] data = new long[170];
		data[0]=720584758095491408L;
		data[1]=19043554009546769L;
		data[2]=4666287662003394952L;
		data[3]=4913147918581497856L;
		data[4]=8396959325669838928L;
		data[5]=1126451812400982L;
		data[6]=-7136571775889513934L;
		data[7]=576460765997580480L;
		data[8]=865183731141169152L;
		data[9]=-2998834386360598512L;
		data[10]=6775666242893120024L;
		data[11]=-2303590900162166268L;
		data[12]=3458766442362643714L;
		data[13]=-9222949799676084200L;
		data[14]=131203L;
		data[15]=361411909712347664L;
		data[16]=9197085240081350022L;
		return data;
	}
	public static final BitSet _tokenSet_30 = new BitSet(mk_tokenSet_30());
	private static final long[] mk_tokenSet_31() {
		long[] data = new long[170];
		data[0]=288230376151711744L;
		data[2]=8388608L;
		data[7]=262208L;
		data[11]=927741523238322176L;
		data[12]=2147483648L;
		return data;
	}
	public static final BitSet _tokenSet_31 = new BitSet(mk_tokenSet_31());
	private static final long[] mk_tokenSet_32() {
		long[] data = new long[170];
		data[1]=2341871806232657920L;
		data[10]=1168231104512L;
		data[13]=110500918591488L;
		return data;
	}
	public static final BitSet _tokenSet_32 = new BitSet(mk_tokenSet_32());
	private static final long[] mk_tokenSet_33() {
		long[] data = new long[170];
		data[0]=336L;
		data[1]=16L;
		data[3]=288230376151711744L;
		data[4]=32768064L;
		data[5]=2147483648L;
		data[6]=1125899906842624L;
		data[7]=576460760893358080L;
		data[8]=36864L;
		data[9]=-4611686018427387904L;
		data[10]=1729382256910270464L;
		data[11]=131072L;
		data[12]=549755813888L;
		data[13]=281499672772608L;
		data[14]=128L;
		data[15]=1121501860331520L;
		data[16]=1080863910568919040L;
		return data;
	}
	public static final BitSet _tokenSet_33 = new BitSet(mk_tokenSet_33());
	private static final long[] mk_tokenSet_34() {
		long[] data = new long[170];
		data[0]=8L;
		data[3]=288230376151711744L;
		data[6]=68719476736L;
		data[7]=578712552117108736L;
		data[8]=4503599644151810L;
		data[11]=131072L;
		data[12]=576460752303423488L;
		data[13]=2097154L;
		return data;
	}
	public static final BitSet _tokenSet_34 = new BitSet(mk_tokenSet_34());
	private static final long[] mk_tokenSet_35() {
		long[] data = new long[340];
		data[0]=-16L;
		for (int i = 1; i<=13; i++) { data[i]=-1L; }
		data[14]=-5L;
		for (int i = 15; i<=168; i++) { data[i]=-1L; }
		data[169]=9223372036854775807L;
		return data;
	}
	public static final BitSet _tokenSet_35 = new BitSet(mk_tokenSet_35());
	private static final long[] mk_tokenSet_36() {
		long[] data = new long[170];
		data[1]=8L;
		data[2]=562949953421312L;
		data[4]=256L;
		data[9]=128L;
		return data;
	}
	public static final BitSet _tokenSet_36 = new BitSet(mk_tokenSet_36());
	private static final long[] mk_tokenSet_37() {
		long[] data = new long[170];
		data[0]=514L;
		data[7]=1024L;
		data[10]=2199023255552L;
		data[11]=72057594172145664L;
		return data;
	}
	public static final BitSet _tokenSet_37 = new BitSet(mk_tokenSet_37());
	private static final long[] mk_tokenSet_38() {
		long[] data = new long[170];
		data[1]=549764202496L;
		data[2]=36029071896870913L;
		data[3]=2097152L;
		data[4]=1073741824L;
		data[5]=4194304L;
		data[6]=108086391056891906L;
		data[7]=256L;
		data[9]=288230376151711744L;
		data[10]=549755813896L;
		data[13]=16777216L;
		data[16]=83886094L;
		return data;
	}
	public static final BitSet _tokenSet_38 = new BitSet(mk_tokenSet_38());
	private static final long[] mk_tokenSet_39() {
		long[] data = new long[170];
		data[0]=720584741184057680L;
		data[1]=19043554009546768L;
		data[2]=4666287662003390856L;
		data[3]=4912584968628076544L;
		data[4]=8360930528650874960L;
		data[5]=1126451810303830L;
		data[6]=1510339491481969202L;
		data[7]=576460765729145024L;
		data[8]=865183713961283584L;
		data[9]=-2998834386360598512L;
		data[10]=6775666242893120024L;
		data[11]=-2303590900162166268L;
		data[12]=3458766442362643714L;
		data[13]=-9222949799676084200L;
		data[14]=131L;
		data[15]=361411909712347664L;
		data[16]=9197085240081350022L;
		return data;
	}
	public static final BitSet _tokenSet_39 = new BitSet(mk_tokenSet_39());
	private static final long[] mk_tokenSet_40() {
		long[] data = new long[170];
		data[0]=720584740915622224L;
		data[1]=19043554009546768L;
		data[2]=4666287662003390856L;
		data[3]=4912584968628076544L;
		data[4]=8360930528650874960L;
		data[5]=1126451810303830L;
		data[6]=1510339491481969202L;
		data[7]=576460765729145024L;
		data[8]=865183713961283584L;
		data[9]=-2998834386360598512L;
		data[10]=6775666242893120024L;
		data[11]=-2303590900162166268L;
		data[12]=3458766442362643714L;
		data[13]=-9222949799676084200L;
		data[14]=131L;
		data[15]=361411909712347664L;
		data[16]=9197085240081350022L;
		return data;
	}
	public static final BitSet _tokenSet_40 = new BitSet(mk_tokenSet_40());
	}
	
